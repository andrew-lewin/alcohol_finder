#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby22Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-502,585,585,218,219,585,-516,-502,-502,-502,221,585,-502,-502,-502',
'271,-502,754,215,666,218,219,218,219,-502,214,-502,-502,-502,-98,666',
'271,-99,-92,212,585,-502,-502,3,-502,-502,-502,-502,-502,112,-106,222',
'-101,-103,-335,706,-100,-105,665,264,83,-335,544,-101,-103,543,265,-98',
'84,665,-335,271,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502',
'-502,-502,-502,734,734,-502,-502,-502,-100,-502,-502,734,271,-502,209',
'222,-502,-502,-416,-502,210,-502,-92,-502,270,-502,-502,-502,-502,-502',
'-502,-502,222,-502,222,-502,211,116,116,-102,270,116,115,115,936,753',
'115,116,-502,-502,-502,-502,115,-502,-505,-502,-89,-92,-102,-90,-92',
'-505,-505,-505,116,-502,-505,-505,-505,115,-505,116,-97,-94,-92,270',
'115,705,-505,-96,-505,-505,-505,-101,-103,-92,-94,-100,-101,-103,-505',
'-505,-100,-505,-505,-505,-505,-505,-104,270,-517,116,217,116,116,-601',
'115,611,115,115,627,116,666,-91,116,459,115,261,532,115,666,-505,-505',
'-505,-505,-505,-505,-505,-505,-505,-505,-505,-505,-505,-505,630,-601',
'-505,-505,-505,-94,-505,-505,-502,-93,-505,665,320,-505,-505,-502,-505',
'-598,-505,665,-505,-99,-505,-505,-505,-505,-505,-505,-505,-602,-505',
'321,-505,613,612,609,-106,-102,626,-105,-94,611,-102,-94,611,-505,-505',
'-505,-505,222,-505,-288,-505,788,681,360,789,-94,-288,-288,-288,116',
'-505,629,-288,-288,115,-288,-95,565,-502,562,561,560,384,563,-505,-502',
'-512,-599,-425,884,-598,-505,387,-512,-502,-288,-288,-511,-288,-288',
'-288,-288,-288,565,-511,562,561,560,390,563,613,612,-598,613,612,94',
'95,-101,-605,764,-103,823,766,591,94,95,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-505,-425,-288,-288,-288,-100',
'649,-505,-425,611,-288,393,-599,-288,611,848,-505,-425,-288,409,-288',
'414,-288,-288,-288,-288,-288,-288,-288,570,-288,-605,-288,611,-599,-425',
'458,216,-605,-605,573,982,-513,-601,-605,-288,-288,-605,-95,-513,-288',
'-605,-605,-605,96,97,570,-605,-605,-510,-605,-507,-104,96,97,-605,-510',
'573,-507,-605,613,612,609,581,580,613,612,614,611,-97,-605,-605,215',
'-605,-605,-605,-605,-605,-516,456,-517,460,-605,-106,613,612,619,611',
'457,-605,581,580,611,-508,-601,616,544,574,-605,546,-508,-605,-605,-605',
'-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,461,-605,-605',
'-605,-605,-89,650,-90,544,574,-605,546,532,-605,613,612,624,643,-605',
'-98,-605,-99,-605,-605,-605,-605,-605,-605,-605,-84,-605,-605,-605,613',
'612,631,644,774,613,612,-509,221,264,-70,-605,-605,-605,-509,-93,265',
'-605,-605,-605,-605,-96,492,-605,-605,-605,-92,-605,565,-102,562,561',
'560,242,563,-105,-605,-605,-605,-605,-101,544,-514,273,546,-94,-91,-605',
'-605,-514,-605,-605,-605,-605,-605,218,219,-515,-514,-103,-100,215,116',
'502,-515,239,720,115,525,241,240,237,238,-515,505,723,507,523,-605,-605',
'-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-69,-280',
'-605,-605,-605,215,790,-605,-280,222,-605,745,535,-605,-605,746,-605',
'-280,-605,518,-605,457,-605,-605,-605,-605,-605,-605,-605,116,-605,-605',
'-605,565,115,562,561,560,570,563,119,120,121,122,123,-605,-605,-605',
'-605,573,-605,-288,-605,222,215,519,1006,526,-288,-288,-288,594,-102',
'-288,-288,-288,276,-288,411,-289,592,568,551,413,412,242,-289,-288,-288',
'-288,578,577,581,580,116,-289,222,-288,-288,115,-288,-288,-288,-288',
'-288,565,273,562,561,560,529,563,565,533,562,561,560,239,563,242,116',
'241,240,237,238,115,574,541,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,-288,547,720,-288,-288,-288,215,791,-288,720',
'548,-288,507,748,-288,-288,591,-288,723,-288,403,-288,750,-288,-288',
'-288,-288,-288,-288,-288,242,-288,565,-288,562,561,560,960,563,562,561',
'560,595,563,596,-289,-288,-288,-288,-288,618,-288,-289,-288,622,8,72',
'73,74,12,60,-289,239,-104,66,67,241,240,625,70,720,68,69,71,33,34,75',
'76,628,928,218,219,635,32,31,30,104,103,105,106,875,876,22,-262,877',
'110,111,654,11,48,10,13,108,107,109,98,59,100,99,101,637,102,110,111',
'222,94,95,641,45,46,44,242,246,251,252,253,248,250,258,259,254,255,642',
'235,236,215,273,256,257,653,43,242,963,36,218,219,61,62,242,242,63,750',
'38,239,242,245,47,241,240,237,238,249,247,243,23,244,581,580,242,91',
'83,85,86,87,89,852,823,222,84,92,239,260,222,-239,241,240,65,218,219',
'81,88,90,852,823,96,97,296,72,73,74,12,60,222,-84,215,66,67,684,222',
'537,70,963,68,69,71,33,34,75,76,695,750,700,701,222,32,31,30,104,103',
'105,106,708,711,22,712,714,716,718,638,11,48,726,13,108,107,109,98,59',
'100,99,101,727,102,110,111,728,94,95,730,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,-288,235,236,-514,591,256,257,-288,43,737,-514',
'298,-602,767,61,62,-288,768,63,-514,38,239,769,245,47,241,240,237,238',
'249,247,243,23,244,-263,775,-288,91,83,85,86,87,89,-288,-515,492,84',
'92,-602,260,492,-515,-288,222,65,793,261,81,88,90,-515,505,96,97,296',
'72,73,74,12,60,507,695,215,66,67,222,273,273,70,1013,68,69,71,33,34',
'75,76,695,1011,242,823,222,32,31,30,104,103,105,106,846,222,22,823,856',
'222,-264,654,11,48,883,13,108,107,109,98,59,100,99,101,886,102,110,111',
'711,94,95,889,45,46,44,242,246,251,252,253,248,250,258,259,254,255,-280',
'235,236,-289,892,256,257,-280,43,894,-289,36,896,222,61,62,-280,898',
'63,-289,38,239,899,245,47,241,240,237,238,249,247,243,23,244,695,907',
'-288,91,83,85,86,87,89,-288,-262,911,84,92,-602,260,913,914,-288,222',
'65,711,917,81,88,90,919,921,96,97,296,72,73,74,12,60,923,923,222,66',
'67,929,931,933,70,222,68,69,71,33,34,75,76,119,120,121,122,123,32,31',
'30,104,103,105,106,943,960,22,562,561,560,944,563,11,48,222,13,108,107',
'109,98,59,100,99,101,947,102,110,111,-265,94,95,957,45,46,44,242,246',
'251,252,253,248,250,258,259,254,255,964,235,236,965,967,256,257,968',
'43,984,986,36,987,991,61,62,711,996,63,998,38,239,1000,245,47,241,240',
'237,238,249,247,243,23,244,1002,1002,1009,91,83,85,86,87,89,1014,1015',
'923,84,92,923,260,923,1020,984,-602,65,-601,700,81,88,90,984,1043,96',
'97,296,72,73,74,12,60,1044,1045,1046,66,67,1002,1002,1002,70,222,68',
'69,71,33,34,75,76,119,120,121,122,123,32,31,30,104,103,105,106,923,984',
'22,119,120,121,122,123,11,48,1002,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,298,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,298,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,222,260,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,-625,-625,,,256,257,,43,,,36,,,61,62,,,63,,38,239,',
'245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,565,,562,561,560,65,563,,81,88,90,,,96,97,296,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,720,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,-625,-625,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,565,,562,561,560,65,563,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,720',
',,,,32,31,30,104,103,105,106,,565,22,562,561,560,,563,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-625,-625',
'-625,-625,248,250,,720,-625,-625,,,,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87',
'89,,,,84,92,,565,,562,561,560,65,563,,81,88,90,,,96,97,296,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,720,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,242,61,62,,,63',
',38,239,,245,47,241,240,237,238,256,257,243,23,244,,,,91,83,85,86,87',
'89,,,239,84,92,,241,240,237,238,,65,,,81,88,90,,,96,97,296,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,',
',,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
',,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,',
'61,62,,,63,,38,239,,245,47,241,240,237,238,,,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,-625,-625,-625,-625,248,250,,,-625,-625,,,,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-625,-625,-625,-625,248,250,,,-625,-625,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,-625,-625,-625,-625,248,250,,,-625,-625,,,',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,-625,-625,-625,-625,248,250,,,-625',
'-625,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,-625,-625,-625,-625,248,250',
',,-625,-625,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,,,254,255,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241',
'240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,258,,254,255,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257',
',227,,,233,,,61,62,,,63,,,239,,245,47,241,240,237,238,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63,,285,239,283,245',
'47,241,240,237,238,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,',
',84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,',
'108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,',
',,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,302,,,,,,,,,,,',
',,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,233,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,319,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,',
',,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89',
',,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,116,,,,,115,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317',
',,,,,,,,,,,,,,,,,,,354,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,403,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,419,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,419,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287',
',,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,',
'48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,',
',,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,',
',,91,286,85,86,87,89,,,,84,287,222,,,,,,65,,290,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307',
',,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,521',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,',
',303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,537,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107',
'109,597,59,100,99,598,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,',
'599,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107',
'109,597,59,100,99,598,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,',
'599,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86',
'87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,678,,283',
',47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,',
',,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,403,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,',
',,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'678,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287',
',,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286',
'85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,',
'234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,772,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'678,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84',
'287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,419,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,901,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,901,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,974,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'678,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
'289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62',
',,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,',
',65,,290,81,88,90,-281,,96,97,,,,-281,-281,-281,,,-281,-281,-281,565',
'-281,562,561,560,570,563,,,,,-281,-281,-281,,,573,,,,,-281,-281,,-281',
'-281,-281,-281,-281,,,,,,,,,,568,,,,,,,,,578,577,581,580,,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,,,-281,-281',
'-281,,,-281,,,-281,,,-281,-281,,-281,574,-281,,-281,,-281,-281,-281',
'-281,-281,-281,-281,,-281,,-281,,,,,,,,,,,,,-281,-281,-281,-281,-606',
'-281,,-281,,,,-606,-606,-606,,,-606,-606,-606,565,-606,562,561,560,570',
'563,,,,-606,-606,-606,-606,,,573,,,,,-606,-606,,-606,-606,-606,-606',
'-606,,,,,,,,,,568,758,,,,,,,,578,577,581,580,,-606,-606,-606,-606,-606',
'-606,-606,-606,-606,-606,-606,-606,-606,-606,,,-606,-606,-606,,,-606',
',,-606,,,-606,-606,,-606,574,-606,,-606,,-606,-606,-606,-606,-606,-606',
'-606,,-606,-606,-606,,,,,,,,,,,,,-606,-606,-606,-606,-607,-606,,-606',
',,,-607,-607,-607,,,-607,-607,-607,565,-607,562,561,560,570,563,,,,-607',
'-607,-607,-607,,,573,,,,,-607,-607,,-607,-607,-607,-607,-607,,,,,,,',
',,568,,,,,,,,,578,577,581,580,,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,-607,-607,,,-607,-607,-607,,,-607,,222,-607,,,-607',
'-607,,-607,574,-607,,-607,,-607,-607,-607,-607,-607,-607,-607,,-607',
'-607,-607,,,,,,,,,,,,,-607,-607,-607,-607,,-607,,-607,176,187,177,200',
'173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192',
'194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178',
'169,170,166,167,168,127,129,126,,128,,,,,,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158',
'176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190',
',,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92',
',,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,369,368,370,367',
'172,191,190,,,,,,171,178,169,170,364,365,366,362,129,100,99,363,,102',
',,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,376,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,400,399,128,,401,,,,,,,161,162,,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173',
'193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194',
'186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169',
'170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187',
'177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174',
'188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,',
'171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,',
',158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205',
'206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191',
'190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,-424,,165,,,',
',-424,-424,-424,,,-424,-424,-424,565,-424,562,561,560,570,563,158,,',
'-424,-424,-424,,,,573,,,,,-424,-424,,-424,-424,-424,-424,-424,,,,,,',
',,,568,,,,,,,,,578,577,581,580,,-424,-424,-424,-424,-424,-424,-424,-424',
'-424,-424,-424,-424,-424,-424,,,-424,-424,-424,,,-424,,273,-424,,,-424',
'-424,,-424,574,-424,,-424,,-424,-424,-424,-424,-424,-424,-424,,-424',
'-424,-424,,,,,,,,,,,,-295,-424,-424,,-424,,-424,-295,-295,-295,,,-295',
'-295,-295,565,-295,562,561,560,570,563,,,,,-295,-295,,,,573,,,,,-295',
'-295,,-295,-295,-295,-295,-295,,,,,,,,,,568,,,,,,,,,578,577,581,580',
',-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295',
',,-295,-295,-295,,,-295,,276,-295,,,-295,-295,,-295,574,-295,,-295,',
'-295,-295,-295,-295,-295,-295,-295,,-295,,-295,,,,,,,,,,,,-624,-295',
'-295,,-295,,-295,-624,-624,-624,,,-624,-624,-624,565,-624,562,561,560',
'570,563,,,,-624,-624,-624,,,,573,,,,,-624,-624,,-624,-624,-624,-624',
'-624,,,,,,,,,,568,,,,,,,,,,,581,580,,-624,-624,-624,-624,-624,-624,-624',
'-624,-624,-624,-624,-624,-624,-624,,,-624,-624,-624,,,-624,,273,-624',
',,-624,-624,,-624,574,-624,,-624,,-624,-624,-624,-624,-624,-624,-624',
',-624,-624,-624,,,,,,,,,,,,-624,-624,-624,,-624,,-624,-624,-624,-624',
',,-624,-624,-624,565,-624,562,561,560,570,563,,,,-624,-624,,,,,573,',
',,,-624,-624,,-624,-624,-624,-624,-624,,,,,,,,,,568,,565,,562,561,560',
'570,563,578,577,581,580,,,,,,573,,,,,,,-624,,,,,,,-624,,,,,273,-624',
',568,,,,,574,,,,429,433,581,580,430,,,,,,-624,-624,,161,162,,157,139',
'140,141,148,145,147,,-624,142,143,,,-624,163,164,149,150,,,574,,,273',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,436,440,,,435,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,490,433,,,491,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,656',
'433,,,657,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,658,440,,,659,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,688',
'433,,,689,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,691,440,,,692,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,656',
'433,,,657,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,658,440,,,659,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,740',
'433,,,741,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,742,440,,,743,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,860',
'440,,,861,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,490,433,,,491,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,565,165,562,561',
'560,570,563,565,,562,561,560,570,563,,,573,,,,,158,,573,565,,562,561',
'560,570,563,,,,,,,,568,,573,,,,,568,,578,577,581,580,,,,578,577,581',
'580,,,,565,568,562,561,560,570,563,,,,578,577,581,580,,565,573,562,561',
'560,570,563,574,,,,,,,574,,573,,,,,,,568,565,,562,561,560,570,563,574',
',,581,580,,,568,565,573,562,561,560,570,563,,,,581,580,,,,,573,,,,,',
',568,,,,,,574,,,,,581,580,,,568,758,,1008,440,,574,1007,,578,577,581',
'580,,,,161,162,,157,139,140,141,148,145,147,,,142,143,574,,,163,164',
'149,150,,,,,,273,,,574,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,565,165,562,561,560,570,563,565,,562,561,560,570,563,,',
'573,,,,,158,,573,565,,562,561,560,570,563,,,,,,,,568,,573,,,,,568,,578',
'577,581,580,,,,,,581,580,,,,565,568,562,561,560,570,563,,,,,,581,580',
',,573,,,,,,574,,,,,,,574,,,,,,,,,568,1036,433,,,1037,,,574,,,581,580',
',161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,',
',,,,273,,,,,574,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,1038,440,,,1039,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,565,165,562,561,560,570,563,565,,562',
'561,560,570,563,,,573,,,,,158,,573,,,,,,,,,,,,,,,568,,,,,,,568,,,,581',
'580,,,,,,581,580,,,,,,,,,,,,,,,,,,,,,,,,,,574,,,,,,,574' ]
        racc_action_table = arr = ::Array.new(26543, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'98,344,345,453,453,857,225,98,98,98,22,910,98,98,98,64,98,603,17,488',
'698,698,761,761,98,17,98,98,98,351,496,29,352,688,17,932,98,98,1,98',
'98,98,98,98,3,355,22,1036,1037,49,550,1051,595,488,27,80,49,333,740',
'741,333,27,225,80,496,49,312,98,98,98,98,98,98,98,98,98,98,98,98,98',
'98,587,588,98,98,98,858,98,98,859,669,98,13,453,98,98,29,98,15,98,688',
'98,64,98,98,98,98,98,98,98,698,98,761,98,16,344,345,742,29,857,344,345',
'857,603,857,910,98,98,98,98,910,98,101,98,351,688,1038,352,688,101,101',
'101,603,98,101,101,101,603,101,932,355,689,688,312,932,550,101,595,101',
'101,101,1036,1037,740,741,1051,1036,1037,101,101,1051,101,101,101,101',
'101,743,669,226,5,19,587,588,742,5,509,587,588,391,859,497,858,293,228',
'859,25,458,293,670,101,101,101,101,101,101,101,101,101,101,101,101,101',
'101,394,1038,101,101,101,689,101,101,362,742,101,497,40,101,101,362',
'101,597,101,670,101,226,101,101,101,101,101,101,101,743,101,43,101,509',
'509,509,228,1038,391,458,689,620,1038,689,623,101,101,101,101,48,101',
'435,101,656,509,72,657,689,435,435,435,348,101,394,435,435,348,435,743',
'723,597,723,723,723,87,723,363,597,364,598,818,792,597,363,88,364,597',
'435,435,365,435,435,435,435,435,928,365,928,928,928,89,928,620,620,597',
'623,623,44,44,656,691,620,657,989,623,989,317,317,435,435,435,435,435',
'435,435,435,435,435,435,435,435,435,598,818,435,435,435,792,435,598',
'818,378,435,90,598,435,380,723,598,818,435,124,435,207,435,435,435,435',
'435,435,435,708,435,691,435,385,598,818,227,18,691,860,708,928,366,691',
'436,435,435,691,435,366,435,436,436,436,44,44,886,436,436,367,436,368',
'435,317,317,691,367,886,368,436,378,378,378,708,708,380,380,380,388',
'18,436,436,224,436,436,436,436,436,41,224,42,229,860,18,385,385,385',
'396,224,860,886,886,382,369,860,382,334,708,860,334,369,436,436,436',
'436,436,436,436,436,436,436,436,436,436,436,230,860,436,436,436,41,436',
'42,338,886,436,338,321,436,388,388,388,429,436,41,436,42,436,436,436',
'436,436,436,436,683,436,436,436,396,396,396,430,639,382,382,370,234',
'372,683,658,436,436,370,436,372,436,658,658,658,321,266,658,658,658',
'429,658,568,436,568,568,568,483,568,321,658,658,658,658,429,703,304',
'269,703,430,639,658,658,304,658,658,658,658,658,20,20,305,304,430,639',
'306,754,280,305,483,568,754,306,483,483,483,483,305,281,568,284,306',
'658,658,658,658,658,658,658,658,658,658,658,658,658,658,297,308,658',
'658,658,323,658,658,308,299,658,599,323,658,658,599,658,308,658,300',
'658,323,658,658,658,658,658,658,658,759,658,658,658,342,759,342,342',
'342,342,342,9,9,9,9,9,658,658,658,658,342,658,659,658,958,353,301,958',
'307,659,659,659,353,658,659,659,659,310,659,126,526,353,342,342,126',
'126,484,526,659,659,659,342,342,342,342,867,526,311,659,659,867,659',
'659,659,659,659,848,316,848,848,848,318,848,720,322,720,720,720,484',
'720,325,941,484,484,484,484,941,342,331,659,659,659,659,659,659,659',
'659,659,659,659,659,659,659,335,848,659,659,659,601,659,659,720,336',
'659,339,601,659,659,349,659,720,659,350,659,601,659,659,659,659,659',
'659,659,464,659,846,659,846,846,846,898,846,898,898,898,354,898,356',
'746,659,659,659,659,384,659,746,659,387,2,2,2,2,2,2,746,464,659,2,2',
'464,464,390,2,846,2,2,2,2,2,2,2,393,846,329,329,415,2,2,2,2,2,2,2,762',
'762,2,418,762,762,762,448,2,2,2,2,2,2,2,2,2,2,2,2,420,2,2,2,424,2,2',
'427,2,2,2,448,448,448,448,448,448,448,448,448,448,448,428,448,448,900',
'437,448,448,445,2,466,900,2,343,343,2,2,465,467,2,900,2,448,468,448',
'2,448,448,448,448,448,448,448,2,448,711,711,469,2,2,2,2,2,2,729,729',
'498,2,2,465,448,499,448,465,465,2,755,755,2,2,2,1022,1022,2,2,36,36',
'36,36,36,36,516,517,962,36,36,520,522,527,36,962,36,36,36,36,36,36,36',
'530,962,538,539,540,36,36,36,36,36,36,36,553,554,36,556,557,558,567',
'423,36,36,575,36,36,36,36,36,36,36,36,36,579,36,36,36,582,36,36,584',
'36,36,36,423,423,423,423,423,423,423,423,423,423,423,692,423,423,971',
'589,423,423,692,36,590,971,36,692,627,36,36,692,630,36,971,36,423,632',
'423,36,423,423,423,423,423,423,423,36,423,636,640,861,36,36,36,36,36',
'36,861,972,645,36,36,861,423,651,972,861,660,36,662,668,36,36,36,972',
'675,36,36,209,209,209,209,209,209,677,685,973,209,209,687,690,693,209',
'973,209,209,209,209,209,209,209,694,973,697,699,707,209,209,209,209',
'209,209,209,722,724,209,731,736,739,771,661,209,209,776,209,209,209',
'209,209,209,209,209,209,794,209,209,209,795,209,209,797,209,209,209',
'661,661,661,661,661,661,661,661,661,661,661,975,661,661,1014,798,661',
'661,975,209,799,1014,209,801,802,209,209,975,803,209,1014,209,661,804',
'661,209,661,661,661,661,661,661,661,209,661,817,821,1039,209,209,209',
'209,209,209,1039,824,825,209,209,1039,661,829,830,1039,831,209,832,836',
'209,209,209,837,839,209,209,233,233,233,233,233,233,840,842,845,233',
'233,847,850,853,233,863,233,233,233,233,233,233,233,295,295,295,295',
'295,233,233,233,233,233,233,233,868,1006,233,1006,1006,1006,869,1006',
'233,233,870,233,233,233,233,233,233,233,233,233,879,233,233,233,880',
'233,233,897,233,233,233,24,24,24,24,24,24,24,24,24,24,24,901,24,24,902',
'904,24,24,905,233,930,934,233,935,940,233,233,948,951,233,952,233,24',
'953,24,233,24,24,24,24,24,24,24,233,24,954,956,966,233,233,233,233,233',
'233,974,977,978,233,233,979,24,980,981,983,1007,233,1008,1010,233,233',
'233,1021,1026,233,233,298,298,298,298,298,298,1027,1028,1029,298,298',
'1030,1031,1032,298,1035,298,298,298,298,298,298,298,515,515,515,515',
'515,298,298,298,298,298,298,298,1040,1041,298,682,682,682,682,682,298',
'298,1053,298,298,298,298,298,298,298,298,298,,298,298,298,,298,298,',
'298,298,298,278,278,278,278,278,278,278,278,278,278,278,,278,278,,,278',
'278,,298,,,298,,,298,298,,,298,,298,278,,278,298,278,278,278,278,278',
'278,278,298,278,,,,298,298,298,298,298,298,,,,298,298,,278,,,,,298,',
',298,298,298,,,298,298,303,303,303,303,303,303,,,,303,303,,,,303,,303',
'303,303,303,303,303,303,,,,,,303,303,303,303,303,303,303,,,303,,,,,',
'303,303,,303,303,303,303,303,303,303,303,303,,303,303,303,,303,303,',
'303,303,303,443,443,443,443,443,443,443,443,443,443,443,,443,443,,,443',
'443,,303,,,303,,,303,303,,,303,,303,443,,443,303,443,443,443,443,443',
'443,443,303,443,,,,303,303,303,303,303,303,,,,303,303,,443,,,,,303,',
',303,303,303,,,303,303,328,328,328,328,328,328,,,,328,328,,,,328,,328',
'328,328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,,328,,,,,',
'328,328,,328,328,328,328,328,328,328,328,328,,328,328,328,,328,328,',
'328,328,328,487,487,487,487,487,487,487,487,487,487,487,,487,487,,,487',
'487,,328,,,328,,,328,328,,,328,,328,487,,487,328,487,487,487,487,487',
'487,487,328,487,,,,328,328,328,328,328,328,,,,328,328,487,487,,,,,328',
',,328,328,328,,,328,328,409,409,409,409,409,409,,,,409,409,,,,409,,409',
'409,409,409,409,409,409,,,,,,409,409,409,409,409,409,409,,,409,,,,,',
'409,409,409,409,409,409,409,409,409,409,409,409,,409,409,409,,409,409',
',409,409,409,536,536,536,536,536,536,536,536,536,536,536,,536,536,,',
'536,536,,409,,,409,,,409,409,,,409,,409,536,,536,409,536,536,536,536',
'536,536,536,409,536,,,,409,409,409,409,409,409,,,,409,409,,536,,,,,409',
',,409,409,409,,,409,409,583,583,583,583,583,583,,,,583,583,,,,583,,583',
'583,583,583,583,583,583,,,,,,583,583,583,583,583,583,583,,,583,,,,,',
'583,583,,583,583,583,583,583,583,583,583,583,,583,583,583,,583,583,',
'583,583,583,696,696,696,696,696,696,696,696,696,696,696,,696,696,,,696',
'696,,583,,,583,,,583,583,,,583,,583,696,,696,583,696,696,696,696,696',
'696,696,583,696,,,,583,583,583,583,583,583,,,,583,583,,696,,,,,583,',
',583,583,583,,,583,583,586,586,586,586,586,586,,,,586,586,,,,586,,586',
'586,586,586,586,586,586,,,,,,586,586,586,586,586,586,586,,,586,,,,,',
'586,586,,586,586,586,586,586,586,586,586,586,,586,586,586,,586,586,',
'586,586,586,773,773,773,773,773,773,773,773,773,773,773,,773,773,,,773',
'773,,586,,,586,,,586,586,,,586,,586,773,,773,586,773,773,773,773,773',
'773,773,586,773,,,,586,586,586,586,586,586,,,,586,586,,773,,,,,586,',
',586,586,586,,,586,586,705,705,705,705,705,705,,,,705,705,,,,705,,705',
'705,705,705,705,705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,',
'705,705,,705,705,705,705,705,705,705,705,705,,705,705,705,,705,705,',
'705,705,705,778,778,778,778,778,778,778,778,778,778,778,,778,778,,,778',
'778,,705,,,705,,,705,705,,,705,,705,778,,778,705,778,778,778,778,778',
'778,778,705,778,,,,705,705,705,705,705,705,,,,705,705,,778,,,,,705,',
',705,705,705,,,705,705,706,706,706,706,706,706,,,,706,706,,,,706,,706',
'706,706,706,706,706,706,,,,,,706,706,706,706,706,706,706,,,706,,,,,',
'706,706,,706,706,706,706,706,706,706,706,706,,706,706,706,,706,706,',
'706,706,706,780,780,780,780,780,780,780,780,780,780,780,,780,780,,,780',
'780,,706,,,706,,,706,706,,,706,,706,780,,780,706,780,780,780,780,780',
'780,780,706,780,,,,706,706,706,706,706,706,,,,706,706,,780,,,,,706,',
',706,706,706,,,706,706,756,756,756,756,756,756,,,,756,756,,,,756,,756',
'756,756,756,756,756,756,,,,,,756,756,756,756,756,756,756,,,756,,,,,',
'756,756,,756,756,756,756,756,756,756,756,756,,756,756,756,,756,756,',
'756,756,756,783,783,783,783,783,783,783,783,783,783,783,,783,783,,,783',
'783,,756,,,756,,,756,756,,,756,,756,783,,783,756,783,783,783,783,783',
'783,783,756,783,,,,756,756,756,756,756,756,,,,756,756,,783,,,,,756,',
',756,756,756,,,756,756,757,757,757,757,757,757,,,,757,757,,,,757,,757',
'757,757,757,757,757,757,,,,,,757,757,757,757,757,757,757,,,757,,,,,',
'757,757,,757,757,757,757,757,757,757,757,757,,757,757,757,,757,757,',
'757,757,757,785,785,785,785,785,785,785,785,785,785,785,,785,785,,,785',
'785,,757,,,757,,,757,757,,,757,,757,785,,785,757,785,785,785,785,785',
'785,785,757,785,,,,757,757,757,757,757,757,,,,757,757,,785,,,,,757,',
',757,757,757,,,757,757,763,763,763,763,763,763,,,,763,763,,,,763,,763',
'763,763,763,763,763,763,,,,,,763,763,763,763,763,763,763,,,763,,,,,',
'763,763,,763,763,763,763,763,763,763,763,763,,763,763,763,,763,763,',
'763,763,763,787,787,787,787,787,787,787,787,787,787,787,,787,787,,,787',
'787,,763,,,763,,,763,763,,,763,,763,787,,787,763,787,787,787,787,787',
'787,787,763,787,,,,763,763,763,763,763,763,,,,763,763,,787,,,,,763,',
',763,763,763,,,763,763,808,808,808,808,808,808,,,,808,808,,,,808,,808',
'808,808,808,808,808,808,,,,,,808,808,808,808,808,808,808,,,808,,,,,',
'808,808,,808,808,808,808,808,808,808,808,808,,808,808,808,,808,808,',
'808,808,808,882,882,882,882,882,882,882,882,882,882,882,,882,882,,,882',
'882,,808,,,808,,,808,808,,,808,,808,882,,882,808,882,882,882,882,882',
'882,882,808,882,,,,808,808,808,808,808,808,,,,808,808,,882,,,,,808,',
',808,808,808,,,808,808,812,812,812,812,812,812,,,,812,812,,,,812,,812',
'812,812,812,812,812,812,,,,,,812,812,812,812,812,812,812,,,812,,,,,',
'812,812,,812,812,812,812,812,812,812,812,812,,812,812,812,,812,812,',
'812,812,812,885,885,885,885,885,885,885,885,885,885,885,,885,885,,,885',
'885,,812,,,812,,,812,812,,,812,,812,885,,885,812,885,885,885,885,885',
'885,885,812,885,,,,812,812,812,812,812,812,,,,812,812,,885,,,,,812,',
',812,812,812,,,812,812,813,813,813,813,813,813,,,,813,813,,,,813,,813',
'813,813,813,813,813,813,,,,,,813,813,813,813,813,813,813,,,813,,,,,',
'813,813,,813,813,813,813,813,813,813,813,813,,813,813,813,,813,813,',
'813,813,813,462,462,462,462,462,462,462,462,462,462,462,,462,462,,,462',
'462,,813,,,813,,,813,813,,,813,,813,462,,462,813,462,462,462,462,462',
'462,462,813,462,,,,813,813,813,813,813,813,,,,813,813,,929,,929,929',
'929,813,929,,813,813,813,,,813,813,823,823,823,823,823,823,,,,823,823',
',,,823,,823,823,823,823,823,823,823,929,,,,,823,823,823,823,823,823',
'823,,,823,,,,,,823,823,,823,823,823,823,823,823,823,823,823,,823,823',
'823,,823,823,,823,823,823,463,463,463,463,463,463,463,463,463,463,463',
',463,463,,,463,463,,823,,,823,,,823,823,,,823,,823,463,,463,823,463',
'463,463,463,463,463,463,823,463,,,,823,823,823,823,823,823,,,,823,823',
',982,,982,982,982,823,982,,823,823,823,,,823,823,854,854,854,854,854',
'854,,,,854,854,,,,854,,854,854,854,854,854,854,854,982,,,,,854,854,854',
'854,854,854,854,,984,854,984,984,984,,984,854,854,,854,854,854,854,854',
'854,854,854,854,,854,854,854,,854,854,,854,854,854,473,473,473,473,473',
'473,473,,984,473,473,,,,,,473,473,,854,,,854,,,854,854,,,854,,854,473',
',473,854,473,473,473,473,473,473,473,854,473,,,,854,854,854,854,854',
'854,,,,854,854,,1020,,1020,1020,1020,854,1020,,854,854,854,,,854,854',
'855,855,855,855,855,855,,,,855,855,,,,855,,855,855,855,855,855,855,855',
'1020,,,,,855,855,855,855,855,855,855,,,855,,,,,,855,855,,855,855,855',
'855,855,855,855,855,855,,855,855,855,,855,855,,855,855,855,474,,,,,',
',,,,,,,,,,474,474,,855,,,855,,472,855,855,,,855,,855,474,,474,855,474',
'474,474,474,472,472,474,855,474,,,,855,855,855,855,855,855,,,472,855',
'855,,472,472,472,472,,855,,,855,855,855,,,855,855,864,864,864,864,864',
'864,,,,864,864,,,,864,,864,864,864,864,864,864,864,,,,,,864,864,864',
'864,864,864,864,,,864,,,,,,864,864,,864,864,864,864,864,864,864,864',
'864,,864,864,864,,864,864,,864,864,864,475,,,,,,,,,,,,,,,,475,475,,864',
',,864,,,864,864,,,864,,864,475,,475,864,475,475,475,475,,,475,864,475',
',,,864,864,864,864,864,864,,,,864,864,,,,,,,864,,,864,864,864,,,864',
'864,903,903,903,903,903,903,,,,903,903,,,,903,,903,903,903,903,903,903',
'903,,,,,,903,903,903,903,903,903,903,,,903,,,,,,903,903,,903,903,903',
'903,903,903,903,903,903,,903,903,903,,903,903,,903,903,903,476,,,,,',
',,,,,,,,,,476,476,,903,,,903,,,903,903,,,903,,903,476,,476,903,476,476',
'476,476,,,476,903,476,,,,903,903,903,903,903,903,,,,903,903,,,,,,,903',
',,903,903,903,,,903,903,907,907,907,907,907,907,,,,907,907,,,,907,,907',
'907,907,907,907,907,907,,,,,,907,907,907,907,907,907,907,,,907,,,,,',
'907,907,,907,907,907,907,907,907,907,907,907,,907,907,907,,907,907,',
'907,907,907,477,,,,,,,,,,,,,,,,477,477,,907,,,907,,,907,907,,,907,,907',
'477,,477,907,477,477,477,477,,,477,907,477,,,,907,907,907,907,907,907',
',,,907,907,,,,,,,907,,,907,907,907,,,907,907,937,937,937,937,937,937',
',,,937,937,,,,937,,937,937,937,937,937,937,937,,,,,,937,937,937,937',
'937,937,937,,,937,,,,,,937,937,,937,937,937,937,937,937,937,937,937',
',937,937,937,,937,937,,937,937,937,478,478,478,478,478,478,478,,,478',
'478,,,,,,478,478,,937,,,937,,,937,937,,,937,,937,478,,478,937,478,478',
'478,478,478,478,478,937,478,,,,937,937,937,937,937,937,,,,937,937,,',
',,,,937,,,937,937,937,,,937,937,970,970,970,970,970,970,,,,970,970,',
',,970,,970,970,970,970,970,970,970,,,,,,970,970,970,970,970,970,970',
',,970,,,,,,970,970,,970,970,970,970,970,970,970,970,970,,970,970,970',
',970,970,,970,970,970,479,479,479,479,479,479,479,,,479,479,,,,,,479',
'479,,970,,,970,,,970,970,,,970,,970,479,,479,970,479,479,479,479,479',
'479,479,970,479,,,,970,970,970,970,970,970,,,,970,970,,,,,,,970,,,970',
'970,970,,,970,970,985,985,985,985,985,985,,,,985,985,,,,985,,985,985',
'985,985,985,985,985,,,,,,985,985,985,985,985,985,985,,,985,,,,,,985',
'985,,985,985,985,985,985,985,985,985,985,,985,985,985,,985,985,,985',
'985,985,480,480,480,480,480,480,480,,,480,480,,,,,,480,480,,985,,,985',
',,985,985,,,985,,985,480,,480,985,480,480,480,480,480,480,480,985,480',
',,,985,985,985,985,985,985,,,,985,985,,,,,,,985,,,985,985,985,,,985',
'985,990,990,990,990,990,990,,,,990,990,,,,990,,990,990,990,990,990,990',
'990,,,,,,990,990,990,990,990,990,990,,,990,,,,,,990,990,,990,990,990',
'990,990,990,990,990,990,,990,990,990,,990,990,,990,990,990,481,481,481',
'481,481,481,481,,,481,481,,,,,,481,481,,990,,,990,,,990,990,,,990,,990',
'481,,481,990,481,481,481,481,481,481,481,990,481,,,,990,990,990,990',
'990,990,,,,990,990,,,,,,,990,,,990,990,990,,,990,990,993,993,993,993',
'993,993,,,,993,993,,,,993,,993,993,993,993,993,993,993,,,,,,993,993',
'993,993,993,993,993,,,993,,,,,,993,993,,993,993,993,993,993,993,993',
'993,993,,993,993,993,,993,993,,993,993,993,482,482,482,482,482,482,482',
',,482,482,,,,,,482,482,,993,,,993,,,993,993,,,993,,993,482,,482,993',
'482,482,482,482,482,482,482,993,482,,,,993,993,993,993,993,993,,,,993',
'993,,,,,,,993,,,993,993,993,,,993,993,994,994,994,994,994,994,,,,994',
'994,,,,994,,994,994,994,994,994,994,994,,,,,,994,994,994,994,994,994',
'994,,,994,,,,,,994,994,,994,994,994,994,994,994,994,994,994,,994,994',
'994,,994,994,,994,994,994,485,485,485,485,485,485,485,,,485,485,,,,',
',485,485,,994,,,994,,,994,994,,,994,,994,485,,485,994,485,485,485,485',
'485,485,485,994,485,,,,994,994,994,994,994,994,,,,994,994,,,,,,,994',
',,994,994,994,,,994,994,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8',
'8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,486',
'486,486,486,486,486,486,486,,486,486,,,,,,486,486,,8,,,8,,,8,8,,,8,',
'8,486,,486,8,486,486,486,486,486,486,486,8,486,,,,8,8,8,8,8,8,,,,8,8',
',,,,,,8,,,8,8,8,,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23',
'23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23',
',23,23,23,,23,23,,23,23,23,470,,,,,,,,,,,,,,,,470,470,,23,,,23,,,23',
'23,,,23,,,470,,470,23,470,470,470,470,,,,23,,,,,23,23,23,23,23,23,,',
',23,23,,,,,,,23,,,23,23,23,,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32',
'32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32',
'32,32,32,32,32,32,32,32,,32,32,,32,32,32,471,,,,,,,,,,,,,,,,471,471',
',32,,,32,,,32,32,,,32,,32,471,32,471,32,471,471,471,471,,,,32,,,,,32',
'32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,',
',,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,',
',,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,',
',,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33',
'33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34,34,34,,34,,,,34,34',
',,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34',
',,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,',
',,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34',
'34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,,37,,,,37,37,,,,37',
',37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37',
'37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37',
',,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37',
',,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38',
',,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38',
'38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,',
',,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,45',
'45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45',
'45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45',
',,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45',
'45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46,46,,46,,,,46',
'46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,',
'46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,',
',,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46',
',,,46,46,,,,,,,46,,,46,46,46,,,46,46,47,47,47,,47,,,,47,47,,,,47,,47',
'47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47',
'47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47',
',,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,',
'47,,,47,47,47,,,47,47,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61',
'61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61',
',61,61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,',
',,,,61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,61,,,,,,61,,,61,61,61',
',,61,61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62',
'62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,',
'62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,',
',,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62',
'63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63',
'63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63',
'63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,63,,,,',
'63,63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,,,63,63,66,66,66,,66',
',,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66',
',,,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,',
',,,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66',
'66,66,,,,66,66,,,,,,,66,,,66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,',
'67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67',
'67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67',
',,67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,',
',,,,,67,,,67,67,67,,,67,67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70',
'70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70',
'70,70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70',
',,70,,,,,,70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,',
',70,70,70,,,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71',
',,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71',
'71,71,,71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,',
',,,,,,,,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,114',
'114,114,114,114,,,,114,114,,,,114,,114,114,114,114,114,114,114,,,,,',
'114,114,114,114,114,114,114,,,114,,,,,,114,114,114,114,114,114,114,114',
'114,114,114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,',
',,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114,114',
'114,114,,,,114,114,,,,,,114,114,,,114,114,114,,,114,114,119,119,119',
',119,,,,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119',
'119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119',
'119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119',
',,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119,,,',
',,,119,,,119,119,119,,,119,119,120,120,120,,120,,,,120,120,,,,120,,120',
'120,120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,',
',120,,,120,120,120,120,120,120,120,120,,120,120,120,,120,120,,120,120',
'120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,120',
',,,,120,120,120,120,120,120,,,,120,120,,,,,,,120,,,120,120,120,,,120',
'120,121,121,121,,121,,,,121,121,,,,121,,121,121,121,121,121,121,121',
',,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121,121',
'121,121,121,,121,121,121,,121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121',
',,121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,,,121,121,121,121,121,121',
',,,121,121,,,,,,,121,,,121,121,121,,,121,121,122,122,122,,122,,,,122',
'122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122,122,122',
'122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122,122,122,',
'122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,',
',,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,,,,,,,122,',
',122,122,122,,,122,122,123,123,123,123,123,,,,123,123,,,,123,,123,123',
'123,123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,123',
'123,,123,123,123,123,123,123,123,123,123,,123,123,123,,123,123,,123',
'123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,,,,123,,,',
',,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123,,,123,123,123',
',,123,123,210,210,210,,210,,,,210,210,,,,210,,210,210,210,210,210,210',
'210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210',
'210,210,210,210,,210,210,210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,',
',,210,,,210,,,210,210,,,210,,210,,,,210,,,,,,,,210,,,,,210,210,210,210',
'210,210,,,,210,210,,,,,,,210,,,210,210,210,,,210,210,211,211,211,,211',
',,,211,211,,,,211,,211,211,211,211,211,211,211,,,,,,211,211,211,211',
'211,211,211,,,211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211',
'211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211',
',,,,,211,,,,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,,,,,,,211',
',,211,211,211,,,211,211,212,212,212,,212,,,,212,212,,,,212,,212,212',
'212,212,212,212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,,,212',
',,212,212,212,212,212,212,212,212,212,212,212,212,,212,212,,212,212',
'212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,212,,212,,212,,,,',
',,,212,,,,,212,212,212,212,212,212,,,,212,212,,,,,,,212,,212,212,212',
'212,,,212,212,216,216,216,,216,,,,216,216,,,,216,,216,216,216,216,216',
'216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216',
'216,216,216,216,216,,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,',
',,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216',
'216,216,216,,,,216,216,,,,,,,216,,,216,216,216,,,216,216,217,217,217',
',217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217,217',
'217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217',
'217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217',
',,217,,217,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217',
',,,,,,217,,,217,217,217,,,217,217,218,218,218,,218,,,,218,218,,,,218',
',218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218',
',,,,,,218,,,218,218,218,218,218,218,218,218,,218,218,218,,218,218,,218',
'218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,',
',218,,,,,218,218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218',
',,218,218,219,219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219',
'219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219',
'219,219,219,219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,',
',,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219',
'219,219,,,,219,219,,,,,,,219,,,219,219,219,,,219,219,220,220,220,,220',
',,,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220',
'220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220',
'220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220',
',,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220',
',,220,220,220,,,220,220,221,221,221,,221,,,,221,221,,,,221,,221,221',
'221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221',
',,221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221',
',,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,',
',221,221,221,221,221,221,,,,221,221,221,,,,,,221,,,221,221,221,,,221',
'221,232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232',
',,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232',
'232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232',
',,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232',
',,,232,232,,,,,,,232,,,232,232,232,,,232,232,235,235,235,,235,,,,235',
'235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235',
'235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,',
'235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,',
',,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,,,,,,,235,',
',235,235,235,,,235,235,236,236,236,,236,,,,236,236,,,,236,,236,236,236',
'236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236',
'236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236,,,,,',
',,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236',
'236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236,237',
'237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237',
'237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237',
'237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237',
',,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237',
'237,,,,,,,237,,,237,237,237,,,237,237,238,238,238,,238,,,,238,238,,',
',238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,',
',238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238',
',238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,',
',,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238',
'238,,,238,238,239,239,239,,239,,,,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,',
',,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239',
'239,239,239,,,,239,239,,,,,,,239,,,239,239,239,,,239,239,240,240,240',
',240,,,,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240',
'240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240',
'240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240',
',,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,',
',,,240,,,240,240,240,,,240,240,241,241,241,,241,,,,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241',
',,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241,241,,,241',
'241,242,242,242,,242,,,,242,242,,,,242,,242,242,242,242,242,242,242',
',,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242',
'242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242',
',,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242',
',,,242,242,,,,,,,242,,,242,242,242,,,242,242,243,243,243,,243,,,,243',
'243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243,243',
'243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243,',
'243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,',
',,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,',
',243,243,243,,,243,243,244,244,244,,244,,,,244,244,,,,244,,244,244,244',
'244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244',
'244,244,244,244,244,244,244,,244,244,244,,244,244,,244,244,244,,,,,',
',,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244',
'244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244,244,,,244,244,245',
'245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245',
'245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245',
'245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245',
',,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245',
'245,,,,,,,245,,,245,245,245,,,245,245,246,246,246,,246,,,,246,246,,',
',246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,',
',246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246',
',246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,',
',,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246',
'246,,,246,246,247,247,247,,247,,,,247,247,,,,247,,247,247,247,247,247',
'247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247',
'247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,',
',,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247',
'247,247,247,,,,247,247,,,,,,,247,,,247,247,247,,,247,247,248,248,248',
',248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248',
'248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248',
'248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248',
',,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,',
',,,248,,,248,248,248,,,248,248,249,249,249,,249,,,,249,249,,,,249,,249',
'249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,',
',249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249',
'249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249',
',,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249',
'249,250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250',
',,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250',
'250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250',
',,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250',
',,,250,250,,,,,,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251',
'251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251',
'251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,',
'251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,',
',251,251,251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252',
'252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252',
'252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,',
',,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252',
'252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252,252,253',
'253,253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253',
'253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253',
'253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253',
',,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253',
'253,,,,,,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254,254,,',
',254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,',
',254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254',
',254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,',
',,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254',
'254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255',
'255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255',
'255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,',
',,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255',
'255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,256,256,256',
',256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256',
'256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256',
'256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256',
',,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,',
',,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257',
'257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,',
',257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257',
'257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257',
',,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257',
'257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258',
',,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258',
'258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258',
',,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258',
',,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259',
'259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259',
'259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,',
'259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,',
',,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,',
',259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260',
'260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260',
'260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,',
',,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260',
'260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260,260,267',
'267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267,267,,,,,,267',
'267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267,267,267',
'267,267,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267',
',,267,267,,,267,,267,,267,,267,,,,,,,,267,,,,,267,267,267,267,267,267',
',,,267,267,,,,,,,267,,267,267,267,267,,,267,267,273,273,273,,273,,,',
'273,273,,,,273,,273,273,273,273,273,273,273,,,,,,273,273,273,273,273',
'273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273,273,273,273',
'273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273',
',273,,273,,273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,,,',
',,,273,,273,273,273,273,,,273,273,276,276,276,,276,,,,276,276,,,,276',
',276,276,276,276,276,276,276,,,,,,276,276,276,276,276,276,276,,,276',
',,,,,,276,,,276,276,276,276,276,276,276,276,276,276,276,276,,276,276',
',276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276',
',276,,,,,,,,276,,,,,276,276,276,276,276,276,,,,276,276,276,,,,,,276',
',276,276,276,276,,,276,276,283,283,283,,283,,,,283,283,,,,283,,283,283',
'283,283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283',
',,283,283,283,283,283,283,283,283,,283,283,283,,283,283,,283,283,283',
',,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,283,,,',
',283,283,283,283,283,283,,,,283,283,,,,,,,283,,,283,283,283,,,283,283',
'285,285,285,,285,,,,285,285,,,,285,,285,285,285,285,285,285,285,,,,',
',285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285,285,285,285',
'285,285,,285,285,285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,',
'285,,,285,285,,,285,,,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285',
',,,285,285,,,,,,,285,,,285,285,285,,,285,285,287,287,287,,287,,,,287',
'287,,,,287,,287,287,287,287,287,287,287,,,,,,287,287,287,287,287,287',
'287,,,287,,,,,,,287,,,287,287,287,287,287,287,287,287,,287,287,287,',
'287,287,,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,',
',,,287,,,,,,,,287,,,,,287,287,287,287,287,287,,,,287,287,,,,,,,287,',
',287,287,287,,,287,287,289,289,289,,289,,,,289,289,,,,289,,289,289,289',
'289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289,,,289',
'289,289,289,289,289,289,289,,289,289,289,,289,289,,289,289,289,,,,,',
',,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,,,,,289,,,,,,,,289,,,,,289',
'289,289,289,289,289,,,,289,289,,,,,,,289,,,289,289,289,,,289,289,290',
'290,290,,290,,,,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290',
'290,290,290,290,290,290,,,290,,,,,,,290,,,290,290,290,290,290,290,290',
'290,,290,290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290',
',,290,290,,,290,,,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290',
'290,,,,,,,290,,,290,290,290,,,290,290,296,296,296,296,296,,,,296,296',
',,,296,,296,296,296,296,296,296,296,,,,,,296,296,296,296,296,296,296',
',,296,,,,,,296,296,,296,296,296,296,296,296,296,296,296,,296,296,296',
',296,296,,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,,296,',
'296,,,,296,,,,,,,,296,,,,,296,296,296,296,296,296,,,,296,296,,,,,,,296',
',,296,296,296,,,296,296,302,302,302,,302,,,,302,302,,,,302,,302,302',
'302,302,302,302,302,,,,,,302,302,302,302,302,302,302,,,302,,,,,,,302',
',,302,302,302,302,302,302,302,302,,302,302,302,,302,302,,,,302,,,,,',
',,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,,,,,,,,,,,,,,,,,,302,302,302',
'302,302,302,,,,302,302,,,,302,,,302,,,302,302,302,,,302,302,319,319',
'319,,319,,,,319,319,,,,319,,319,319,319,319,319,319,319,,,,,,319,319',
'319,319,319,319,319,,,319,,,,,,,319,,,319,319,319,319,319,319,319,319',
',319,319,319,,319,319,,,,319,,,,,,,,,,,,,,,,,,,,319,,,319,,,319,319',
',,319,,,,,,,,,,,,,,,,,,,319,319,319,319,319,319,,,,319,319,,,,,,,319',
',,319,319,319,,,319,319,327,327,327,,327,,,,327,327,,,,327,,327,327',
'327,327,327,327,327,,,,,,327,327,327,327,327,327,327,,,327,,,,,,,327',
',,327,327,327,327,327,327,327,327,,327,327,327,,327,327,,327,327,327',
',,,,,,,,,,,,,,,,,,,327,,,327,327,,327,327,,,327,,,,,,327,,,,,,,,327',
',,,,327,327,327,327,327,327,,,,327,327,,,,,,,327,,,327,327,327,,,327',
'327,346,346,346,,346,,,,346,346,,,,346,,346,346,346,346,346,346,346',
',,,,,346,346,346,346,346,346,346,,,346,,,,,,,346,,,346,346,346,346,346',
'346,346,346,,346,346,346,,346,346,,346,346,346,,,,,,,,,,,,,,,,,,,,346',
',,346,,,346,346,,,346,,,,,,346,,,,,,,,346,,,,,346,346,346,346,346,346',
',,,346,346,,,,,,,346,,,346,346,346,,,346,346,347,347,347,,347,,,,347',
'347,,,,347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347,347',
'347,,,347,,,,,,,347,,,347,347,347,347,347,347,347,347,,347,347,347,',
'347,347,,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,,347,,',
',,,347,,,,,,,,347,,,,,347,347,347,347,347,347,,,,347,347,,,,,,,347,',
',347,347,347,,,347,347,359,359,359,,359,,,,359,359,,,,359,,359,359,359',
'359,359,359,359,,,,,,359,359,359,359,359,359,359,,,359,,,,,,,359,,,359',
'359,359,359,359,359,359,359,,359,359,359,,359,359,,,,359,,,,,,,,,,,',
',,,,,,,,359,,,359,,,359,359,,,359,,,,,,,,,,,,,,,,,,,359,359,359,359',
'359,359,,,,359,359,,,,,,,359,,,359,359,359,,,359,359,361,361,361,,361',
',,,361,361,,,,361,,361,361,361,361,361,361,361,,,,,,361,361,361,361',
'361,361,361,,,361,,,,,,,361,,,361,361,361,361,361,361,361,361,,361,361',
'361,,361,361,,,,361,,,,,,,,,,,,,,,,,,,,361,,,361,,,361,361,,,361,,,',
',,,,,,,,,,,,,,,361,361,361,361,361,361,,,,361,361,,,,,,,361,,,361,361',
'361,,,361,361,419,419,419,,419,,,,419,419,,,,419,,419,419,419,419,419',
'419,419,,,,,,419,419,419,419,419,419,419,,,419,,,,,,,419,,,419,419,419',
'419,419,419,419,419,,419,419,419,,419,419,,419,419,419,,,,,,,,,,,,,',
',,,,,,419,,,419,,,419,419,,,419,,,,,,419,,,,,,,,419,,,,,419,419,419',
'419,419,419,,,,419,419,,,,,,,419,,,419,419,419,,,419,419,457,457,457',
',457,,,,457,457,,,,457,,457,457,457,457,457,457,457,,,,,,457,457,457',
'457,457,457,457,,,457,,,,,,,457,,,457,457,457,457,457,457,457,457,457',
'457,457,457,,457,457,,457,457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457',
'457,,,457,,457,,457,,457,,,,,,,,457,,,,,457,457,457,457,457,457,,,,457',
'457,,,,,,,457,,457,457,457,457,,,457,457,459,459,459,,459,,,,459,459',
',,,459,,459,459,459,459,459,459,459,,,,,,459,459,459,459,459,459,459',
',,459,,,,,,,459,,,459,459,459,459,459,459,459,459,,459,459,459,,459',
'459,,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459,,,459,459,,,459,,,,,,459',
',,,,,,,459,,,,,459,459,459,459,459,459,,,,459,459,,,,,,,459,,,459,459',
'459,,,459,459,460,460,460,,460,,,,460,460,,,,460,,460,460,460,460,460',
'460,460,,,,,,460,460,460,460,460,460,460,,,460,,,,,,,460,,,460,460,460',
'460,460,460,460,460,,460,460,460,,460,460,,460,460,460,,,,,,,,,,,,,',
',,,,,,460,,,460,,,460,460,,,460,,,,,,460,,,,,,,,460,,,,,460,460,460',
'460,460,460,,,,460,460,,,,,,,460,,,460,460,460,,,460,460,461,461,461',
',461,,,,461,461,,,,461,,461,461,461,461,461,461,461,,,,,,461,461,461',
'461,461,461,461,,,461,,,,,,,461,,,461,461,461,461,461,461,461,461,,461',
'461,461,,461,461,,461,461,461,,,,,,,,,,,,,,,,,,,,461,,,461,,,461,461',
',,461,,,,,,461,,,,,,,,461,,,,,461,461,461,461,461,461,,,,461,461,,,',
',,,461,,,461,461,461,,,461,461,502,502,502,,502,,,,502,502,,,,502,,502',
'502,502,502,502,502,502,,,,,,502,502,502,502,502,502,502,,,502,,,,,',
',502,,,502,502,502,502,502,502,502,502,502,502,502,502,,502,502,,502',
'502,502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502,,502,,502,,502',
',,,,,,,502,,,,,502,502,502,502,502,502,,,,502,502,,,,,,,502,,502,502',
'502,502,,,502,502,505,505,505,,505,,,,505,505,,,,505,,505,505,505,505',
'505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505',
'505,505,505,505,505,505,505,505,505,505,,505,505,,505,505,505,,,,,,',
',,,,,,,,,,,,,505,,,505,,,505,505,,,505,,,,505,,505,,,,,,,,505,,,,,505',
'505,505,505,505,505,,,,505,505,,,,,,,505,,505,505,505,505,,,505,505',
'507,507,507,,507,,,,507,507,,,,507,,507,507,507,507,507,507,507,,,,',
',507,507,507,507,507,507,507,,,507,,,,,,,507,,,507,507,507,507,507,507',
'507,507,,507,507,507,,507,507,,507,507,507,,,,,,,,,,,,,,,,,,,,507,,',
'507,,,507,507,,,507,,,,,,507,,,,,,,,507,,,,,507,507,507,507,507,507',
',,,507,507,,,,,,,507,,,507,507,507,,,507,507,514,514,514,514,514,,,',
'514,514,,,,514,,514,514,514,514,514,514,514,,,,,,514,514,514,514,514',
'514,514,,,514,,,,,,514,514,,514,514,514,514,514,514,514,514,514,,514',
'514,514,,514,514,,514,514,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514',
',,514,,514,,,,514,,,,,,,,514,,,,,514,514,514,514,514,514,,,,514,514',
',,,,,514,514,,,514,514,514,,,514,514,521,521,521,,521,,,,521,521,,,',
'521,,521,521,521,521,521,521,521,,,,,,521,521,521,521,521,521,521,,',
'521,,,,,,,521,,,521,521,521,521,521,521,521,521,,521,521,521,,521,521',
',,,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,,,,,,,,,,,,,,,',
',,521,521,521,521,521,521,,,,521,521,,,,,,,521,,,521,521,521,,,521,521',
'523,523,523,,523,,,,523,523,,,,523,,523,523,523,523,523,523,523,,,,',
',523,523,523,523,523,523,523,,,523,,,,,,,523,,,523,523,523,523,523,523',
'523,523,523,523,523,523,,523,523,,523,523,523,,,,,,,,,,,,,,,,,,,,523',
',,523,,,523,523,,,523,,523,,523,,523,,,,,,,,523,,,,,523,523,523,523',
'523,523,,,,523,523,,,,,,,523,,523,523,523,523,,,523,523,529,529,529',
',529,,,,529,529,,,,529,,529,529,529,529,529,529,529,,,,,,529,529,529',
'529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529,529,529,529,,529',
'529,529,,529,529,,,,529,,,,,,,,,,,,,,,,,,,,529,,,529,,,529,529,,,529',
',,,,,,,,,,,,,,,,,,529,529,529,529,529,529,,,,529,529,,,,,,,529,,,529',
'529,529,,,529,529,532,532,532,,532,,,,532,532,,,,532,,532,532,532,532',
'532,532,532,,,,,,532,532,532,532,532,532,532,,,532,,,,,,,532,,,532,532',
'532,532,532,532,532,532,,532,532,532,,532,532,,532,532,532,,,,,,,,,',
',,,,,,,,,,532,,,532,,,532,532,,,532,,,,,,532,,,,,,,,532,,,,,532,532',
'532,532,532,532,,,,532,532,,,,,,,532,,,532,532,532,,,532,532,533,533',
'533,,533,,,,533,533,,,,533,,533,533,533,533,533,533,533,,,,,,533,533',
'533,533,533,533,533,,,533,,,,,,,533,,,533,533,533,533,533,533,533,533',
',533,533,533,,533,533,,533,533,533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533',
'533,,,533,,,,,,533,,,,,,,,533,,,,,533,533,533,533,533,533,,,,533,533',
',,,,,,533,,,533,533,533,,,533,533,537,537,537,,537,,,,537,537,,,,537',
',537,537,537,537,537,537,537,,,,,,537,537,537,537,537,537,537,,,537',
',,,,,,537,,,537,537,537,537,537,537,537,537,,537,537,537,,537,537,,537',
'537,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,,,,,,537,,,,,,',
',537,,,,,537,537,537,537,537,537,,,,537,537,,,,,,,537,,,537,537,537',
',,537,537,543,543,543,,543,,,,543,543,,,,543,,543,543,543,543,543,543',
'543,,,,,,543,543,543,543,543,543,543,,,543,,,,,,,543,,,543,543,543,543',
'543,543,543,543,543,543,543,543,,543,543,,543,543,543,,,,,,,,,,,,,,',
',,,,,543,,,543,,,543,543,,,543,,543,,,,543,,,,,,,,543,,,,,543,543,543',
'543,543,543,,,,543,543,,,,,,,543,,543,543,543,543,,,543,543,546,546',
'546,,546,,,,546,546,,,,546,,546,546,546,546,546,546,546,,,,,,546,546',
'546,546,546,546,546,,,546,,,,,,,546,,,546,546,546,546,546,546,546,546',
'546,546,546,546,,546,546,,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546,',
',546,546,,,546,,,,,,546,,,,,,,,546,,,,,546,546,546,546,546,546,,,,546',
'546,,,,,,,546,,546,546,546,546,,,546,546,571,571,571,,571,,,,571,571',
',,,571,,571,571,571,571,571,571,571,,,,,,571,571,571,571,571,571,571',
',,571,,,,,,,571,,,571,571,571,571,571,571,571,571,,571,571,571,,571',
'571,,571,571,571,,,,,,,,,,,,,,,,,,,,571,,,571,,,571,571,,,571,,,,,,571',
',,,,,,,571,,,,,571,571,571,571,571,571,,,,571,571,,,,,,,571,,,571,571',
'571,,,571,571,592,592,592,,592,,,,592,592,,,,592,,592,592,592,592,592',
'592,592,,,,,,592,592,592,592,592,592,592,,,592,,,,,,,592,,,592,592,592',
'592,592,592,592,592,592,592,592,592,,592,592,,592,592,592,,,,,,,,,,',
',,,,,,,,,592,,,592,,,592,592,,,592,,592,,592,,592,,,,,,,,592,,,,,592',
'592,592,592,592,592,,,,592,592,,,,,,,592,,592,592,592,592,,,592,592',
'604,604,604,,604,,,,604,604,,,,604,,604,604,604,604,604,604,604,,,,',
',604,604,604,604,604,604,604,,,604,,,,,,,604,,,604,604,604,604,604,604',
'604,604,,604,604,604,,604,604,,604,604,604,,,,,,,,,,,,,,,,,,,,604,,',
'604,,,604,604,,,604,,,,,,604,,,,,,,,604,,,,,604,604,604,604,604,604',
',,,604,604,,,,,,,604,,,604,604,604,,,604,604,608,608,608,,608,,,,608',
'608,,,,608,,608,608,608,608,608,608,608,,,,,,608,608,608,608,608,608',
'608,,,608,,,,,,,608,,,608,608,608,608,608,608,608,608,,608,608,608,',
'608,608,,608,608,608,,,,,,,,,,,,,,,,,,,,608,,,608,,,608,608,,,608,,',
',,,608,,,,,,,,608,,,,,608,608,608,608,608,608,,,,608,608,,,,,,,608,',
',608,608,608,,,608,608,637,637,637,,637,,,,637,637,,,,637,,637,637,637',
'637,637,637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,,,637,,,637',
'637,637,637,637,637,637,637,,637,637,637,,637,637,,637,637,637,,,,,',
',,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,637,,,,637,,,,,,,,637,,,,,637',
'637,637,637,637,637,,,,637,637,,,,,,,637,,,637,637,637,,,637,637,638',
'638,638,,638,,,,638,638,,,,638,,638,638,638,638,638,638,638,,,,,,638',
'638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638,638,638',
'638,,638,638,638,,638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638',
',,638,638,,,638,,,,,,638,,,,,,,,638,,,,,638,638,638,638,638,638,,,,638',
'638,,,,,,,638,,,638,638,638,,,638,638,641,641,641,,641,,,,641,641,,',
',641,,641,641,641,641,641,641,641,,,,,,641,641,641,641,641,641,641,',
',641,,,,,,,641,,,641,641,641,641,641,641,641,641,641,641,641,641,,641',
'641,,641,641,641,,,,,,,,,,,,,,,,,,,,641,,,641,,,641,641,,,641,,641,',
'641,,641,,,,,,,,641,,,,,641,641,641,641,641,641,,,,641,641,,,,,,,641',
',641,641,641,641,,,641,641,642,642,642,,642,,,,642,642,,,,642,,642,642',
'642,642,642,642,642,,,,,,642,642,642,642,642,642,642,,,642,,,,,,,642',
',,642,642,642,642,642,642,642,642,642,642,642,642,,642,642,,642,642',
'642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,,642,,,,642,,642,,,,,,,',
'642,,,,,642,642,642,642,642,642,,,,642,642,,,,,,,642,,642,642,642,642',
',,642,642,643,643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643',
'643,,,,,,643,643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643',
'643,643,643,643,,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,',
',,643,,,643,,,643,643,,,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643',
'643,643,,,,643,643,,,,,,,643,,,643,643,643,,,643,643,644,644,644,,644',
',,,644,644,,,,644,,644,644,644,644,644,644,644,,,,,,644,644,644,644',
'644,644,644,,,644,,,,,,,644,,,644,644,644,644,644,644,644,644,,644,644',
'644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644',
',,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644,644,,,,,,,644',
',,644,644,644,,,644,644,649,649,649,,649,,,,649,649,,,,649,,649,649',
'649,649,649,649,649,,,,,,649,649,649,649,649,649,649,,,649,,,,,,,649',
',,649,649,649,649,649,649,649,649,,649,649,649,,649,649,,649,649,649',
',,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,,,,,649,,,,,,,,649,,,',
',649,649,649,649,649,649,,,,649,649,,,,,,,649,,,649,649,649,,,649,649',
'650,650,650,,650,,,,650,650,,,,650,,650,650,650,650,650,650,650,,,,',
',650,650,650,650,650,650,650,,,650,,,,,,,650,,,650,650,650,650,650,650',
'650,650,,650,650,650,,650,650,,650,650,650,,,,,,,,,,,,,,,,,,,,650,,',
'650,,,650,650,,,650,,,,,,650,,,,,,,,650,,,,,650,650,650,650,650,650',
',,,650,650,,,,,,,650,,,650,650,650,,,650,650,653,653,653,,653,,,,653',
'653,,,,653,,653,653,653,653,653,653,653,,,,,,653,653,653,653,653,653',
'653,,,653,,,,,,,653,,,653,653,653,653,653,653,653,653,,653,653,653,',
'653,653,,653,653,653,,,,,,,,,,,,,,,,,,,,653,,,653,,,653,653,,,653,,',
',,,653,,,,,,,,653,,,,,653,653,653,653,653,653,,,,653,653,,,,,,,653,',
',653,653,653,,,653,653,654,654,654,,654,,,,654,654,,,,654,,654,654,654',
'654,654,654,654,,,,,,654,654,654,654,654,654,654,,,654,,,,,,,654,,,654',
'654,654,654,654,654,654,654,,654,654,654,,654,654,,654,654,654,,,,,',
',,,,,,,,,,,,,,654,,,654,,,654,654,,,654,,,,,,654,,,,,,,,654,,,,,654',
'654,654,654,654,654,,,,654,654,,,,,,,654,,,654,654,654,,,654,654,678',
'678,678,,678,,,,678,678,,,,678,,678,678,678,678,678,678,678,,,,,,678',
'678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678,678,678,678',
'678,,678,678,678,,678,678,,678,678,678,,,,,,,,,,,,,,,,,,,,678,,,678',
',,678,678,,,678,,,,,,678,,,,,,,,678,,,,,678,678,678,678,678,678,,,,678',
'678,,,,,,,678,,,678,678,678,,,678,678,681,681,681,,681,,,,681,681,,',
',681,,681,681,681,681,681,681,681,,,,,,681,681,681,681,681,681,681,',
',681,,,,,,,681,,,681,681,681,681,681,681,681,681,,681,681,681,,681,681',
',681,681,681,,,,,,,,,,,,,,,,,,,,681,,,681,,,681,681,,,681,,,,,,681,',
',,,,,,681,,,,,681,681,681,681,681,681,,,,681,681,,,,,,,681,,,681,681',
'681,,,681,681,684,684,684,,684,,,,684,684,,,,684,,684,684,684,684,684',
'684,684,,,,,,684,684,684,684,684,684,684,,,684,,,,,,,684,,,684,684,684',
'684,684,684,684,684,,684,684,684,,684,684,,,,684,,,,,,,,,,,,,,,,,,,',
'684,,,684,,,684,684,,,684,,,,,,,,,,,,,,,,,,,684,684,684,684,684,684',
',,,684,684,,,,,,,684,,,684,684,684,,,684,684,695,695,695,,695,,,,695',
'695,,,,695,,695,695,695,695,695,695,695,,,,,,695,695,695,695,695,695',
'695,,,695,,,,,,,695,,,695,695,695,695,695,695,695,695,,695,695,695,',
'695,695,,,,695,,,,,,,,,,,,,,,,,,,,695,,,695,,,695,695,,,695,,,,,,,,',
',,,,,,,,,,695,695,695,695,695,695,,,,695,695,,,,,,,695,,,695,695,695',
',,695,695,700,700,700,,700,,,,700,700,,,,700,,700,700,700,700,700,700',
'700,,,,,,700,700,700,700,700,700,700,,,700,,,,,,,700,,,700,700,700,700',
'700,700,700,700,,700,700,700,,700,700,,700,700,700,,,,,,,,,,,,,,,,,',
',,700,,,700,,,700,700,,,700,,700,,,,700,,,,,,,,700,,,,,700,700,700,700',
'700,700,,,,700,700,,,,,,,700,,,700,700,700,,,700,700,718,718,718,,718',
',,,718,718,,,,718,,718,718,718,718,718,718,718,,,,,,718,718,718,718',
'718,718,718,,,718,,,,,,,718,,,718,718,718,718,718,718,718,718,,718,718',
'718,,718,718,,718,718,718,,,,,,,,,,,,,,,,,,,,718,,,718,,,718,718,,,718',
',,,,,718,,,,,,,,718,,,,,718,718,718,718,718,718,,,,718,718,,,,,,,718',
',,718,718,718,,,718,718,738,738,738,,738,,,,738,738,,,,738,,738,738',
'738,738,738,738,738,,,,,,738,738,738,738,738,738,738,,,738,,,,,,,738',
',,738,738,738,738,738,738,738,738,,738,738,738,,738,738,,738,738,738',
',,,,,,,,,,,,,,,,,,,738,,,738,,,738,738,,,738,,738,,,,738,,,,,,,,738',
',,,,738,738,738,738,738,738,,,,738,738,,,,,,,738,,,738,738,738,,,738',
'738,744,744,744,,744,,,,744,744,,,,744,,744,744,744,744,744,744,744',
',,,,,744,744,744,744,744,744,744,,,744,,,,,,,744,,,744,744,744,744,744',
'744,744,744,,744,744,744,,744,744,,744,744,744,,,,,,,,,,,,,,,,,,,,744',
',,744,,,744,744,,,744,,,,,,744,,,,,,,,744,,,,,744,744,744,744,744,744',
',,,744,744,,,,,,,744,,,744,744,744,,,744,744,750,750,750,,750,,,,750',
'750,,,,750,,750,750,750,750,750,750,750,,,,,,750,750,750,750,750,750',
'750,,,750,,,,,,,750,,,750,750,750,750,750,750,750,750,750,750,750,750',
',750,750,,750,750,750,,,,,,,,,,,,,,,,,,,,750,,,750,,,750,750,,,750,',
'750,,750,,750,,,,,,,,750,,,,,750,750,750,750,750,750,,,,750,750,,,,',
',,750,,750,750,750,750,,,750,750,772,772,772,,772,,,,772,772,,,,772',
',772,772,772,772,772,772,772,,,,,,772,772,772,772,772,772,772,,,772',
',,,,,,772,,,772,772,772,772,772,772,772,772,,772,772,772,,772,772,,772',
'772,772,,,,,,,,,,,,,,,,,,,,772,,,772,,,772,772,,,772,,,,,,772,,,,,,',
',772,,,,,772,772,772,772,772,772,,,,772,772,,,,,,,772,,,772,772,772',
',,772,772,774,774,774,,774,,,,774,774,,,,774,,774,774,774,774,774,774',
'774,,,,,,774,774,774,774,774,774,774,,,774,,,,,,,774,,,774,774,774,774',
'774,774,774,774,,774,774,774,,774,774,,774,774,774,,,,,,,,,,,,,,,,,',
',,774,,,774,,,774,774,,,774,,,,,,774,,,,,,,,774,,,,,774,774,774,774',
'774,774,,,,774,774,,,,,,,774,,,774,774,774,,,774,774,788,788,788,,788',
',,,788,788,,,,788,,788,788,788,788,788,788,788,,,,,,788,788,788,788',
'788,788,788,,,788,,,,,,,788,,,788,788,788,788,788,788,788,788,,788,788',
'788,,788,788,,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,,788',
',,,,,788,,,,,,,,788,,,,,788,788,788,788,788,788,,,,788,788,,,,,,,788',
',,788,788,788,,,788,788,789,789,789,,789,,,,789,789,,,,789,,789,789',
'789,789,789,789,789,,,,,,789,789,789,789,789,789,789,,,789,,,,,,,789',
',,789,789,789,789,789,789,789,789,,789,789,789,,789,789,,789,789,789',
',,,,,,,,,,,,,,,,,,,789,,,789,,,789,789,,,789,,,,,,789,,,,,,,,789,,,',
',789,789,789,789,789,789,,,,789,789,,,,,,,789,,,789,789,789,,,789,789',
'790,790,790,,790,,,,790,790,,,,790,,790,790,790,790,790,790,790,,,,',
',790,790,790,790,790,790,790,,,790,,,,,,,790,,,790,790,790,790,790,790',
'790,790,,790,790,790,,790,790,,790,790,790,,,,,,,,,,,,,,,,,,,,790,,',
'790,,,790,790,,,790,,,,,,790,,,,,,,,790,,,,,790,790,790,790,790,790',
',,,790,790,,,,,,,790,,,790,790,790,,,790,790,791,791,791,,791,,,,791',
'791,,,,791,,791,791,791,791,791,791,791,,,,,,791,791,791,791,791,791',
'791,,,791,,,,,,,791,,,791,791,791,791,791,791,791,791,,791,791,791,',
'791,791,,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791,,,791,,',
',,,791,,,,,,,,791,,,,,791,791,791,791,791,791,,,,791,791,,,,,,,791,',
',791,791,791,,,791,791,793,793,793,,793,,,,793,793,,,,793,,793,793,793',
'793,793,793,793,,,,,,793,793,793,793,793,793,793,,,793,,,,,,,793,,,793',
'793,793,793,793,793,793,793,,793,793,793,,793,793,,793,793,793,,,,,',
',,,,,,,,,,,,,,793,,,793,,,793,793,,,793,,,,,,793,,,,,,,,793,,,,,793',
'793,793,793,793,793,,,,793,793,,,,,,,793,,,793,793,793,,,793,793,805',
'805,805,,805,,,,805,805,,,,805,,805,805,805,805,805,805,805,,,,,,805',
'805,805,805,805,805,805,,,805,,,,,,,805,,,805,805,805,805,805,805,805',
'805,,805,805,805,,805,805,,,,805,,,,,,,,,,,,,,,,,,,,805,,,805,,,805',
'805,,,805,,,,,,,,,,,,,,,,,,,805,805,805,805,805,805,,,,805,805,,,,,',
',805,,,805,805,805,,,805,805,852,852,852,,852,,,,852,852,,,,852,,852',
'852,852,852,852,852,852,,,,,,852,852,852,852,852,852,852,,,852,,,,,',
',852,,,852,852,852,852,852,852,852,852,,852,852,852,,852,852,,852,852',
'852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852,,,852,,,,,,852,,,,,,,,852',
',,,,852,852,852,852,852,852,,,,852,852,,,,,,,852,,,852,852,852,,,852',
'852,865,865,865,,865,,,,865,865,,,,865,,865,865,865,865,865,865,865',
',,,,,865,865,865,865,865,865,865,,,865,,,,,,,865,,,865,865,865,865,865',
'865,865,865,,865,865,865,,865,865,,865,865,865,,,,,,,,,,,,,,,,,,,,865',
',,865,,,865,865,,,865,,,,,,865,,,,,,,,865,,,,,865,865,865,865,865,865',
',,,865,865,,,,,,,865,,,865,865,865,,,865,865,883,883,883,,883,,,,883',
'883,,,,883,,883,883,883,883,883,883,883,,,,,,883,883,883,883,883,883',
'883,,,883,,,,,,,883,,,883,883,883,883,883,883,883,883,883,883,883,883',
',883,883,,883,883,883,,,,,,,,,,,,,,,,,,,,883,,,883,,,883,883,,,883,',
',,883,,883,,,,,,,,883,,,,,883,883,883,883,883,883,,,,883,883,,,,,,,883',
',883,883,883,883,,,883,883,884,884,884,,884,,,,884,884,,,,884,,884,884',
'884,884,884,884,884,,,,,,884,884,884,884,884,884,884,,,884,,,,,,,884',
',,884,884,884,884,884,884,884,884,,884,884,884,,884,884,,884,884,884',
',,,,,,,,,,,,,,,,,,,884,,,884,,,884,884,,,884,,,,,,884,,,,,,,,884,,,',
',884,884,884,884,884,884,,,,884,884,,,,,,,884,,,884,884,884,,,884,884',
'899,899,899,,899,,,,899,899,,,,899,,899,899,899,899,899,899,899,,,,',
',899,899,899,899,899,899,899,,,899,,,,,,,899,,,899,899,899,899,899,899',
'899,899,,899,899,899,,899,899,,,,899,,,,,,,,,,,,,,,,,,,,899,,,899,,',
'899,899,,,899,,,,,,,,,,,,,,,,,,,899,899,899,899,899,899,,,,899,899,',
',,,,,899,,,899,899,899,,,899,899,911,911,911,,911,,,,911,911,,,,911',
',911,911,911,911,911,911,911,,,,,,911,911,911,911,911,911,911,,,911',
',,,,,,911,,,911,911,911,911,911,911,911,911,,911,911,911,,911,911,,',
',911,,,,,,,,,,,,,,,,,,,,911,,,911,,,911,911,,,911,,,,,,,,,,,,,,,,,,',
'911,911,911,911,911,911,,,,911,911,,,,,,,911,,,911,911,911,,,911,911',
'936,936,936,,936,,,,936,936,,,,936,,936,936,936,936,936,936,936,,,,',
',936,936,936,936,936,936,936,,,936,,,,,,,936,,,936,936,936,936,936,936',
'936,936,,936,936,936,,936,936,,936,936,936,,,,,,,,,,,,,,,,,,,,936,,',
'936,,,936,936,,,936,,936,,,,936,,,,,,,,936,,,,,936,936,936,936,936,936',
',,,936,936,,,,,,,936,,,936,936,936,,,936,936,1011,1011,1011,,1011,,',
',1011,1011,,,,1011,,1011,1011,1011,1011,1011,1011,1011,,,,,,1011,1011',
'1011,1011,1011,1011,1011,,,1011,,,,,,,1011,,,1011,1011,1011,1011,1011',
'1011,1011,1011,1011,1011,1011,1011,,1011,1011,,1011,1011,1011,,,,,,',
',,,,,,,,,,,,,1011,,,1011,,,1011,1011,,,1011,,1011,,1011,,1011,,,,,,',
',1011,,,,,1011,1011,1011,1011,1011,1011,,,,1011,1011,,,,,,,1011,,1011',
'1011,1011,1011,59,,1011,1011,,,,59,59,59,,,59,59,59,551,59,551,551,551',
'551,551,,,,,59,59,59,,,551,,,,,59,59,,59,59,59,59,59,,,,,,,,,,551,,',
',,,,,,551,551,551,551,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59',
'59,59,,,59,,,59,,,59,59,,59,551,59,,59,,59,59,59,59,59,59,59,,59,,59',
',,,,,,,,,,,,59,59,59,59,440,59,,59,,,,440,440,440,,,440,440,440,606',
'440,606,606,606,606,606,,,,440,440,440,440,,,606,,,,,440,440,,440,440',
'440,440,440,,,,,,,,,,606,606,,,,,,,,606,606,606,606,,440,440,440,440',
'440,440,440,440,440,440,440,440,440,440,,,440,440,440,,,440,,,440,,',
'440,440,,440,606,440,,440,,440,440,440,440,440,440,440,,440,440,440',
',,,,,,,,,,,,440,440,440,440,441,440,,440,,,,441,441,441,,,441,441,441',
'665,441,665,665,665,665,665,,,,441,441,441,441,,,665,,,,,441,441,,441',
'441,441,441,441,,,,,,,,,,665,,,,,,,,,665,665,665,665,,441,441,441,441',
'441,441,441,441,441,441,441,441,441,441,,,441,441,441,,,441,,665,441',
',,441,441,,441,665,441,,441,,441,441,441,441,441,441,441,,441,441,441',
',,,,,,,,,,,,441,441,441,441,,441,,441,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11',
'11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11',
'11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11',
'11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12',
'12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12',
'12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12',
'12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74',
'74,74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,',
',,,,74,74,,74,74,74,74,74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,',
',,74,74,,74,74,74,74,74,74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,,,,91,91,91,91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91,91,91,91',
'91,91,91,,91,,,,,,,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91',
',,,,,,,,,,,,,91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,',
',,,,,,,,,91,410,410,410,410,410,410,410,410,410,410,410,410,410,410',
'410,410,410,410,410,410,410,410,410,410,,,,410,410,410,410,410,410,410',
'410,410,410,,,,,,410,410,410,410,410,410,410,410,410,,,410,,,,,,,,,410',
'410,,410,410,410,410,410,410,410,,,410,410,,,,410,410,410,410,,,,,,',
',,,,,,,410,410,,410,410,410,410,410,410,410,410,410,410,410,,,410,410',
',,,,,,,,,410,,,,,,,,,410,634,634,634,634,634,634,634,634,634,634,634',
'634,634,634,634,634,634,634,634,634,634,634,634,634,,,,634,634,634,634',
'634,634,634,634,634,634,,,,,,634,634,634,634,634,634,634,634,634,,,634',
',,,,,,,,634,634,,634,634,634,634,634,634,634,,,634,634,,,,634,634,634',
'634,,,,,,,,,,,,,,634,634,,634,634,634,634,634,634,634,634,634,634,634',
',,634,634,,,,,,,,,,634,,,,,,,,,634,760,760,760,760,760,760,760,760,760',
'760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,,,,760,760',
'760,760,760,760,760,760,760,760,,,,,,760,760,760,760,760,760,760,760',
'760,,,760,,,,,,,,,760,760,,760,760,760,760,760,760,760,,,760,760,,,',
'760,760,760,760,,,,,,,,,,,,,,760,760,,760,760,760,760,760,760,760,760',
'760,760,760,30,,760,,,,,30,30,30,,,30,30,30,712,30,712,712,712,712,712',
'760,,,30,30,30,,,,712,,,,,30,30,,30,30,30,30,30,,,,,,,,,,712,,,,,,,',
',712,712,712,712,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30',
'30,,,30,,30,30,,,30,30,,30,712,30,,30,,30,30,30,30,30,30,30,,30,30,30',
',,,,,,,,,,,31,30,30,,30,,30,31,31,31,,,31,31,31,714,31,714,714,714,714',
'714,,,,,31,31,,,,714,,,,,31,31,,31,31,31,31,31,,,,,,,,,,714,,,,,,,,',
'714,714,714,714,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31',
',,31,,31,31,,,31,31,,31,714,31,,31,,31,31,31,31,31,31,31,,31,,31,,,',
',,,,,,,,431,31,31,,31,,31,431,431,431,,,431,431,431,716,431,716,716',
'716,716,716,,,,431,431,431,,,,716,,,,,431,431,,431,431,431,431,431,',
',,,,,,,,716,,,,,,,,,,,716,716,,431,431,431,431,431,431,431,431,431,431',
'431,431,431,431,,,431,431,431,,,431,,431,431,,,431,431,,431,716,431',
',431,,431,431,431,431,431,431,431,,431,431,431,,,,,,,,,,,,489,431,431',
',431,,431,489,489,489,,,489,489,489,758,489,758,758,758,758,758,,,,489',
'489,,,,,758,,,,,489,489,,489,489,489,489,489,,,,,,,,,,758,,894,,894',
'894,894,894,894,758,758,758,758,,,,,,894,,,,,,,489,,,,,,,489,,,,,489',
'489,,894,,,,,758,,,,213,213,894,894,213,,,,,,489,489,,213,213,,213,213',
'213,213,213,213,213,,489,213,213,,,489,213,213,213,213,,,894,,,213,',
',,,,,,213,213,,213,213,213,213,213,213,213,213,213,213,213,,,213,,,',
',214,214,,,214,,,,,,,,,214,214,213,214,214,214,214,214,214,214,,,214',
'214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214,214,214',
'214,214,214,214,214,214,,,214,,,,,263,263,,,263,,,,,,,,,263,263,214',
'263,263,263,263,263,263,263,,,263,263,,,,263,263,263,263,,,,,,,,,,,',
',,263,263,,263,263,263,263,263,263,263,263,263,263,263,,,263,,,,,455',
'455,,,455,,,,,,,,,455,455,263,455,455,455,455,455,455,455,,,455,455',
',,,455,455,455,455,,,,,,455,,,,,,,,455,455,,455,455,455,455,455,455',
'455,455,455,455,455,,,455,,,,,456,456,,,456,,,,,,,,,456,456,455,456',
'456,456,456,456,456,456,,,456,456,,,,456,456,456,456,,,,,,456,,,,,,',
',456,456,,456,456,456,456,456,456,456,456,456,456,456,,,456,,,,,524',
'524,,,524,,,,,,,,,524,524,456,524,524,524,524,524,524,524,,,524,524',
',,,524,524,524,524,,,,,,524,,,,,,,,524,524,,524,524,524,524,524,524',
'524,524,524,524,524,,,524,,,,,525,525,,,525,,,,,,,,,525,525,524,525',
'525,525,525,525,525,525,,,525,525,,,,525,525,525,525,,,,,,525,,,,,,',
',525,525,,525,525,525,525,525,525,525,525,525,525,525,,,525,,,,,534',
'534,,,534,,,,,,,,,534,534,525,534,534,534,534,534,534,534,,,534,534',
',,,534,534,534,534,,,,,,534,,,,,,,,534,534,,534,534,534,534,534,534',
'534,534,534,534,534,,,534,,,,,535,535,,,535,,,,,,,,,535,535,534,535',
'535,535,535,535,535,535,,,535,535,,,,535,535,535,535,,,,,,535,,,,,,',
',535,535,,535,535,535,535,535,535,535,535,535,535,535,,,535,,,,,593',
'593,,,593,,,,,,,,,593,593,535,593,593,593,593,593,593,593,,,593,593',
',,,593,593,593,593,,,,,,593,,,,,,,,593,593,,593,593,593,593,593,593',
'593,593,593,593,593,,,593,,,,,594,594,,,594,,,,,,,,,594,594,593,594',
'594,594,594,594,594,594,,,594,594,,,,594,594,594,594,,,,,,594,,,,,,',
',594,594,,594,594,594,594,594,594,594,594,594,594,594,,,594,,,,,748',
'748,,,748,,,,,,,,,748,748,594,748,748,748,748,748,748,748,,,748,748',
',,,748,748,748,748,,,,,,748,,,,,,,,748,748,,748,748,748,748,748,748',
'748,748,748,748,748,,,748,,,,,749,749,,,749,,,,,,,,,749,749,748,749',
'749,749,749,749,749,749,,,749,749,,,,749,749,749,749,,,,,,749,,,,,,',
',749,749,,749,749,749,749,749,749,749,749,749,749,749,,889,749,889,889',
'889,889,889,892,,892,892,892,892,892,,,889,,,,,749,,892,917,,917,917',
'917,917,917,,,,,,,,889,,917,,,,,892,,889,889,889,889,,,,892,892,892',
'892,,,,919,917,919,919,919,919,919,,,,917,917,917,917,,921,919,921,921',
'921,921,921,889,,,,,,,892,,921,,,,,,,919,923,,923,923,923,923,923,917',
',,919,919,,,921,946,923,946,946,946,946,946,,,,921,921,,,,,946,,,,,',
',923,,,,,,919,,,,,923,923,,,946,946,,963,963,,921,963,,946,946,946,946',
',,,963,963,,963,963,963,963,963,963,963,,,963,963,923,,,963,963,963',
'963,,,,,,963,,,946,,,,,963,963,,963,963,963,963,963,963,963,963,963',
'963,963,,996,963,996,996,996,996,996,998,,998,998,998,998,998,,,996',
',,,,963,,998,1000,,1000,1000,1000,1000,1000,,,,,,,,996,,1000,,,,,998',
',996,996,996,996,,,,,,998,998,,,,1002,1000,1002,1002,1002,1002,1002',
',,,,,1000,1000,,,1002,,,,,,996,,,,,,,998,,,,,,,,,1002,1012,1012,,,1012',
',,1000,,,1002,1002,,1012,1012,,1012,1012,1012,1012,1012,1012,1012,,',
'1012,1012,,,,1012,1012,1012,1012,,,,,,1012,,,,,1002,,,1012,1012,,1012',
'1012,1012,1012,1012,1012,1012,1012,1012,1012,1012,,,1012,,,,,1013,1013',
',,1013,,,,,,,,,1013,1013,1012,1013,1013,1013,1013,1013,1013,1013,,,1013',
'1013,,,,1013,1013,1013,1013,,,,,,1013,,,,,,,,1013,1013,,1013,1013,1013',
'1013,1013,1013,1013,1013,1013,1013,1013,,1015,1013,1015,1015,1015,1015',
'1015,1046,,1046,1046,1046,1046,1046,,,1015,,,,,1013,,1046,,,,,,,,,,',
',,,,1015,,,,,,,1046,,,,1015,1015,,,,,,1046,1046,,,,,,,,,,,,,,,,,,,,',
',,,,,1015,,,,,,,1046' ]
        racc_action_check = arr = ::Array.new(26543, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    38,   780,    44,   nil,    53,   nil,   nil,  5009,   596,
   nil, 23739, 23872,   -20,   nil,   -45,    27,   -60,   295,    37,
   522,   nil,   -80,  5149,  1203,   168,   nil,   -24,   nil,     6,
 24649, 24774,  5289,  5429,  5569,   nil,   921,  5709,  5849,   nil,
    96,   346,   348,   189,   259,  5989,  6129,  6269,   136,   -29,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23347,
   nil,  6409,  6549,  6689,   -10,   nil,  6829,  6969,   nil,   nil,
  7109,  7249,   185,   nil, 24005,   nil,   nil,   nil,   nil,   nil,
   -61,   nil,   nil,   nil,   nil,   nil,   nil,   157,   167,   183,
   226, 24138,   nil,   nil,   nil,   nil,   nil,   nil,     0,   nil,
   nil,   132,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  7389,   nil,   nil,   nil,   nil,  7529,
  7669,  7809,  7949,  8089,   252,   nil,   610,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   237,   nil,  1062,
  8229,  8369,  8509, 25075, 25143,   nil,  8649,  8789,  8929,  9069,
  9209,  9349,   nil,   nil,   349,   -81,    91,   326,   106,   293,
   383,   nil,  9489,  1203,   421,  9629,  9769,  9909, 10049, 10189,
 10329, 10469, 10609, 10749, 10889, 11029, 11169, 11309, 11449, 11589,
 11729, 11869, 12009, 12149, 12289, 12429, 12569, 12709, 12849, 12989,
 13129,   nil,   nil, 25211,   nil,   nil,   428, 13269,   nil,   456,
   nil,   nil,   nil, 13409,   nil,   nil, 13549,   nil,  1344,   nil,
   437,   448,   nil, 13689,   491, 13829,   nil, 13969,   nil, 14109,
 14249,   nil,   nil,    66,   nil,  1188, 14389,   452,  1344,   478,
   523,   521, 14529,  1485,   467,   482,   486,   597,   518,   nil,
   571,   555,    41,   nil,   nil,   nil,   601,   268,   566, 14669,
   nil,   395,   631,   522,   nil,   637,   nil, 14809,  1626,   770,
   nil,   621,   nil,   -69,   325,   632,   623,   nil,   352,   650,
   nil,   nil,   577,   834,   -11,   -10, 14949, 15089,   148,   726,
   615,     5,     8,   571,   713,    21,   746,   nil,   nil, 15229,
   nil, 15369,   143,   211,   213,   224,   309,   326,   328,   370,
   432,   nil,   434,   nil,   nil,   nil,   nil,   nil,   294,   nil,
   299,   nil,   387,   nil,   653,   318,   nil,   657,   363,   nil,
   671,   128,   nil,   681,   153,   nil,   382,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1767,
 24271,   nil,   nil,   nil,   nil,   695,   nil,   nil,   690, 15509,
   707,   nil,   nil,   921,   714,   nil,   nil,   714,   729,   400,
   419, 24899,   nil,   nil,   nil,   264,   389,   772,   nil,   nil,
 23477, 23607,   nil,  1485,   nil,   722,   nil,   nil,   780,   nil,
   nil,   nil,   nil,   -33,   nil, 25279, 25347, 15649,   109, 15789,
 15929, 16069,  3177,  3318,   689,   807,   800,   808,   813,   827,
  5149,  5289,  3624,  3459,  3600,  3741,  3882,  4023,  4164,  4305,
  4446,  4587,  4728,   469,   603,  4869,  5009,  1626,   -56, 25024,
   nil,   nil,   nil,   nil,   nil,   nil,   -45,   115,   777,   782,
   nil,   nil, 16209,   nil,   nil, 16349,   nil, 16489,   nil,   125,
   nil,   nil,   nil,   nil, 16629,  1329,   802,   800,   nil,   nil,
   804, 16769,   808, 16909, 25415, 25483,   586,   845,   nil, 17049,
   816,   nil, 17189, 17329, 25551, 25619,  1767, 17469,   940,   939,
   823,   nil,   nil, 17609,   nil,   nil, 17749,   nil,   nil,   nil,
    22, 23311,   nil,   828,   829,   nil,   831,   832,   833,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   820,   480,   nil,
   nil, 17889,   nil,   nil,   nil,   916,   nil,   nil,   nil,   926,
   nil,   nil,   930,  1908,   972,   nil,  2049,    55,    56,   987,
   999,   nil, 18029, 25687, 25755,    28,   nil,   205,   267,   555,
   nil,   654,   nil,    16, 18169,   nil, 23441,   nil, 18309,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   194,   nil,   nil,   197,   nil,   nil,   nil,   882,   nil,   nil,
   886,   nil,   908,   nil, 24404,   nil,   904, 18449, 18589,   420,
   939, 18729, 18869, 19009, 19149,   947,   nil,   nil,   nil, 19289,
 19429,   952,   nil, 19569, 19709,   nil,   179,   182,   514,   646,
   926,  1062,   926,   nil,   nil, 23571,   nil,   nil,  1028,    65,
   123,   nil,   nil,   nil,   nil,   931,   nil,   981, 19849,   nil,
   nil, 19989,  1344,   370, 20129,   941,   nil,   948,     9,   127,
   985,   298,   921,   986,   957, 20269,  1908,  1021,   -16,  1075,
 20409,   nil,   nil,   418,   nil,  2190,  2331,   964,   318,   nil,
   nil,   792, 24613,   nil, 24738,   nil, 24863,   nil, 20549,   nil,
   646,   nil,   969,   231,   973,   nil,   nil,   nil,   nil,   888,
   nil,  1087,   nil,   nil,   nil,   nil,  1093,   nil, 20689,   977,
    34,    35,    93,   152, 20829,   nil,   693,   nil, 25823, 25891,
 20969,   nil,   nil,   nil,   439,   877,  2472,  2613, 24988,   498,
 24537,   -14,   763,  2754,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   975, 21109,  2049, 21249,   nil,   979,   nil,  2190,   nil,
  2331,   nil,   nil,  2472,   nil,  2613,   nil,  2754, 21389, 21529,
 21669, 21809,   207, 21949,   989,   993,   nil,   996,  1015,  1020,
   nil,  1043,  1027,  1026,  1019, 22089,   nil,   nil,  2895,   nil,
   nil,   nil,  3036,  3177,   nil,   nil,   nil,  1045,   268,   nil,
   nil,  1167,   nil,  3318,  1055,  1097,   nil,   nil,   nil,  1077,
  1182,  1067,  1066,   nil,   nil,   nil,  1067,  1071,   nil,  1072,
  1081,   nil,  1082,   nil,   nil,  1086,   707,  1086,   639,   nil,
  1207,   nil, 22229,  1208,  3459,  3600,   nil,    -7,    62,    63,
   359,   957,   nil,  1093,  3741, 22369,   nil,   553,  1230,  1236,
  1123,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1146,
  1134,   nil,  2895, 22509, 22649,  3036,   345,   nil,   nil, 25953,
   nil,   nil, 25960,   nil, 25028,   nil,   nil,  1157,   712, 22789,
   783,  1226,  1275,  3882,  1172,  1279,   nil,  4023,   nil,   nil,
    -1, 22929,   nil,   nil,   nil,   nil,   nil, 25977,   nil, 26014,
   nil, 26029,   nil, 26053,   nil,   nil,   nil,   nil,   257,  3253,
  1161,   nil,    23,   nil,  1282,  1284, 23069,  4164,   nil,   nil,
  1285,   579,   nil,   nil,   nil,   nil, 26068,   nil,  1168,   nil,
   nil,  1169,  1171,  1174,  1186,   nil,  1187,   nil,   522,   nil,
   nil,   nil,   852, 26109,   nil,   nil,  1204,   nil,   nil,   nil,
  4305,   924,   965,   993,  1269,  1062,   nil,  1196,  1197,  1200,
  1202,  1203,  3394,  1204,  3445,  4446,   nil,   nil,   nil,   312,
  4587,   nil,   nil,  4728,  4869,   nil, 26171,   nil, 26178,   nil,
 26195,   nil, 26232,   nil,   nil,   nil,  1189,  1244,  1246,   nil,
  1330, 23209, 26271, 26339,  1065, 26401,   nil,   nil,   nil,   nil,
  3535,  1212,   905,   nil,   nil,   nil,  1333,  1342,  1343,  1224,
  1227,  1228,  1229,   nil,   nil,  1234,    35,    36,   124,  1098,
  1251,  1252,   nil,   nil,   nil,   nil, 26408,   nil,   nil,   nil,
   nil,    39,   nil,  1261,   nil ]

racc_action_default = [
    -1,  -625,  -624,  -625,    -2,  -611,    -4,    -5,  -625,    -8,
    -9,  -625,  -625,  -625,   -29,  -625,  -625,  -625,  -280,  -625,
   -40,   -43,  -613,  -625,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -292,  -331,  -332,   -69,  -624,   -73,   -81,   -83,
  -625,  -514,  -515,  -625,  -625,  -625,  -625,  -625,  -613,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -600,
  -282,  -613,  -624,  -624,  -300,  -403,  -625,  -625,  -305,  -308,
  -611,  -625,  -316,  -323,  -625,  -333,  -334,  -445,  -446,  -447,
  -448,  -449,  -450,  -624,  -453,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -490,  -496,  -498,  -499,  -500,  -501,  -598,  -503,
  -504,  -599,  -506,  -507,  -508,  -509,  -510,  -511,  -512,  -513,
  -518,  -519,  1055,    -3,  -612,  -620,  -621,  -622,    -7,  -625,
  -625,  -625,  -625,  -625,  -625,   -17,  -625,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -624,
  -625,  -625,  -624,  -625,  -625,  -610,  -625,  -625,  -625,  -625,
  -625,  -613,  -614,   -47,  -625,  -514,  -515,  -625,  -280,  -625,
  -625,  -230,  -625,  -624,  -625,  -625,  -625,  -625,  -625,  -625,
  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,
  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,  -625,
  -625,  -409,  -412,  -625,  -608,  -609,   -58,  -625,  -299,  -625,
  -426,  -429,   -64,  -624,  -423,   -65,  -613,   -66,  -239,  -252,
  -624,  -624,  -256,  -625,  -262,  -625,  -624,  -490,  -591,  -625,
  -625,   -67,   -68,  -611,   -13,   -14,  -625,   -71,  -624,  -613,
  -625,   -74,   -77,  -624,   -89,   -90,  -625,  -625,   -97,  -292,
  -295,  -613,  -416,  -331,  -332,  -335,  -424,  -625,   -79,  -625,
   -85,  -289,  -497,  -625,  -215,  -216,  -231,  -625,  -624,  -285,
  -284,  -625,  -240,  -617,  -617,  -625,  -625,  -589,  -617,  -625,
  -301,  -302,  -546,   -49,  -625,  -625,  -625,  -625,  -611,  -625,
  -612,  -514,  -515,  -625,  -625,  -280,  -625,  -356,  -357,  -625,
  -319,  -625,  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,
  -187,  -326,  -625,  -514,  -515,  -586,  -587,  -451,  -625,  -474,
  -625,  -476,  -625,  -478,  -625,  -625,  -458,  -625,  -625,  -464,
  -625,  -625,  -470,  -625,  -625,  -472,  -625,  -489,  -491,  -492,
  -493,  -494,    -6,  -623,   -23,   -24,   -25,   -26,   -27,  -624,
  -625,   -19,   -20,   -21,  -122,  -625,   -30,   -39,  -267,  -625,
  -625,  -266,   -31,  -197,  -613,  -247,  -248,  -624,  -624,  -601,
  -602,  -257,  -421,  -603,  -604,  -602,  -601,  -257,  -420,  -422,
  -603,  -604,   -37,  -205,   -38,  -625,   -41,   -42,  -195,  -262,
   -44,   -45,   -46,  -613,  -298,  -625,  -625,  -624,  -289,  -625,
  -625,  -625,  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,
  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,
  -227,  -228,  -229,  -232,  -233,  -234,  -235,  -613,  -624,  -257,
  -601,  -602,   -54,   -59,  -258,  -417,  -624,  -624,  -613,  -613,
  -294,  -253,  -625,  -261,  -254,  -625,  -259,  -625,  -263,  -625,
  -596,  -594,  -597,   -12,  -612,   -16,  -613,   -70,  -287,   -86,
   -75,  -625,  -613,  -624,  -625,  -625,   -96,  -625,  -497,  -625,
   -82,   -87,  -625,  -625,  -625,  -625,  -236,  -625,  -437,  -625,
  -613,  -615,  -241,  -619,  -618,  -243,  -619,  -290,  -291,  -590,
  -625,  -546,  -406,  -585,  -585,  -529,  -531,  -531,  -531,  -545,
  -547,  -548,  -549,  -550,  -551,  -552,  -553,  -554,  -625,  -556,
  -558,  -560,  -565,  -567,  -568,  -570,  -575,  -577,  -578,  -580,
  -581,  -582,  -625,  -624,  -347,  -348,  -624,  -625,  -625,  -625,
  -625,  -432,  -624,  -625,  -625,  -289,  -313,  -107,  -108,  -625,
  -110,  -625,  -280,  -625,  -625,  -324,  -546,  -328,  -625,  -452,
  -475,  -480,  -481,  -483,  -454,  -477,  -455,  -479,  -456,  -457,
  -625,  -460,  -462,  -625,  -463,  -466,  -467,  -625,  -468,  -469,
  -625,  -495,  -625,   -18,  -625,   -28,  -270,  -625,  -625,  -425,
  -625,  -249,  -251,  -625,  -625,   -60,  -245,  -246,  -418,  -625,
  -625,   -62,  -419,  -625,  -625,  -297,  -601,  -602,  -601,  -602,
  -613,  -195,  -625,  -392,  -393,  -613,  -395,  -410,   -53,  -413,
  -624,  -427,  -430,  -244,  -293,  -624,  -260,  -264,  -625,  -592,
  -593,  -625,   -15,   -72,  -625,   -78,   -84,  -613,  -601,  -602,
  -624,   -93,   -95,  -625,   -80,  -625,  -204,  -214,  -613,  -624,
  -624,  -283,  -286,  -617,  -404,  -624,  -624,  -613,  -625,  -527,
  -528,  -625,  -625,  -538,  -625,  -541,  -625,  -543,  -625,  -358,
  -625,  -360,  -362,  -369,  -613,  -559,  -569,  -579,  -583,  -624,
  -349,  -624,  -306,  -350,  -351,  -309,  -625,  -312,  -625,  -613,
  -601,  -602,  -605,  -288,  -625,  -107,  -108,  -109,  -625,  -625,
  -624,  -317,  -520,  -521,  -625,  -320,  -624,  -624,  -546,  -625,
  -625,  -613,  -625,  -624,  -459,  -461,  -465,  -471,  -473,   -10,
  -123,  -268,  -625,  -198,  -625,  -616,  -624,   -33,  -200,   -34,
  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,  -625,  -625,
  -625,  -625,  -425,  -625,  -585,  -585,  -374,  -624,  -624,  -624,
  -391,  -625,  -613,  -397,  -554,  -562,  -563,  -573,  -624,  -415,
  -414,   -55,  -624,  -624,  -255,  -265,  -595,   -76,   -91,   -88,
  -296,  -624,  -354,  -624,  -438,  -624,  -439,  -440,  -242,  -625,
  -625,  -613,  -585,  -566,  -584,  -530,  -531,  -531,  -557,  -531,
  -531,  -576,  -531,  -554,  -571,  -613,  -625,  -367,  -625,  -555,
  -625,  -352,  -625,  -625,  -624,  -624,  -311,  -625,  -425,  -625,
  -107,  -108,  -111,  -613,  -624,  -625,  -523,  -625,  -625,  -625,
  -613,  -525,  -329,  -588,  -482,  -485,  -486,  -487,  -488,  -625,
  -269,   -32,  -199,  -250,  -625,  -237,  -625,  -372,  -373,  -382,
  -376,  -384,  -625,  -387,  -625,  -389,  -394,  -625,  -625,  -625,
  -561,  -625,  -625,  -624,  -625,  -625,   -11,  -624,  -444,  -355,
  -625,  -625,  -442,  -407,  -408,  -405,  -526,  -625,  -534,  -625,
  -536,  -625,  -539,  -625,  -542,  -544,  -359,  -361,  -365,  -625,
  -370,  -303,  -625,  -304,  -625,  -625,  -625,  -624,  -314,  -425,
  -625,  -625,  -321,  -325,  -327,  -524,  -546,  -484,  -585,  -564,
  -375,  -624,  -624,  -624,  -624,  -574,  -624,  -396,  -613,  -399,
  -401,  -402,  -572,  -625,  -289,  -411,  -625,  -428,  -431,  -443,
  -624,   -98,   -99,  -625,  -625,  -106,  -441,  -531,  -531,  -531,
  -531,  -363,  -625,  -368,  -625,  -624,  -307,  -310,  -264,  -624,
  -624,  -318,  -522,  -624,  -624,  -371,  -625,  -379,  -625,  -381,
  -625,  -385,  -625,  -388,  -390,  -398,  -625,  -288,  -605,   -56,
  -437,  -624,  -625,  -625,  -105,  -625,  -532,  -535,  -537,  -540,
  -625,  -366,  -624,  -433,  -434,  -435,  -625,  -625,  -625,  -624,
  -624,  -624,  -624,  -400,  -436,  -613,  -601,  -602,  -605,  -104,
  -531,  -364,  -353,  -315,  -322,  -330,  -625,  -377,  -380,  -383,
  -386,  -425,  -533,  -624,  -378 ]

clist = [
'6,220,213,371,301,431,437,262,424,125,208,16,590,130,130,340,274,16',
'421,699,398,504,280,280,280,444,117,327,539,447,530,263,552,223,133',
'133,850,329,639,583,586,679,343,343,4,16,343,344,345,493,676,348,333',
'676,113,489,757,322,297,798,332,337,135,135,378,279,279,279,114,498',
'318,9,266,272,275,747,130,9,732,735,959,379,679,381,383,386,389,392',
'395,381,821,117,838,130,724,343,343,343,343,299,404,405,406,407,930',
'927,667,841,118,961,709,710,542,545,671,672,1,549,955,349,2,124,853',
'16,380,906,559,281,281,281,396,801,16,207,358,277,291,292,620,330,603',
'623,605,417,410,315,315,670,903,634,335,615,669,617,799,375,621,334',
'338,621,336,341,356,751,372,328,567,615,504,540,346,854,347,831,855',
'744,990,359,679,315,864,604,867,9,993,983,361,756,1033,676,676,606,408',
'760,450,451,452,453,946,432,420,837,800,839,802,958,550,420,704,455',
'425,342,488,808,402,496,441,961,16,812,416,422,955,497,862,813,442,446',
'17,1023,738,825,685,910,17,377,382,385,1021,388,694,707,16,927,391,279',
'845,431,437,224,394,874,736,660,762,495,763,280,224,224,224,397,17,306',
'306,865,280,509,897,838,836,425,833,949,792,608,1041,,503,503,,,,951',
'379,,531,224,811,,527,524,224,224,,,224,353,,454,279,818,274,838,,16',
'279,16,534,279,841,,16,,117,,690,,,687,297,,343,343,,297,690,587,588',
'1042,528,,,,520,559,,16,593,,17,,513,,,224,224,224,224,17,938,887,888',
'858,500,,514,,,,,516,281,719,,515,522,,,117,494,281,,,,567,607,517,952',
'499,1024,953,838,,,690,,,739,916,559,765,,,765,817,994,589,,,,,,640',
',,977,6,633,,315,,130,,,814,,647,16,679,,,,652,,503,503,315,781,646',
'567,676,,133,786,17,224,224,224,,,432,224,224,224,224,224,224,870,,',
'632,,,,425,868,869,441,17,,135,,,,447,662,315,,315,,,,,645,647,,939',
'9,,651,,828,,,1029,663,646,531,804,279,1034,,224,663,663,531,,,224,',
',224,,,995,,,826,,432,,,698,,719,814,,847,,432,425,17,16,17,,,441,306',
'17,,655,668,,,,567,441,567,,,690,559,,,306,863,,,,,,937,,17,,279,,,',
',,,,940,,,,,,,,224,224,,,673,674,,432,755,,567,682,761,601,,601,,,425',
',16,,683,16,441,675,,,686,,,,,970,,,733,733,,,,,,,,,702,,810,,,,752',
'279,,985,,315,,,770,,,17,130,315,703,640,29,719,,719,803,,29,,,1051',
'809,531,1025,777,779,,,133,,782,784,29,819,446,,,640,,663,,29,29,29',
'503,29,805,647,,,652,,,,224,,135,803,,646,872,420,,,1027,1028,,,822',
'827,29,,,,,29,29,,,29,,,300,,804,16,16,804,,640,,343,,,981,719,859,',
'822,857,822,559,,,,,432,776,,,,17,567,,,,,,306,425,224,441,,29,,,306',
',29,29,29,29,29,130,224,,16,16,,,,567,,16,,503,866,820,719,,719,871',
'803,,279,881,,,,,,,,315,,,890,890,890,,,,,849,315,690,,,1035,,17,,,17',
',,719,,16,224,908,804,16,16,912,,,,,343,,224,,16,932,224,,,,,873,,343',
'640,,,,941,29,29,29,29,,,,29,29,29,29,29,29,,,,16,16,,,,,224,224,29',
',16,,224,224,,,224,733,,,,415,713,715,717,942,,,,18,,,,805,,18,805,',
',805,,805,29,,,300,915,306,29,16,315,29,,16,,,,,306,,926,,,18,308,308',
',,17,17,,29,,29,1005,,,,29,,,,,16,,945,890,890,890,890,,890,,,,1012',
',,355,992,19,,441,29,,,19,224,,,300,,,224,,300,16,,,17,17,29,29,,822',
',17,,,,,16,,,19,432,16,224,,16,16,18,795,805,315,805,425,805,,805,18',
'640,441,,,797,315,822,,,,,,,890,890,890,890,900,357,,17,,,,17,17,,,796',
',279,,,29,832,17,,890,,,,,805,,,,,,,,,,,840,,842,,,,,,19,,,224,,17,17',
',,19,834,,,834,,17,224,,,,29,339,,,18,,,,,,,,,,,,,,,,,,,,,,,,18,,962',
',,,17,,,,17,,,,973,,,,,,,,,,,,,,,29,,,,,,,,,29,,17,,918,920,,922,924',
'19,925,,,,29,,,445,,,,,,,,18,,18,,,,308,18,19,,17,,,,,,,,,,,,,308,,17',
',,,,17,,18,17,17,29,,,29,,948,,,795,29,,795,,795,,,224,,,,,29,418,,954',
'29,956,,602,449,602,,,,,,19,729,19,,731,,834,19,,796,,,796,978,796,979',
',980,,891,893,895,,,29,29,,,,,29,29,19,,29,,,,,,,,18,,,,,,,1016,1017',
'1018,1019,,,,,,,506,,508,,510,,511,512,41,,,,,,41,,,,,,795,,795,,795',
',795,29,29,,,,,1030,,1031,,1032,,,,,41,304,304,,,,,,,,1040,1052,19,',
',796,,796,,796,,796,829,830,29,,,,795,,29,,,,,351,29,29,373,,,1053,',
'29,,,18,,,,,,,308,29,,,,,,,308,,,,796,,,,,,,997,999,1001,1003,,1004',
'41,,879,,,,,,,41,29,,,,29,29,636,,,,,,,,,29,,,,,,,,,,,,18,,19,18,,,',
',,,902,,42,,904,905,,29,42,29,29,,,,,909,,,,29,29,,,,,1047,1048,1049',
'1050,,,,,,,,42,305,305,,,,,,,,934,935,41,1054,,,677,,,339,,680,29,,',
'19,29,,19,,,,,,,352,41,,374,,,,,,,,,,,,,,,,,308,29,677,,966,339,,,969',
',,308,,,,,,,,,,18,18,42,,,,,,,725,,42,,29,,,,989,,445,,,,41,,41,,,29',
'304,41,,,29,,,29,29,,,,,,,,,304,,,,1010,18,18,,29,41,,878,18,,,,,,,1022',
',,,,1026,19,19,,,771,,,,677,339,,,,,,373,,373,,,,,,,,,42,,,602,,,18',
',,,18,18,,,,,,,,815,,18,816,,42,19,19,,,,,,19,,,,,,,41,,824,,,,,,,,',
',,18,18,,,,,,844,,,18,,,,,,,,,,,,,,,19,,449,,19,19,,,,,42,,42,,,19,305',
'42,,,602,,,,18,,,,18,,,,975,305,,,880,,,,,,42,,,,19,19,,,,,,,,,19,,18',
',,,,,,,,41,,,,,,374,304,374,,,,,,,304,,,,,,,,,18,,,,19,,,,19,,,,976',
',,18,,,,,18,,,18,18,,,,,,,,42,,,,,,19,,,,,,,41,,,41,,,,,,,,339,,,,,',
',,,,,,,,,19,,,,,,,,,,,,,,,19,,,,,19,,,19,19,,,,,,,,,,,,,,988,,,,,,,',
',,,,,,,,,,,,,,,,,,,,42,,,,,,,305,,304,,,,,,305,,,,,304,,,,,,,,,,41,41',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,42,,,,,,,,,41,41,,,,,,41,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,373,,,41,,,,41,41,,,,,,,,,,41',
',,,,,,,,,,,,,,,,,,,,,305,,,,,,,,,41,41,305,,,,,,,,41,,42,42,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,373,,,,41,,,,41,,,,971,,,,,,42,42,,,,,,42,,,',
',,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,374,,,42,41,,,42,42,,,,231,',
',,,,42,41,,278,278,278,41,,,41,41,,,,,,324,325,326,,,,,,,,,,,,,42,42',
'278,278,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,374,,,,42,,,,42,',
',,972,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42',
',,,,,,,,,,,,,,42,,,,,42,,,42,42,,,,,,,,,,278,423,278,,,,443,448,,,,',
',,,,,,,,,,231,,,462,463,464,465,466,467,468,469,470,471,472,473,474',
'475,476,477,478,479,480,481,482,483,484,485,486,487,,,,,,,278,,,,,,278',
',,278,,,,,,,278,,278,,278,,278,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,536,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,278,,443,661,423,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,278',
',278,,,,,,,,,,,,,,,,278,,,,,,,,,696,697,,,,,,,,,,278,,,278,,,,,,,,,',
',,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,278,773,,,278,278,778,780,,,,,783,785,,,661,787,',
',,,,,,,,,,,,,,,,,,,,,,278,,,278,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,',
',,,278,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,278',
',882,,,,,,,,,,,,,,778,780,785,783,,885,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,882',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278' ]
        racc_goto_table = arr = ::Array.new(3289, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,34,27,60,53,40,40,153,25,17,17,23,95,61,61,89,74,23,30,13,60,76,71',
'71,71,30,98,34,10,20,55,39,152,22,64,64,93,32,26,92,92,198,32,32,2,23',
'32,19,19,42,77,19,71,77,5,40,99,67,49,142,6,6,65,65,169,36,36,36,8,25',
'54,9,41,41,41,58,61,9,94,94,147,6,198,6,6,6,6,6,6,6,14,98,188,61,132',
'32,32,32,32,50,19,19,19,19,133,130,43,193,7,148,137,137,72,72,43,43',
'1,72,194,5,3,11,14,23,170,15,183,73,73,73,170,145,23,18,21,48,48,48',
'173,51,59,173,59,31,33,68,68,45,46,66,70,174,75,174,143,87,174,73,73',
'174,88,91,96,97,100,101,187,174,76,102,103,104,105,145,106,107,108,109',
'198,68,110,111,112,9,113,133,114,115,147,77,77,116,9,117,32,32,32,32',
'118,74,71,143,134,143,140,146,149,71,150,27,6,151,154,155,7,158,61,148',
'23,159,22,22,194,160,58,161,22,22,24,162,163,164,55,165,24,168,171,172',
'133,175,55,152,23,130,176,36,132,40,40,24,177,178,95,25,179,74,180,71',
'24,24,24,181,24,24,24,182,71,169,145,188,186,6,190,191,26,197,133,,6',
'6,,,,142,6,,53,24,43,,34,27,24,24,,,24,24,,51,36,26,74,188,,23,36,23',
'27,36,193,,23,,98,,40,,,25,49,,32,32,,49,40,19,19,93,67,,,,54,183,,23',
'27,,24,,5,,,24,24,24,24,24,94,137,137,26,51,,8,,,,,50,73,131,,9,50,',
',98,48,73,,,,187,39,51,143,48,14,143,188,,,40,,,25,137,183,174,,,174',
'55,99,5,,,,,,34,,,143,6,17,,68,,61,,,76,,74,23,198,,,,74,,6,6,68,42',
'6,187,77,,64,42,24,24,24,24,,,74,24,24,24,24,24,24,152,,,2,,,,6,10,10',
'61,24,,65,,,,20,34,68,,68,,,,,41,74,,26,9,,41,,72,,,143,6,6,53,187,36',
'13,,24,6,6,53,,,24,,,24,,,137,,,30,,74,,,32,,131,76,,131,,74,6,24,23',
'24,,,61,24,24,,51,41,,,,187,61,187,,,40,183,,,24,25,,,,,,92,,24,,36',
',,,,,,,10,,,,,,,,24,24,,,51,51,,74,32,,187,9,32,24,,24,,,6,,23,,51,23',
'61,73,,,51,,,,,92,,,98,98,,,,,,,,,51,,89,,,,98,36,,92,,68,,,17,,,24',
'61,68,73,34,44,131,,131,34,,44,,,26,153,53,95,22,22,,,64,,22,22,44,53',
'22,,,34,,6,,44,44,44,6,44,189,74,,,74,,,,24,,65,34,,6,60,71,,,10,10',
',,6,6,44,,,,,44,44,,,44,,,12,,187,23,23,187,,34,,32,,,131,131,19,,6',
'71,6,183,,,,,74,73,,,,24,187,,,,,,24,6,24,61,,44,,,24,,44,44,44,44,44',
'61,24,,23,23,,,,187,,23,,6,98,51,131,,131,98,34,,36,22,,,,,,,,68,,,6',
'6,6,,,,,51,68,40,,,25,,24,,,24,,,131,,23,24,6,187,23,23,6,,,,,32,,24',
',23,19,24,,,,,51,,32,34,,,,19,44,44,44,44,,,,44,44,44,44,44,44,,,,23',
'23,,,,,24,24,44,,23,,24,24,,,24,98,,,,12,185,185,185,98,,,,28,,,,189',
',28,189,,,189,,189,44,,,12,51,24,44,23,68,44,,23,,,,,24,,51,,,28,28',
'28,,,24,24,,44,,44,34,,,,44,,,,,23,,51,6,6,6,6,,6,,,,27,,,28,98,29,',
'61,44,,,29,24,,,12,,,24,,12,23,,,24,24,44,44,,6,,24,,,,,23,,,29,74,23',
'24,,23,23,28,136,189,68,189,6,189,,189,28,34,61,,,141,68,6,,,,,,,6,6',
'6,6,24,29,,24,,,,24,24,,,138,,36,,,44,136,24,,6,,,,,189,,,,,,,,,,,141',
',141,,,,,,29,,,24,,24,24,,,29,138,,,138,,24,24,,,,44,69,,,28,,,,,,,',
',,,,,,,,,,,,,,,,28,,24,,,,24,,,,24,,,,24,,,,,,,,,,,,,,,44,,,,,,,,,44',
',24,,185,185,,185,185,29,185,,,,44,,,29,,,,,,,,28,,28,,,,28,28,29,,24',
',,,,,,,,,,,,28,,24,,,,,24,,28,24,24,44,,,44,,136,,,136,44,,136,,136',
',,24,,,,,44,69,,141,44,141,,28,69,28,,,,,,29,12,29,,12,,138,29,,138',
',,138,141,138,141,,141,,139,139,139,,,44,44,,,,,44,44,29,,44,,,,,,,',
'28,,,,,,,185,185,185,185,,,,,,,69,,69,,69,,69,69,56,,,,,,56,,,,,,136',
',136,,136,,136,44,44,,,,,141,,141,,141,,,,,56,56,56,,,,,,,,141,185,29',
',,138,,138,,138,,138,12,12,44,,,,136,,44,,,,,56,44,44,56,,,141,,44,',
',28,,,,,,,28,44,,,,,,,28,,,,138,,,,,,,139,139,139,139,,139,56,,12,,',
',,,,56,44,,,,44,44,69,,,,,,,,,44,,,,,,,,,,,,28,,29,28,,,,,,,12,,57,',
'12,12,,44,57,44,44,,,,,12,,,,44,44,,,,,139,139,139,139,,,,,,,,57,57',
'57,,,,,,,,12,12,56,139,,,69,,,69,,69,44,,,29,44,,29,,,,,,,57,56,,57',
',,,,,,,,,,,,,,,,28,44,69,,12,69,,,12,,,28,,,,,,,,,,28,28,57,,,,,,,69',
',57,,44,,,,12,,29,,,,56,,56,,,44,56,56,,,44,,,44,44,,,,,,,,,56,,,,12',
'28,28,,44,56,,28,28,,,,,,,12,,,,,12,29,29,,,69,,,,69,69,,,,,,56,,56',
',,,,,,,,57,,,28,,,28,,,,28,28,,,,,,,,69,,28,69,,57,29,29,,,,,,29,,,',
',,,56,,69,,,,,,,,,,,28,28,,,,,,69,,,28,,,,,,,,,,,,,,,29,,69,,29,29,',
',,,57,,57,,,29,57,57,,,28,,,,28,,,,28,,,,28,57,,,69,,,,,,57,,,,29,29',
',,,,,,,,29,,28,,,,,,,,,56,,,,,,57,56,57,,,,,,,56,,,,,,,,,28,,,,29,,',
',29,,,,29,,,28,,,,,28,,,28,28,,,,,,,,57,,,,,,29,,,,,,,56,,,56,,,,,,',
',69,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,29,,,,,29,,,29,29,,,,,,,,,,,,,,69',
',,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,,,,57,,56,,,,,,57,,,,,56,,,,,,,,,,56',
'56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,57,,,,,,,,,56,56,,,,,,56',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,56,,,,56,56,,,,,,,,,,56',
',,,,,,,,,,,,,,,,,,,,,57,,,,,,,,,56,56,57,,,,,,,,56,,57,57,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,56,,,,56,,,,56,,,,56,,,,,,57,57,,,,,,57,,,,,,,',
',,,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,57,56,,,57,57,,,,35,,,,,,57',
'56,,35,35,35,56,,,56,56,,,,,,35,35,35,,,,,,,,,,,,,57,57,35,35,,,,,,',
'57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,57,,,,57,,,,57,,,,,,,,,,',
',,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,57',
',,,,57,,,57,57,,,,,,,,,,35,35,35,,,,35,35,,,,,,,,,,,,,,,35,,,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
',,,,,,35,,,,,,35,,,35,,,,,,,35,,35,,35,,35,35,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35',
',,35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35,35,,,,,,,,,,35,,,35,,,,,,,,,,',
',,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,35,35,,,35,35,35,35,,,,,35,35,,,35,35,,,,,,,,,,,,,,',
',,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,,,,,,,,,,',
',,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,35',
'35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3289, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   116,    42,   120,   nil,    49,    -2,   100,    63,    69,
  -300,   111,   675,  -519,  -609,  -696,   nil,    -2,   121,   -19,
  -188,    63,    10,     9,   226,  -204,  -386,   -15,   890,   961,
  -192,   -67,   -24,    19,   -21,  2277,    33,   nil,   nil,     4,
  -208,    43,  -217,  -382,   638,  -345,  -663,   nil,   103,    22,
    63,    78,   nil,   -33,    32,  -289,  1322,  1483,  -524,  -219,
   -71,     2,   nil,   nil,    23,    51,  -265,    13,   108,  1033,
    88,   -10,  -221,    95,   -14,  -337,  -260,  -452,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,    97,   -49,
   nil,    96,  -305,  -693,  -509,  -337,    91,  -440,    21,  -550,
    90,   105,  -160,   102,  -561,   103,  -561,  -421,  -762,   105,
  -571,  -179,  -573,  -758,   113,  -418,  -180,  -414,  -674,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -741,  -205,  -474,  -744,  -463,   nil,   340,  -443,   377,   479,
  -461,   353,  -606,  -511,   nil,  -534,  -693,  -818,  -789,  -136,
  -342,   146,  -310,   -18,   -49,  -454,   nil,   nil,   -55,  -452,
   -48,  -447,  -760,  -361,  -469,  -592,   nil,   nil,   155,   -19,
    39,   150,   150,  -247,  -229,   151,   155,   160,  -511,  -358,
  -357,   170,  -488,  -216,   nil,   329,  -442,  -176,  -620,    10,
  -436,  -613,   nil,  -607,  -774,   nil,   nil,  -101,  -464 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   294,     7,   350,   295,
   nil,   nil,   538,   nil,   851,   nil,   293,   nil,   nil,   nil,
    14,    15,    21,   230,   323,   nil,   nil,   749,   228,   229,
   nil,   nil,    20,   nil,   331,    24,    25,    26,    27,   nil,
   693,   nil,   nil,   nil,   312,   nil,   nil,    28,   426,    35,
   nil,   nil,    37,    40,    39,   nil,   225,   226,   600,   nil,
   132,   434,   131,   134,    78,    79,   nil,    93,    49,   284,
   nil,   427,   nil,   428,   439,   648,   501,   282,   267,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   268,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   584,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   721,   566,   nil,   722,   950,   794,   554,   nil,   555,   nil,
   nil,   556,   nil,   558,   664,   nil,   nil,   nil,   564,   nil,
   nil,   nil,   759,   nil,   nil,   nil,   438,   269,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,
   nil,   nil,   nil,   nil,   610,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   835,   553,   nil,   557,   843,   569,   571,
   572,   806,   575,   576,   807,   579,   582,   nil,   288 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  5, 152, :_reduce_10,
  4, 155, :_reduce_11,
  2, 157, :_reduce_12,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_15,
  2, 161, :_reduce_16,
  0, 178, :_reduce_17,
  4, 154, :_reduce_18,
  3, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  2, 154, :_reduce_22,
  3, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  4, 154, :_reduce_28,
  1, 154, :_reduce_none,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  6, 154, :_reduce_32,
  5, 154, :_reduce_33,
  5, 154, :_reduce_34,
  5, 154, :_reduce_35,
  5, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 154, :_reduce_none,
  3, 165, :_reduce_41,
  3, 165, :_reduce_42,
  1, 177, :_reduce_none,
  3, 177, :_reduce_44,
  3, 177, :_reduce_45,
  3, 177, :_reduce_46,
  2, 177, :_reduce_47,
  1, 177, :_reduce_none,
  1, 164, :_reduce_49,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 182, :_reduce_none,
  4, 182, :_reduce_53,
  0, 190, :_reduce_54,
  0, 191, :_reduce_55,
  6, 187, :_reduce_56,
  1, 189, :_reduce_57,
  2, 181, :_reduce_58,
  3, 181, :_reduce_59,
  4, 181, :_reduce_60,
  5, 181, :_reduce_61,
  4, 181, :_reduce_62,
  5, 181, :_reduce_63,
  2, 181, :_reduce_64,
  2, 181, :_reduce_65,
  2, 181, :_reduce_66,
  2, 181, :_reduce_67,
  2, 181, :_reduce_68,
  1, 166, :_reduce_none,
  3, 166, :_reduce_70,
  1, 195, :_reduce_none,
  3, 195, :_reduce_72,
  1, 194, :_reduce_73,
  2, 194, :_reduce_74,
  3, 194, :_reduce_75,
  5, 194, :_reduce_76,
  2, 194, :_reduce_77,
  4, 194, :_reduce_78,
  2, 194, :_reduce_79,
  4, 194, :_reduce_80,
  1, 194, :_reduce_81,
  3, 194, :_reduce_82,
  1, 198, :_reduce_none,
  3, 198, :_reduce_84,
  2, 197, :_reduce_85,
  3, 197, :_reduce_86,
  1, 200, :_reduce_87,
  3, 200, :_reduce_88,
  1, 199, :_reduce_89,
  1, 199, :_reduce_90,
  4, 199, :_reduce_91,
  3, 199, :_reduce_92,
  3, 199, :_reduce_93,
  3, 199, :_reduce_94,
  3, 199, :_reduce_95,
  2, 199, :_reduce_96,
  1, 199, :_reduce_97,
  1, 174, :_reduce_98,
  1, 174, :_reduce_99,
  4, 174, :_reduce_100,
  3, 174, :_reduce_101,
  3, 174, :_reduce_102,
  3, 174, :_reduce_103,
  3, 174, :_reduce_104,
  2, 174, :_reduce_105,
  1, 174, :_reduce_106,
  1, 203, :_reduce_107,
  1, 203, :_reduce_none,
  2, 204, :_reduce_109,
  1, 204, :_reduce_110,
  3, 204, :_reduce_111,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_115,
  1, 205, :_reduce_116,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 162, :_reduce_119,
  1, 162, :_reduce_none,
  1, 163, :_reduce_121,
  0, 211, :_reduce_122,
  4, 163, :_reduce_123,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  3, 180, :_reduce_195,
  5, 180, :_reduce_196,
  3, 180, :_reduce_197,
  5, 180, :_reduce_198,
  6, 180, :_reduce_199,
  5, 180, :_reduce_200,
  5, 180, :_reduce_201,
  5, 180, :_reduce_202,
  5, 180, :_reduce_203,
  4, 180, :_reduce_204,
  3, 180, :_reduce_205,
  3, 180, :_reduce_206,
  3, 180, :_reduce_207,
  3, 180, :_reduce_208,
  3, 180, :_reduce_209,
  3, 180, :_reduce_210,
  3, 180, :_reduce_211,
  3, 180, :_reduce_212,
  3, 180, :_reduce_213,
  4, 180, :_reduce_214,
  2, 180, :_reduce_215,
  2, 180, :_reduce_216,
  3, 180, :_reduce_217,
  3, 180, :_reduce_218,
  3, 180, :_reduce_219,
  3, 180, :_reduce_220,
  3, 180, :_reduce_221,
  3, 180, :_reduce_222,
  3, 180, :_reduce_223,
  3, 180, :_reduce_224,
  3, 180, :_reduce_225,
  3, 180, :_reduce_226,
  3, 180, :_reduce_227,
  3, 180, :_reduce_228,
  3, 180, :_reduce_229,
  2, 180, :_reduce_230,
  2, 180, :_reduce_231,
  3, 180, :_reduce_232,
  3, 180, :_reduce_233,
  3, 180, :_reduce_234,
  3, 180, :_reduce_235,
  3, 180, :_reduce_236,
  6, 180, :_reduce_237,
  1, 180, :_reduce_none,
  1, 214, :_reduce_239,
  1, 215, :_reduce_none,
  2, 215, :_reduce_241,
  4, 215, :_reduce_242,
  2, 215, :_reduce_243,
  3, 219, :_reduce_244,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 170, :_reduce_247,
  1, 170, :_reduce_248,
  2, 170, :_reduce_249,
  4, 170, :_reduce_250,
  2, 170, :_reduce_251,
  1, 193, :_reduce_252,
  2, 193, :_reduce_253,
  2, 193, :_reduce_254,
  4, 193, :_reduce_255,
  1, 193, :_reduce_256,
  0, 223, :_reduce_257,
  2, 186, :_reduce_258,
  2, 222, :_reduce_259,
  2, 221, :_reduce_260,
  1, 221, :_reduce_none,
  1, 216, :_reduce_262,
  2, 216, :_reduce_263,
  3, 216, :_reduce_264,
  4, 216, :_reduce_265,
  1, 176, :_reduce_266,
  1, 176, :_reduce_267,
  3, 175, :_reduce_268,
  4, 175, :_reduce_269,
  2, 175, :_reduce_270,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_281,
  0, 246, :_reduce_282,
  4, 213, :_reduce_283,
  2, 213, :_reduce_284,
  0, 247, :_reduce_285,
  4, 213, :_reduce_286,
  3, 213, :_reduce_287,
  3, 213, :_reduce_288,
  2, 213, :_reduce_289,
  3, 213, :_reduce_290,
  3, 213, :_reduce_291,
  1, 213, :_reduce_292,
  4, 213, :_reduce_293,
  3, 213, :_reduce_294,
  1, 213, :_reduce_295,
  5, 213, :_reduce_296,
  4, 213, :_reduce_297,
  3, 213, :_reduce_298,
  2, 213, :_reduce_299,
  1, 213, :_reduce_none,
  2, 213, :_reduce_301,
  2, 213, :_reduce_302,
  6, 213, :_reduce_303,
  6, 213, :_reduce_304,
  0, 248, :_reduce_305,
  0, 249, :_reduce_306,
  7, 213, :_reduce_307,
  0, 250, :_reduce_308,
  0, 251, :_reduce_309,
  7, 213, :_reduce_310,
  5, 213, :_reduce_311,
  4, 213, :_reduce_312,
  0, 252, :_reduce_313,
  0, 253, :_reduce_314,
  9, 213, :_reduce_315,
  0, 254, :_reduce_316,
  0, 255, :_reduce_317,
  7, 213, :_reduce_318,
  0, 256, :_reduce_319,
  0, 257, :_reduce_320,
  0, 258, :_reduce_321,
  9, 213, :_reduce_322,
  0, 259, :_reduce_323,
  0, 260, :_reduce_324,
  6, 213, :_reduce_325,
  0, 261, :_reduce_326,
  6, 213, :_reduce_327,
  0, 262, :_reduce_328,
  0, 263, :_reduce_329,
  9, 213, :_reduce_330,
  1, 213, :_reduce_331,
  1, 213, :_reduce_332,
  1, 213, :_reduce_333,
  1, 213, :_reduce_334,
  1, 169, :_reduce_335,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  2, 237, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 238, :_reduce_none,
  5, 238, :_reduce_353,
  1, 159, :_reduce_none,
  2, 159, :_reduce_355,
  1, 241, :_reduce_none,
  1, 241, :_reduce_357,
  1, 275, :_reduce_none,
  3, 275, :_reduce_359,
  1, 278, :_reduce_360,
  3, 278, :_reduce_361,
  1, 277, :_reduce_362,
  4, 277, :_reduce_363,
  6, 277, :_reduce_364,
  3, 277, :_reduce_365,
  5, 277, :_reduce_366,
  2, 277, :_reduce_367,
  4, 277, :_reduce_368,
  1, 277, :_reduce_369,
  3, 277, :_reduce_370,
  4, 279, :_reduce_371,
  2, 279, :_reduce_372,
  2, 279, :_reduce_373,
  1, 279, :_reduce_374,
  2, 284, :_reduce_375,
  1, 284, :_reduce_none,
  6, 285, :_reduce_377,
  8, 285, :_reduce_378,
  4, 285, :_reduce_379,
  6, 285, :_reduce_380,
  4, 285, :_reduce_381,
  2, 285, :_reduce_382,
  6, 285, :_reduce_383,
  2, 285, :_reduce_384,
  4, 285, :_reduce_385,
  6, 285, :_reduce_386,
  2, 285, :_reduce_387,
  4, 285, :_reduce_388,
  2, 285, :_reduce_389,
  4, 285, :_reduce_390,
  1, 285, :_reduce_391,
  1, 188, :_reduce_392,
  1, 188, :_reduce_none,
  3, 289, :_reduce_394,
  1, 289, :_reduce_395,
  4, 289, :_reduce_396,
  1, 290, :_reduce_none,
  4, 290, :_reduce_398,
  1, 291, :_reduce_399,
  3, 291, :_reduce_400,
  1, 292, :_reduce_401,
  1, 292, :_reduce_none,
  0, 296, :_reduce_403,
  3, 236, :_reduce_404,
  4, 294, :_reduce_405,
  1, 294, :_reduce_406,
  3, 295, :_reduce_407,
  3, 295, :_reduce_408,
  0, 299, :_reduce_409,
  0, 300, :_reduce_410,
  6, 298, :_reduce_411,
  2, 183, :_reduce_412,
  4, 183, :_reduce_413,
  5, 183, :_reduce_414,
  5, 183, :_reduce_415,
  0, 302, :_reduce_416,
  3, 235, :_reduce_417,
  4, 235, :_reduce_418,
  4, 235, :_reduce_419,
  3, 235, :_reduce_420,
  3, 235, :_reduce_421,
  3, 235, :_reduce_422,
  2, 235, :_reduce_423,
  1, 235, :_reduce_424,
  4, 235, :_reduce_425,
  0, 303, :_reduce_426,
  0, 304, :_reduce_427,
  6, 234, :_reduce_428,
  0, 305, :_reduce_429,
  0, 306, :_reduce_430,
  6, 234, :_reduce_431,
  0, 308, :_reduce_432,
  6, 240, :_reduce_433,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  6, 158, :_reduce_436,
  0, 158, :_reduce_437,
  1, 309, :_reduce_438,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  2, 310, :_reduce_441,
  1, 310, :_reduce_none,
  2, 160, :_reduce_443,
  1, 160, :_reduce_none,
  1, 224, :_reduce_445,
  1, 224, :_reduce_446,
  1, 224, :_reduce_none,
  1, 225, :_reduce_448,
  1, 312, :_reduce_449,
  1, 312, :_reduce_none,
  2, 312, :_reduce_451,
  3, 313, :_reduce_452,
  1, 313, :_reduce_453,
  3, 226, :_reduce_454,
  3, 227, :_reduce_455,
  3, 228, :_reduce_456,
  3, 228, :_reduce_457,
  1, 317, :_reduce_458,
  3, 317, :_reduce_459,
  1, 318, :_reduce_none,
  2, 318, :_reduce_461,
  3, 230, :_reduce_462,
  3, 230, :_reduce_463,
  1, 320, :_reduce_464,
  3, 320, :_reduce_465,
  3, 229, :_reduce_466,
  3, 229, :_reduce_467,
  3, 231, :_reduce_468,
  3, 231, :_reduce_469,
  1, 321, :_reduce_470,
  3, 321, :_reduce_471,
  1, 322, :_reduce_472,
  3, 322, :_reduce_473,
  1, 314, :_reduce_474,
  2, 314, :_reduce_475,
  1, 315, :_reduce_476,
  2, 315, :_reduce_477,
  1, 316, :_reduce_478,
  2, 316, :_reduce_479,
  1, 319, :_reduce_480,
  0, 324, :_reduce_481,
  3, 319, :_reduce_482,
  0, 325, :_reduce_483,
  4, 319, :_reduce_484,
  1, 323, :_reduce_485,
  1, 323, :_reduce_486,
  1, 323, :_reduce_487,
  1, 323, :_reduce_none,
  2, 209, :_reduce_489,
  1, 209, :_reduce_490,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  3, 210, :_reduce_495,
  1, 311, :_reduce_none,
  2, 311, :_reduce_497,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 202, :_reduce_507,
  1, 202, :_reduce_508,
  1, 202, :_reduce_509,
  1, 202, :_reduce_510,
  1, 202, :_reduce_511,
  1, 202, :_reduce_512,
  1, 202, :_reduce_513,
  1, 232, :_reduce_514,
  1, 232, :_reduce_515,
  1, 168, :_reduce_516,
  1, 168, :_reduce_517,
  1, 173, :_reduce_518,
  1, 173, :_reduce_519,
  1, 242, :_reduce_520,
  0, 327, :_reduce_521,
  4, 242, :_reduce_522,
  2, 242, :_reduce_523,
  3, 244, :_reduce_524,
  2, 244, :_reduce_525,
  4, 328, :_reduce_526,
  2, 328, :_reduce_527,
  2, 328, :_reduce_528,
  1, 328, :_reduce_none,
  2, 330, :_reduce_530,
  0, 330, :_reduce_531,
  6, 297, :_reduce_532,
  8, 297, :_reduce_533,
  4, 297, :_reduce_534,
  6, 297, :_reduce_535,
  4, 297, :_reduce_536,
  6, 297, :_reduce_537,
  2, 297, :_reduce_538,
  4, 297, :_reduce_539,
  6, 297, :_reduce_540,
  2, 297, :_reduce_541,
  4, 297, :_reduce_542,
  2, 297, :_reduce_543,
  4, 297, :_reduce_544,
  1, 297, :_reduce_545,
  0, 297, :_reduce_546,
  1, 293, :_reduce_547,
  1, 293, :_reduce_548,
  1, 293, :_reduce_549,
  1, 293, :_reduce_550,
  1, 276, :_reduce_none,
  1, 276, :_reduce_552,
  1, 332, :_reduce_none,
  1, 333, :_reduce_none,
  3, 333, :_reduce_555,
  1, 286, :_reduce_556,
  3, 286, :_reduce_557,
  1, 334, :_reduce_none,
  2, 335, :_reduce_559,
  1, 335, :_reduce_560,
  2, 336, :_reduce_561,
  1, 336, :_reduce_562,
  1, 280, :_reduce_none,
  3, 280, :_reduce_564,
  1, 329, :_reduce_none,
  3, 329, :_reduce_566,
  1, 337, :_reduce_none,
  1, 337, :_reduce_none,
  2, 281, :_reduce_569,
  1, 281, :_reduce_570,
  3, 338, :_reduce_571,
  3, 339, :_reduce_572,
  1, 287, :_reduce_573,
  3, 287, :_reduce_574,
  1, 331, :_reduce_575,
  3, 331, :_reduce_576,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 288, :_reduce_579,
  1, 288, :_reduce_580,
  1, 341, :_reduce_none,
  1, 341, :_reduce_none,
  2, 283, :_reduce_583,
  2, 282, :_reduce_584,
  0, 282, :_reduce_585,
  1, 245, :_reduce_none,
  0, 342, :_reduce_587,
  4, 245, :_reduce_588,
  1, 233, :_reduce_589,
  2, 233, :_reduce_590,
  1, 218, :_reduce_none,
  3, 218, :_reduce_592,
  3, 343, :_reduce_593,
  2, 343, :_reduce_594,
  4, 343, :_reduce_595,
  2, 343, :_reduce_596,
  2, 343, :_reduce_597,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 172, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 196, :_reduce_none,
  2, 171, :_reduce_none,
  0, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 243, :_reduce_620,
  1, 243, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_623,
  0, 151, :_reduce_624 ]

racc_reduce_n = 625

racc_shift_n = 1055

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_298(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 300 omitted

def _reduce_301(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_362(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_367(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_369(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_370(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
 result = 0 
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 402 omitted

def _reduce_403(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_404(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_411(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_414(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_426(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_427(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_428(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_437(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_438(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_449(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_475(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_481(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_482(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_484(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_485(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_486(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

def _reduce_507(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_508(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_509(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_511(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_513(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_514(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_518(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_519(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_520(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_521(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_523(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_525(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_526(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_556(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_557(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_560(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

# reduce 567 omitted

# reduce 568 omitted

def _reduce_569(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_570(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_571(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_572(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_573(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_580(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 581 omitted

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_584(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_585(val, _values, result)
                      result = nil
                    
    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_588(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_589(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 591 omitted

def _reduce_592(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_595(val, _values, result)
                      _, sym, _, value = val
                      sym[0] = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_596(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

def _reduce_620(val, _values, result)
 yyerrok 
    result
end

# reduce 621 omitted

# reduce 622 omitted

def _reduce_623(val, _values, result)
 yyerrok 
    result
end

def _reduce_624(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby22Parser
