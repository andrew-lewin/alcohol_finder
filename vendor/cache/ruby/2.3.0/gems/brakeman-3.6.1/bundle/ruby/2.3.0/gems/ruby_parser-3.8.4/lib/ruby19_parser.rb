#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby19Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-480,8,69,70,71,12,57,-480,-480,-480,63,64,-480,-480,-480,67,-480,65',
'66,68,32,33,72,73,-480,259,-480,-480,-480,31,30,29,95,94,96,97,-480',
'-480,22,-480,-480,-480,-480,-480,11,47,10,13,99,98,100,89,56,91,90,92',
'715,93,101,102,552,87,88,552,44,45,43,-480,-480,-480,-480,-480,-480',
'-480,-480,-480,-480,-480,-480,-480,-480,259,-93,-480,-480,-480,42,-480',
'-480,35,672,-480,58,59,-480,-480,60,-480,37,-480,3,-480,46,-480,-480',
'-480,-480,-480,-480,-480,23,-480,258,-480,-99,85,79,81,82,83,84,-95',
'103,-100,80,86,-480,-480,-480,-480,-483,-480,552,62,-480,-480,552,-483',
'-483,-483,-107,630,-483,-483,-483,199,-483,695,695,-93,207,208,552,593',
'-483,210,-483,-483,-483,200,630,-102,714,-104,-103,-101,-483,-483,258',
'-483,-483,-483,-483,-483,107,629,-106,107,630,106,-102,107,106,-104',
'-93,-101,106,-93,-95,695,107,211,201,-93,629,106,671,-483,-483,-483',
'-483,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483,206,629,-483',
'-483,-483,592,-483,-483,-90,-103,-483,259,-95,-483,-483,-95,-483,-91',
'-483,250,-483,-95,-483,-483,-483,-483,-483,-483,-483,211,-483,-556,-483',
'-105,-98,107,107,107,880,107,106,106,106,-553,106,-483,-483,-483,-483',
'-284,-483,207,208,-483,-483,107,-284,-284,-284,630,106,305,-284,-284',
'-102,-284,-104,-103,-101,-102,-97,-104,-103,-101,-93,-556,-405,-95,107',
'-92,207,208,-554,106,580,-284,-284,585,-284,-284,-284,-284,-284,629',
'79,389,-480,252,258,-557,391,390,80,-480,253,207,208,686,-553,536,535',
'534,-480,537,-94,306,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,-553,580,-284,-284,-284,-483,612,-480,-96,211,-284',
'211,-483,-284,-480,582,581,-554,-284,-414,-284,-483,-284,-284,-284,-284',
'-284,-284,-284,231,-284,686,-284,536,535,534,-483,537,-560,-554,211',
'344,-494,-483,-560,-284,-284,205,-96,-490,-284,-560,-560,-560,-105,796',
'-490,-560,-560,368,-560,228,582,581,-85,230,229,226,227,-560,-71,725',
'-414,521,371,-489,520,-560,580,-414,-560,-560,-489,-560,-560,-560,-560',
'-560,-414,-98,-99,-560,203,387,-331,-107,-495,580,-560,204,580,-331',
'521,-556,580,523,-414,-560,202,919,-331,-560,-560,-560,-560,-560,-560',
'-560,-560,-560,-560,-560,-560,-560,-560,-560,-494,-560,-560,-560,-560',
'613,437,521,392,-560,523,-560,-560,582,581,578,-556,-560,-100,-560,-560',
'-560,-560,-560,-560,-560,-560,-560,509,-560,-560,-560,582,581,583,582',
'581,588,-560,582,581,594,-90,-560,-560,-560,-495,-94,-99,-560,-560,-560',
'-560,-103,-107,-560,-560,-560,539,-560,536,535,534,436,537,433,-491',
'-488,-560,-560,-560,-560,434,-491,-488,521,-106,747,523,-560,-560,435',
'-560,-560,-560,-560,-560,509,-91,307,308,606,-485,748,-100,832,541,528',
'686,-485,536,535,534,438,537,545,544,548,547,439,-560,-560,-560,-560',
'-560,-560,-560,-560,-560,-560,-560,-560,-560,-560,210,-102,-560,-560',
'-560,-97,749,-560,471,-93,-560,-106,682,-560,-560,-102,-560,-104,-560',
'-101,-560,685,-560,-560,-560,-560,-560,-560,-560,261,-560,-560,-560',
'761,-486,536,535,534,107,537,706,-486,231,106,707,-560,-560,-560,-560',
'-284,-560,607,733,-560,-103,107,-284,-284,-284,481,106,-284,-284,-284',
'686,-284,536,535,534,484,537,541,504,505,228,-284,-284,-284,230,229',
'545,544,548,547,486,-284,-284,-70,-284,-284,-284,-284,-284,-95,-92,775',
'-492,558,-493,-104,-101,211,682,-492,686,-493,536,535,534,494,537,685',
'-492,760,-493,495,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,107,500,-284,-284,-284,106,750,-284,501,502,-284',
'264,682,-284,-284,211,-284,499,-284,261,-284,872,-284,-284,-284,-284',
'-284,-284,-284,506,-284,539,-284,536,535,534,686,537,536,535,534,510',
'537,511,-277,-284,-284,-284,-284,-278,-284,-277,-487,-284,-105,231,-278',
'-278,-278,-487,-277,-278,-278,-278,539,-278,536,535,534,541,537,207',
'208,524,682,-278,-278,-278,545,544,548,547,207,208,525,-278,-278,575',
'-278,-278,-278,-278,-278,686,576,536,535,534,486,537,107,558,541,719',
'686,106,536,535,534,381,537,545,544,548,547,562,-278,-278,-278,-278',
'-278,-278,-278,-278,-278,-278,-278,-278,-278,-278,107,682,-278,-278',
'-278,106,231,-278,800,775,-278,563,682,-278,-278,587,-278,591,-278,598',
'-278,-263,-278,-278,-278,-278,-278,-278,-278,600,-278,539,-278,536,535',
'534,107,537,228,207,208,106,230,229,512,-278,-278,-278,-278,-561,-278',
'513,211,-278,800,775,-561,-561,-561,604,435,-561,-561,-561,539,-561',
'536,535,534,541,537,231,605,261,-561,-561,-561,-561,545,544,548,547',
'616,619,231,-561,-561,231,-561,-561,-561,-561,-561,686,231,536,535,534',
'231,537,823,824,541,228,825,101,102,230,229,226,227,545,544,548,547',
'211,-561,-561,-561,-561,-561,-561,-561,-561,-561,-561,-561,-561,-561',
'-561,211,682,-561,-561,-561,560,211,-561,-85,649,-561,211,561,-561,-561',
'515,-561,660,-561,666,-561,559,-561,-561,-561,-561,-561,-561,-561,667',
'-561,-561,-561,686,211,536,535,534,674,537,676,679,680,688,-285,-561',
'-561,-561,-561,-562,-561,-285,689,-561,691,558,-562,-562,-562,698,-285',
'-562,-562,-562,539,-562,536,535,534,727,537,541,728,-264,-562,-562,-562',
'-562,734,471,471,211,548,547,752,-562,-562,710,-562,-562,-562,-562,-562',
'686,709,536,535,534,484,537,486,660,541,711,844,211,536,535,534,261',
'537,545,544,548,547,261,-562,-562,-562,-562,-562,-562,-562,-562,-562',
'-562,-562,-562,-562,-562,660,682,-562,-562,-562,-284,231,-562,231,775',
'-562,760,-284,-562,-562,794,-562,-557,-562,211,-562,-284,-562,-562,-562',
'-562,-562,-562,-562,775,-562,-562,-562,-285,804,710,-492,211,-265,831',
'-285,834,941,-492,836,-562,-562,-562,-562,-285,-562,711,-492,-562,281',
'69,70,71,12,57,839,840,-493,63,64,760,846,660,67,-493,65,66,68,32,33',
'72,73,852,-493,-263,856,858,31,30,29,95,94,96,97,859,844,22,536,535',
'534,211,537,11,47,861,13,99,98,100,89,56,91,90,92,-284,93,101,102,864',
'87,88,-284,44,45,43,946,-557,866,868,-277,-284,686,947,536,535,534,-277',
'537,868,-285,211,945,873,875,42,-277,-285,283,877,211,58,59,887,888',
'60,-285,37,211,891,-266,46,761,898,536,535,534,899,537,23,541,902,904',
'905,85,79,81,82,83,84,921,548,547,80,86,281,69,70,71,12,57,923,62,924',
'63,64,928,932,935,67,541,65,66,68,32,33,72,73,937,545,544,548,547,31',
'30,29,95,94,96,97,868,868,22,110,111,112,113,114,11,47,942,13,99,98',
'100,89,56,91,90,92,-284,93,101,102,943,87,88,-284,44,45,43,948,-557',
'950,868,868,-284,686,868,536,535,534,954,537,110,111,112,113,114,921',
'42,666,921,35,978,979,58,59,980,982,60,868,37,868,868,-557,46,761,-556',
'536,535,534,211,537,23,541,868,921,868,85,79,81,82,83,84,,548,547,80',
'86,281,69,70,71,12,57,,62,,63,64,,,,67,541,65,66,68,32,33,72,73,,545',
'544,548,547,31,30,29,95,94,96,97,,,22,110,111,112,113,114,11,47,,13',
'99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,110,111,112,113',
'114,,686,,536,535,534,,537,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,539',
',536,535,534,,537,23,541,,,,85,79,81,82,83,84,,548,547,80,86,281,69',
'70,71,12,57,,62,,63,64,,,,67,541,65,66,68,32,33,72,73,,545,544,548,547',
'31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,686,,536,535,534,,537,,,,,,,42,,,283',
',,58,59,,,60,,37,,,,46,761,,536,535,534,,537,23,541,,,,85,79,81,82,83',
'84,,548,547,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,541,65,66,68,32',
'33,72,73,,545,544,548,547,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,686,,536,535',
'534,,537,,,,,,,42,,,283,,,58,59,,,60,,37,,,686,46,536,535,534,,537,',
',23,541,,,,85,79,81,82,83,84,,548,547,80,86,281,69,70,71,12,57,,62,',
'63,64,,,541,67,,65,66,68,32,33,72,73,,548,547,,,31,30,29,95,94,96,97',
',,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,686,,536,535,534,,537,,,,,,,42,,,35,,,58,59,,,60,,37,,,686',
'46,536,535,534,,537,,,23,541,,,,85,79,81,82,83,84,,548,547,80,86,8,69',
'70,71,12,57,,62,,63,64,,,541,67,,65,66,68,32,33,72,73,,548,547,,,31',
'30,29,95,94,96,97,,,22,,,,,,11,47,10,13,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,231,235,240,241,242,237,239,247,248,243,244',
',-579,-579,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226',
'227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12',
'57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97',
',,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,231,235,240,241,242,237,239,247,248,243,244,,-579,-579,,,245,246',
',42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23',
'233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67',
',65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13',
'99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,-579,-579',
'-579,-579,237,239,,,-579,-579,,,,,,245,246,,42,,,35,,,58,59,,,60,,37',
'228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84',
',,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,,35,,,58',
'59,,,60,,37,228,,234,46,230,229,226,227,,,232,23,233,,,,85,79,81,82',
'83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,',
'35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,,,232,23,233,,,,85,79',
'81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32',
'33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246',
',42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,,,232,23,233,',
',,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245',
'246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,,,232,23,233',
',,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,-579,-579,-579,-579',
'237,239,,,-579,-579,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234',
'46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86',
'281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,231,-579,-579,-579,-579,237,239,,,-579,-579,,,',
',,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238',
'236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62',
',63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,',
',,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231',
'-579,-579,-579,-579,237,239,,,-579,-579,,,,,,245,246,,42,,,35,,,58,59',
',,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81',
'82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,231,-579,-579,-579,-579,237,239',
',,-579,-579,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229',
'226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71',
'12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,231,-579,-579,-579,-579,237,239,,,-579,-579,,,,,,245,246,,42',
',,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233',
',,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,235,240,241,242',
'237,239,,,243,244,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46',
'230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,231,235,240,241,242,237,239,247,,243,244,,,,,,245,246',
',42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23',
'233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67',
',65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13',
'99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,',
',,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,',
',,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,',
',67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47',
',13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,',
',,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227',
',,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,',
',,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47',
',13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,',
',,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,,46,230,229,226,227',
',,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,',
',,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47',
',13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,',
',,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83',
'84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,',
',60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71',
'12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,',
'65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,',
'80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60',
',37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57',
',62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,12,57,,,62,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,10,13,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58',
'59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71',
',57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,539,,536,535,534,46,537',
',,,,,,221,,,,-413,85,79,81,82,83,84,-413,-413,-413,80,86,-413,-413,-413',
',-413,,,62,,541,719,,,-413,-413,-413,,,545,544,548,547,,,-413,-413,',
'-413,-413,-413,-413,-413,,,,,,,,,,,,,,,,,,,,,,,,-413,-413,-413,-413',
'-413,-413,-413,-413,-413,-413,-413,-413,-413,-413,,,-413,-413,-413,',
',-413,,261,-413,,,-413,-413,,-413,,-413,,-413,,-413,-413,-413,-413,-413',
'-413,-413,,-413,-413,-413,,,,,,,,,,,,-291,-413,-413,,-413,,-413,-291',
'-291,-291,,,-291,-291,-291,,-291,,,,,,,,,,-291,-291,,,,,,,,,-291,-291',
',-291,-291,-291,-291,-291,,,,,,,,,,,,,,,,,,,,,,,,-291,-291,-291,-291',
'-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,,,-291,-291,-291,',
',-291,,264,-291,,,-291,-291,,-291,,-291,,-291,,-291,-291,-291,-291,-291',
'-291,-291,,-291,,-291,,,,,,,,,,,,,-291,-291,,-291,,-291,69,70,71,,57',
',,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,',
'80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273',
',271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,',
',,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,287,,,,,,,,,,,,,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,222,,,58,59,,',
'60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,304,57,,,62',
'63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,,,46,,',
',,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47',
',,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,',
'47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,22,,,,,601,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,231,235,240,241,242,237,239,247,248,243,244',
',224,225,,,245,246,,216,,,222,,,58,59,,,60,,,228,,234,46,230,229,226',
'227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,107,249,69,70,71',
'106,57,62,,,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,,,302,,,,,,,,,,,,,,,,,,,,338,,,35,,,58,59,,,60,,37,,,,,,,,,,,,,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,12,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,10,13,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42',
',,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,381,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71',
'12,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,397,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,',
',47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,',
',,,,,,,,,,,216,,,222,,,58,59,,,60,,397,,,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60',
',,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,',
'47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,',
'46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47',
',,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,',
',,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84',
',,,80,86,211,69,70,71,,57,,62,,63,64,,,,67,,65,66,68,298,299,72,73,',
',,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60',
',273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,211,69,70,71,,57,,62,,63,64,,,,67,,65',
'66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,',
',80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294',
'295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,',
'46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,12,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59',
',,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302',
',,,,,,,,,,,,,,,,,,,292,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,497,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,288,,,58',
'59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,515,,58,59,,,60,,,,,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71',
',57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97',
',,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,564,56',
'91,90,565,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,566,,,222,,,58',
'59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,296,,,99,98,100,564,56,91,90,565,,93,101,102,,87,88,,,,302',
',,,,,,,,,,,,,,,,,,,566,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,,,46,,,,,,,,221,,,,-578,85,79,81,82,83,84,-578,-578,-578',
'80,86,-578,-578,-578,,-578,,,62,,,,,,-578,-578,-578,,,,,,,,,-578,-578',
',-578,-578,-578,-578,-578,,,,,,,,,,,,,,,,,,,,,,,,-578,-578,-578,-578',
'-578,-578,-578,-578,-578,-578,-578,-578,-578,-578,,,-578,-578,-578,',
',-578,,261,-578,,,-578,-578,,-578,,-578,,-578,,-578,-578,-578,-578,-578',
'-578,-578,,-578,-578,-578,,,,,,,,,,,,,-578,-578,,-578,,-578,69,70,71',
',57,,,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,',
',223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,-578,85,79,81,82',
'83,84,-578,-578,-578,80,86,-578,-578,-578,,-578,,,62,,,,,,,-578,,,,',
',,,,,-578,-578,,-578,-578,-578,-578,-578,,,,,,,,,,,,,-578,,,,,,,-578',
'-578,-578,,,-578,-578,-578,,-578,,,,,,-578,,,,-578,,,-578,,,,,261,-578',
'-578,-578,,-578,-578,-578,-578,-578,,,,,,,,,,,,,,-578,,,,,,,,,,,,,-578',
',,,,-578,,,-578,,,,,,,-578,,,,,261,-578,,,,,,,,,,,,,,,,,,,,,,-578,,',
',,,69,70,71,,57,,,-578,63,64,,,-578,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60',
',644,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,271,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,12,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,',
',,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,381,,62,63,64,',
',,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,',
',,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,',
',,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31',
'30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273',
',271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,',
',,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,',
',,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,644,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295',
'301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,',
'46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64',
',,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47',
',,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,731,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,',
'57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96',
'97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,644,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,',
',80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294',
'295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,',
',,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,',
',,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292',
',,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,397,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295',
'301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,',
',,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,',
'67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,',
'47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,273,,,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60',
',,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,',
',47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,',
',,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71',
',57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94',
'96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,901',
',,222,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,,,302,,,,,,,,,,,,,,,,,,,,911,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,644,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,223,,,,,617,,47,,,99,98,100,89,56,91,90,92,275,93,101',
'102,,87,88,,44,45,43,231,235,240,241,242,237,239,247,248,243,244,,224',
'225,,,245,246,,216,,,222,,,58,59,,,60,,273,228,271,234,46,230,229,226',
'227,238,236,232,221,233,,,,85,79,81,82,83,84,,,,80,86,,249,,-240,,,',
'62,166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196',
'175,164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180',
',,,,,161,168,159,160,156,157,158,118,120,117,,119,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86',
'166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196',
'175,164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180',
',,,,,161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86',
'166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196',
'175,164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180',
',,,,,161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86',
'166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196',
'175,164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180',
',,,,,161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86',
'166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196',
'175,164,178,182,184,176,169,,,,185,192,187,353,352,354,351,162,181,180',
',,,,,161,168,159,160,348,349,350,346,120,91,90,347,,93,,,,,,,151,152',
',148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,360,',
',,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,,,155,166',
'177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196,175',
'164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180,',
',,,,161,168,159,160,156,157,158,118,120,378,377,119,,379,,,,,,,151,152',
',148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,',
',,,145,144,,129,150,147,146,142,143,137,135,127,149,128,,,155,166,177',
'167,190,163,183,173,172,193,194,188,171,170,165,191,195,196,175,164',
'178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180,,,,,',
'161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148,130,131',
'132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,617,,,,,,,145,144',
',129,150,147,146,142,143,137,135,127,149,128,,,155,231,235,240,241,242',
'237,239,247,248,243,244,,224,225,,,245,246,,,,,,,,,,,,,,,228,,234,,230',
'229,226,227,238,236,232,,233,406,410,,,407,,,,,,,,,151,152,249,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,413,417,155,,412,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,468,410,155,,469,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129,150,147,146,142',
'143,137,135,127,149,128,468,410,155,,469,,,,,,,,,151,152,,148,130,131',
'132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129',
'150,147,146,142,143,137,135,127,149,128,620,410,155,,621,,,,,,,,,151',
'152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261',
',,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,622,417',
'155,,623,,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153',
'154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135',
'127,149,128,653,410,155,,654,,,,,,,,,151,152,,148,130,131,132,139,136',
'138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147',
'146,142,143,137,135,127,149,128,656,417,155,,657,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,',
',145,144,,129,150,147,146,142,143,137,135,127,149,128,620,410,155,,621',
',,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,622,417,155,,623,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,701,410,155,,702,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,703,417,155,,704,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,808,417,155,,809,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,468,410,155,,469,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,968,417,155,,967,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,971,410,155,,972,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,973,417,155,,974,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,,,155,231,235,240,241',
'242,237,239,247,248,243,244,,224,225,,,245,246,,,,,,,,,,,,,,,228,,234',
',230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239,247,248',
'243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227',
'238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244,,224,225',
',249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233',
'231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246,,',
',,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241',
'242,237,239,247,248,243,244,,224,225,211,249,245,246,,,,,,,,,,,,,,,228',
',234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239,247',
'248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226',
'227,238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244,,224',
'225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232',
',233,231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246',
',,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240',
'241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,',
'228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239',
'247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229',
'226,227,238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244',
',224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236',
'232,,233,231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245',
'246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235',
'240,241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,',
',,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237',
'239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230',
'229,226,227,238,236,232,,233,,,,,,,,,,,,,,,,249' ]
        racc_action_table = arr = ::Array.new(23644, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'89,2,2,2,2,2,2,89,89,89,2,2,89,89,89,2,89,2,2,2,2,2,2,2,89,61,89,89',
'89,2,2,2,2,2,2,2,89,89,2,89,89,89,89,89,2,2,2,2,2,2,2,2,2,2,2,2,570',
'2,2,2,328,2,2,329,2,2,2,89,89,89,89,89,89,89,89,89,89,89,89,89,89,297',
'653,89,89,89,2,89,89,2,527,89,2,2,89,89,2,89,2,89,1,89,2,89,89,89,89',
'89,89,89,2,89,61,89,335,2,2,2,2,2,2,654,3,336,2,2,89,89,89,89,92,89',
'805,2,89,89,855,92,92,92,339,466,92,92,92,13,92,554,555,653,430,430',
'876,372,92,22,92,92,92,15,475,971,570,972,973,986,92,92,297,92,92,92',
'92,92,328,466,562,329,476,328,701,570,329,702,653,806,570,653,654,807',
'5,22,16,653,475,5,527,92,92,92,92,92,92,92,92,92,92,92,92,92,92,19,476',
'92,92,92,372,92,92,335,703,92,28,654,92,92,654,92,336,92,25,92,654,92',
'92,92,92,92,92,92,430,92,973,92,704,339,805,554,555,805,855,805,554',
'555,564,855,92,92,92,92,412,92,664,664,92,92,876,412,412,412,636,876',
'39,412,412,971,412,972,973,986,971,562,972,973,986,701,703,28,702,807',
'806,722,722,565,807,366,412,412,366,412,412,412,412,412,636,77,117,564',
'27,28,704,117,117,77,564,27,20,20,685,564,685,685,685,564,685,703,42',
'412,412,412,412,412,412,412,412,412,412,412,412,412,412,564,589,412',
'412,412,565,412,346,704,47,412,664,565,412,346,366,366,565,412,770,412',
'565,412,412,412,412,412,412,412,461,412,872,412,872,872,872,347,872',
'656,565,722,69,214,347,413,412,412,18,412,348,412,413,413,413,412,685',
'348,413,413,83,413,461,589,589,648,461,461,461,461,413,648,589,770,317',
'84,349,317,808,362,770,413,413,349,413,413,413,413,413,770,18,214,656',
'17,115,48,18,215,364,656,17,369,48,318,656,374,318,770,656,17,872,48',
'413,413,413,413,413,413,413,413,413,413,413,413,413,413,656,40,413,413',
'413,808,413,217,322,197,413,322,808,413,362,362,362,808,413,215,413',
'808,413,413,413,413,413,413,413,436,413,413,413,364,364,364,369,369',
'369,808,374,374,374,40,622,413,413,41,413,40,413,622,622,622,413,217',
'622,622,622,326,622,326,326,326,216,326,213,350,351,622,622,622,622',
'213,350,351,669,436,620,669,622,622,213,622,622,622,622,622,306,41,43',
'43,406,352,621,41,751,326,326,541,352,541,541,541,218,541,326,326,326',
'326,219,622,622,622,622,622,622,622,622,622,622,622,622,622,622,223',
'620,622,622,622,306,622,622,254,406,622,306,541,622,622,406,622,621',
'622,751,622,541,622,622,622,622,622,622,622,257,622,622,622,629,353',
'629,629,629,278,629,566,353,442,278,566,622,622,622,622,623,622,407',
'602,622,622,332,623,623,623,268,332,623,623,623,682,623,682,682,682',
'269,682,629,302,302,442,623,623,623,442,442,629,629,629,629,272,623',
'623,282,623,623,623,623,623,407,602,926,289,926,290,407,602,284,682',
'289,794,290,794,794,794,285,794,682,289,629,290,286,623,623,623,623',
'623,623,623,623,623,623,623,623,623,623,715,291,623,623,623,715,623',
'623,291,292,623,295,794,623,623,296,623,291,623,301,623,794,623,623',
'623,623,623,623,623,303,623,528,623,528,528,528,796,528,796,796,796',
'307,796,308,293,623,623,623,623,56,623,293,354,623,623,311,56,56,56',
'354,293,56,56,56,573,56,573,573,573,528,573,315,315,319,796,56,56,56',
'528,528,528,528,327,327,320,56,56,356,56,56,56,56,56,873,356,873,873',
'873,323,873,720,333,573,573,919,720,919,919,919,334,919,573,573,573',
'573,338,56,56,56,56,56,56,56,56,56,56,56,56,56,56,815,873,56,56,56,815',
'443,56,690,690,56,340,919,56,56,368,56,371,56,393,56,395,56,56,56,56',
'56,56,56,398,56,674,56,674,674,674,885,674,443,716,716,885,443,443,309',
'56,56,56,56,417,56,309,401,56,956,956,417,417,417,404,309,417,417,417',
'676,417,676,676,676,674,676,462,405,414,417,417,417,417,674,674,674',
'674,422,432,444,417,417,445,417,417,417,417,417,921,446,921,921,921',
'447,921,723,723,676,462,723,723,723,462,462,462,462,676,676,676,676',
'477,417,417,417,417,417,417,417,417,417,417,417,417,417,417,478,921',
'417,417,417,337,492,417,493,496,417,498,337,417,417,503,417,507,417',
'516,417,337,417,417,417,417,417,417,417,517,417,417,417,679,518,679',
'679,679,530,679,531,532,539,546,502,417,417,417,417,418,417,502,549',
'417,551,556,418,418,418,557,502,418,418,418,719,418,719,719,719,593',
'719,679,595,599,418,418,418,418,603,608,614,624,679,679,626,418,418',
'568,418,418,418,418,418,954,568,954,954,954,641,954,643,650,719,568',
'760,652,760,760,760,655,760,719,719,719,719,658,418,418,418,418,418',
'418,418,418,418,418,418,418,418,418,659,954,418,418,418,657,662,418',
'663,665,418,673,657,418,418,684,418,657,418,687,418,657,418,418,418',
'418,418,418,418,692,418,418,418,707,697,900,908,700,730,735,707,753',
'900,908,754,418,418,418,418,707,418,900,908,418,35,35,35,35,35,35,755',
'757,909,35,35,758,761,769,35,909,35,35,35,35,35,35,35,773,909,776,777',
'781,35,35,35,35,35,35,35,782,899,35,899,899,899,783,899,35,35,784,35',
'35,35,35,35,35,35,35,35,809,35,35,35,785,35,35,809,35,35,35,910,809',
'788,789,912,809,839,910,839,839,839,912,839,791,948,793,910,795,798',
'35,912,948,35,801,811,35,35,816,817,35,948,35,818,827,828,35,834,841',
'834,834,834,842,834,35,839,847,849,850,35,35,35,35,35,35,874,839,839',
'35,35,199,199,199,199,199,199,878,35,879,199,199,884,892,893,199,834',
'199,199,199,199,199,199,199,894,834,834,834,834,199,199,199,199,199',
'199,199,895,897,199,9,9,9,9,9,199,199,901,199,199,199,199,199,199,199',
'199,199,974,199,199,199,903,199,199,974,199,199,199,911,974,914,915',
'916,974,864,917,864,864,864,918,864,280,280,280,280,280,920,199,944',
'955,199,960,961,199,199,962,963,199,964,199,965,966,967,199,836,968',
'836,836,836,970,836,199,864,975,976,988,199,199,199,199,199,199,,864',
'864,199,199,222,222,222,222,222,222,,199,,222,222,,,,222,836,222,222',
'222,222,222,222,222,,836,836,836,836,222,222,222,222,222,222,222,,,222',
'491,491,491,491,491,222,222,,222,222,222,222,222,222,222,222,222,,222',
'222,222,,222,222,,222,222,222,647,647,647,647,647,,866,,866,866,866',
',866,,,,,,,222,,,222,,,222,222,,,222,,222,,,,222,861,,861,861,861,,861',
'222,866,,,,222,222,222,222,222,222,,866,866,222,222,283,283,283,283',
'283,283,,222,,283,283,,,,283,861,283,283,283,283,283,283,283,,861,861',
'861,861,283,283,283,283,283,283,283,,,283,,,,,,283,283,,283,283,283',
'283,283,283,283,283,283,,283,283,283,,283,283,,283,283,283,,,,,,,868',
',868,868,868,,868,,,,,,,283,,,283,,,283,283,,,283,,283,,,,283,932,,932',
'932,932,,932,283,868,,,,283,283,283,283,283,283,,868,868,283,283,288',
'288,288,288,288,288,,283,,288,288,,,,288,932,288,288,288,288,288,288',
'288,,932,932,932,932,288,288,288,288,288,288,288,,,288,,,,,,288,288',
',288,288,288,288,288,288,288,288,288,,288,288,288,,288,288,,288,288',
'288,,,,,,,935,,935,935,935,,935,,,,,,,288,,,288,,,288,288,,,288,,288',
',,937,288,937,937,937,,937,,,288,935,,,,288,288,288,288,288,288,,935',
'935,288,288,314,314,314,314,314,314,,288,,314,314,,,937,314,,314,314',
'314,314,314,314,314,,937,937,,,314,314,314,314,314,314,314,,,314,,,',
',,314,314,,314,314,314,314,314,314,314,314,314,,314,314,314,,314,314',
',314,314,314,,,,,,,950,,950,950,950,,950,,,,,,,314,,,314,,,314,314,',
',314,,314,,,982,314,982,982,982,,982,,,314,950,,,,314,314,314,314,314',
'314,,950,950,314,314,387,387,387,387,387,387,,314,,387,387,,,982,387',
',387,387,387,387,387,387,387,,982,982,,,387,387,387,387,387,387,387',
',,387,,,,,,387,387,387,387,387,387,387,387,387,387,387,387,,387,387',
'387,,387,387,,387,387,387,440,440,440,440,440,440,440,440,440,440,440',
',440,440,,,440,440,,387,,,387,,,387,387,,,387,,387,440,,440,387,440',
'440,440,440,440,440,440,387,440,,,,387,387,387,387,387,387,,,,387,387',
'550,550,550,550,550,550,,387,,550,550,,,,550,,550,550,550,550,550,550',
'550,,,,,,550,550,550,550,550,550,550,,,550,,,,,,550,550,,550,550,550',
'550,550,550,550,550,550,,550,550,550,,550,550,,550,550,550,441,441,441',
'441,441,441,441,441,441,441,441,,441,441,,,441,441,,550,,,550,,,550',
'550,,,550,,550,441,,441,550,441,441,441,441,441,441,441,550,441,,,,550',
'550,550,550,550,550,,,,550,550,553,553,553,553,553,553,,550,,553,553',
',,,553,,553,553,553,553,553,553,553,,,,,,553,553,553,553,553,553,553',
',,553,,,,,,553,553,,553,553,553,553,553,553,553,553,553,,553,553,553',
',553,553,,553,553,553,451,451,451,451,451,451,451,,,451,451,,,,,,451',
'451,,553,,,553,,,553,553,,,553,,553,451,,451,553,451,451,451,451,451',
'451,451,553,451,,,,553,553,553,553,553,553,,,,553,553,671,671,671,671',
'671,671,,553,,671,671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671',
'671,671,671,671,671,,,671,,,,,,671,671,,671,671,671,671,671,671,671',
'671,671,,671,671,671,,671,671,,671,671,671,452,,,,,,,,,,,,,,,,452,452',
',671,,,671,,,671,671,,,671,,671,452,,452,671,452,452,452,452,,,452,671',
'452,,,,671,671,671,671,671,671,,,,671,671,672,672,672,672,672,672,,671',
',672,672,,,,672,,672,672,672,672,672,672,672,,,,,,672,672,672,672,672',
'672,672,,,672,,,,,,672,672,,672,672,672,672,672,672,672,672,672,,672',
'672,672,,672,672,,672,672,672,453,,,,,,,,,,,,,,,,453,453,,672,,,672',
',,672,672,,,672,,672,453,,453,672,453,453,453,453,,,453,672,453,,,,672',
'672,672,672,672,672,,,,672,672,717,717,717,717,717,717,,672,,717,717',
',,,717,,717,717,717,717,717,717,717,,,,,,717,717,717,717,717,717,717',
',,717,,,,,,717,717,,717,717,717,717,717,717,717,717,717,,717,717,717',
',717,717,,717,717,717,454,,,,,,,,,,,,,,,,454,454,,717,,,717,,,717,717',
',,717,,717,454,,454,717,454,454,454,454,,,454,717,454,,,,717,717,717',
'717,717,717,,,,717,717,718,718,718,718,718,718,,717,,718,718,,,,718',
',718,718,718,718,718,718,718,,,,,,718,718,718,718,718,718,718,,,718',
',,,,,718,718,,718,718,718,718,718,718,718,718,718,,718,718,718,,718',
'718,,718,718,718,455,,,,,,,,,,,,,,,,455,455,,718,,,718,,,718,718,,,718',
',718,455,,455,718,455,455,455,455,,,455,718,455,,,,718,718,718,718,718',
'718,,,,718,718,724,724,724,724,724,724,,718,,724,724,,,,724,,724,724',
'724,724,724,724,724,,,,,,724,724,724,724,724,724,724,,,724,,,,,,724',
'724,,724,724,724,724,724,724,724,724,724,,724,724,724,,724,724,,724',
'724,724,456,456,456,456,456,456,456,,,456,456,,,,,,456,456,,724,,,724',
',,724,724,,,724,,724,456,,456,724,456,456,456,456,456,456,456,724,456',
',,,724,724,724,724,724,724,,,,724,724,763,763,763,763,763,763,,724,',
'763,763,,,,763,,763,763,763,763,763,763,763,,,,,,763,763,763,763,763',
'763,763,,,763,,,,,,763,763,,763,763,763,763,763,763,763,763,763,,763',
'763,763,,763,763,,763,763,763,457,457,457,457,457,457,457,,,457,457',
',,,,,457,457,,763,,,763,,,763,763,,,763,,763,457,,457,763,457,457,457',
'457,457,457,457,763,457,,,,763,763,763,763,763,763,,,,763,763,765,765',
'765,765,765,765,,763,,765,765,,,,765,,765,765,765,765,765,765,765,,',
',,,765,765,765,765,765,765,765,,,765,,,,,,765,765,,765,765,765,765,765',
'765,765,765,765,,765,765,765,,765,765,,765,765,765,458,458,458,458,458',
'458,458,,,458,458,,,,,,458,458,,765,,,765,,,765,765,,,765,,765,458,',
'458,765,458,458,458,458,458,458,458,765,458,,,,765,765,765,765,765,765',
',,,765,765,766,766,766,766,766,766,,765,,766,766,,,,766,,766,766,766',
'766,766,766,766,,,,,,766,766,766,766,766,766,766,,,766,,,,,,766,766',
',766,766,766,766,766,766,766,766,766,,766,766,766,,766,766,,766,766',
'766,459,459,459,459,459,459,459,,,459,459,,,,,,459,459,,766,,,766,,',
'766,766,,,766,,766,459,,459,766,459,459,459,459,459,459,459,766,459',
',,,766,766,766,766,766,766,,,,766,766,775,775,775,775,775,775,,766,',
'775,775,,,,775,,775,775,775,775,775,775,775,,,,,,775,775,775,775,775',
'775,775,,,775,,,,,,775,775,,775,775,775,775,775,775,775,775,775,,775',
'775,775,,775,775,,775,775,775,460,460,460,460,460,460,460,,,460,460',
',,,,,460,460,,775,,,775,,,775,775,,,775,,775,460,,460,775,460,460,460',
'460,460,460,460,775,460,,,,775,775,775,775,775,775,,,,775,775,802,802',
'802,802,802,802,,775,,802,802,,,,802,,802,802,802,802,802,802,802,,',
',,,802,802,802,802,802,802,802,,,802,,,,,,802,802,,802,802,802,802,802',
'802,802,802,802,,802,802,802,,802,802,,802,802,802,463,463,463,463,463',
'463,463,,,463,463,,,,,,463,463,,802,,,802,,,802,802,,,802,,802,463,',
'463,802,463,463,463,463,463,463,463,802,463,,,,802,802,802,802,802,802',
',,,802,802,803,803,803,803,803,803,,802,,803,803,,,,803,,803,803,803',
'803,803,803,803,,,,,,803,803,803,803,803,803,803,,,803,,,,,,803,803',
',803,803,803,803,803,803,803,803,803,,803,803,803,,803,803,,803,803',
'803,464,464,464,464,464,464,464,464,,464,464,,,,,,464,464,,803,,,803',
',,803,803,,,803,,803,464,,464,803,464,464,464,464,464,464,464,803,464',
',,,803,803,803,803,803,803,,,,803,803,812,812,812,812,812,812,,803,',
'812,812,,,,812,,812,812,812,812,812,812,812,,,,,,812,812,812,812,812',
'812,812,,,812,,,,,,812,812,,812,812,812,812,812,812,812,812,812,,812',
'812,812,,812,812,,812,812,812,448,,,,,,,,,,,,,,,,448,448,,812,,,812',
',,812,812,,,812,,812,448,,448,812,448,448,448,448,,,,812,,,,,812,812',
'812,812,812,812,,,,812,812,848,848,848,848,848,848,,812,,848,848,,,',
'848,,848,848,848,848,848,848,848,,,,,,848,848,848,848,848,848,848,,',
'848,,,,,,848,848,,848,848,848,848,848,848,848,848,848,,848,848,848,',
'848,848,,848,848,848,449,,,,,,,,,,,,,,,,449,449,,848,,,848,,,848,848',
',,848,,848,449,,449,848,449,449,449,449,,,,848,,,,,848,848,848,848,848',
'848,,,,848,848,852,852,852,852,852,852,,848,,852,852,,,,852,,852,852',
'852,852,852,852,852,,,,,,852,852,852,852,852,852,852,,,852,,,,,,852',
'852,,852,852,852,852,852,852,852,852,852,,852,852,852,,852,852,,852',
'852,852,450,,,,,,,,,,,,,,,,450,450,,852,,,852,,,852,852,,,852,,852,450',
',,852,450,450,450,450,,,,852,,,,,852,852,852,852,852,852,,,,852,852',
'881,881,881,881,881,881,,852,,881,881,,,,881,,881,881,881,881,881,881',
'881,,,,,,881,881,881,881,881,881,881,,,881,,,,,,881,881,,881,881,881',
'881,881,881,881,881,881,,881,881,881,,881,881,,881,881,881,,,,,,,,,',
',,,,,,,,,,881,,,881,,,881,881,,,881,,881,,,,881,,,,,,,,881,,,,,881,881',
'881,881,881,881,,,,881,881,907,907,907,907,907,907,,881,,907,907,,,',
'907,,907,907,907,907,907,907,907,,,,,,907,907,907,907,907,907,907,,',
'907,,,,,,907,907,,907,907,907,907,907,907,907,907,907,,907,907,907,',
'907,907,,907,907,907,,,,,,,,,,,,,,,,,,,,907,,,907,,,907,907,,,907,,907',
',,,907,,,,,,,,907,,,,,907,907,907,907,907,907,,,,907,907,922,922,922',
'922,922,922,,907,,922,922,,,,922,,922,922,922,922,922,922,922,,,,,,922',
'922,922,922,922,922,922,,,922,,,,,,922,922,,922,922,922,922,922,922',
'922,922,922,,922,922,922,,922,922,,922,922,922,,,,,,,,,,,,,,,,,,,,922',
',,922,,,922,922,,,922,,922,,,,922,,,,,,,,922,,,,,922,922,922,922,922',
'922,,,,922,922,927,927,927,927,927,927,,922,,927,927,,,,927,,927,927',
'927,927,927,927,927,,,,,,927,927,927,927,927,927,927,,,927,,,,,,927',
'927,,927,927,927,927,927,927,927,927,927,,927,927,927,,927,927,,927',
'927,927,,,,,,,,,,,,,,,,,,,,927,,,927,,,927,927,,,927,,927,,,,927,,,',
',,,,927,,,,,927,927,927,927,927,927,,,,927,927,930,930,930,930,930,930',
',927,,930,930,,,,930,,930,930,930,930,930,930,930,,,,,,930,930,930,930',
'930,930,930,,,930,,,,,,930,930,,930,930,930,930,930,930,930,930,930',
',930,930,930,,930,930,,930,930,930,,,,,,,,,,,,,,,,,,,,930,,,930,,,930',
'930,,,930,,930,,,,930,,,,,,,,930,,,,,930,930,930,930,930,930,,,,930',
'930,931,931,931,931,931,931,,930,,931,931,,,,931,,931,931,931,931,931',
'931,931,,,,,,931,931,931,931,931,931,931,,,931,,,,,,931,931,,931,931',
'931,931,931,931,931,931,931,,931,931,931,,931,931,,931,931,931,,,,,',
',,,,,,,,,,,,,,931,,,931,,,931,931,,,931,,931,,,,931,,,,,,,,931,,,,,931',
'931,931,931,931,931,,,,931,931,8,8,8,8,8,,,931,8,8,,,,8,,8,8,8,8,8,8',
'8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8',
'8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8',
'8,8,,,,8,8,23,23,23,,23,,,8,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23',
'23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23',
',23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,890,,890,890',
'890,23,890,,,,,,,23,,,,29,23,23,23,23,23,23,29,29,29,23,23,29,29,29',
',29,,,23,,890,890,,,29,29,29,,,890,890,890,890,,,29,29,,29,29,29,29',
'29,,,,,,,,,,,,,,,,,,,,,,,,29,29,29,29,29,29,29,29,29,29,29,29,29,29',
',,29,29,29,,,29,,29,29,,,29,29,,29,,29,,29,,29,29,29,29,29,29,29,,29',
'29,29,,,,,,,,,,,,30,29,29,,29,,29,30,30,30,,,30,30,30,,30,,,,,,,,,,30',
'30,,,,,,,,,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,,,,,30,30,30,30',
'30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30',
',30,,30,30,30,30,30,30,30,,30,,30,,,,,,,,,,,,,30,30,,30,,30,31,31,31',
',31,,,,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,',
',31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31',
',,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,,,,,,31,,,,,31',
'31,31,31,31,31,,,,31,31,32,32,32,,32,,,31,32,32,,,,32,,32,32,32,32,32',
'32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32',
'32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,',
',32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,33,33,33,,33',
',,32,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33',
',,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,',
',,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33',
'33,33,33,33,,,,33,33,36,36,36,,36,,,33,36,36,,,,36,,36,36,36,36,36,36',
'36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,,36,,,36,36,36,36,36,36,36,36',
',36,36,36,,36,36,,,,36,,,,,,,,,,,,,,,,,,,,36,,,36,,,36,36,,,36,,36,',
',,,,,,,,,,,,,,,36,36,36,36,36,36,,,,36,36,37,37,37,,37,,,36,37,37,,',
',37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,',
'37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37',
',,37,,,37,37,,,37,,,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,44,44',
'44,37,44,,,37,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44',
'44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44,,44,44',
'44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,44,,,,,44',
'44,44,44,44,44,,,,44,44,45,45,45,,45,,,44,45,45,,,,45,,45,45,45,45,45',
'45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45',
'45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45',
',,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,46,46,46,,46,,,45,46',
'46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,',
'46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,',
',,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46',
',,,46,46,58,58,58,,58,,,46,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58',
'58,58,58,58,58,58,,,58,,,,,,,58,,,58,58,58,58,58,58,58,58,,58,58,58',
',58,58,,58,58,58,,,,,,,,,,,,,,,,,,,,58,,,58,,,58,58,,,58,,,,,,58,,,',
',,,,58,,,,,58,58,58,58,58,58,,,,58,58,59,59,59,,59,,,58,59,59,,,,59',
',59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59',
'59,59,59,59,59,59,59,59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59',
',,59,,,59,59,,,59,,59,,,,59,,,,,,,,59,,,,,59,59,59,59,59,59,,,,59,59',
'60,60,60,,60,,,59,60,60,,,,60,,60,60,60,60,60,60,60,,,,,,60,60,60,60',
'60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,60,60,,60,60',
',60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60,,,,,,,,60',
',,,,60,60,60,60,60,60,,,,60,60,63,63,63,,63,,,60,63,63,,,,63,,63,63',
'63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63',
'63,63,63,63,,63,63,63,,63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,',
'63,63,,,63,,,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63,,,,63,63,64,64,64',
',64,,,63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64',
',,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,,64,64,64,',
',,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,64,,,,,64,64,64',
'64,64,64,,,,64,64,67,67,67,,67,,,64,67,67,,,,67,,67,67,67,67,67,67,67',
',,,,,67,67,67,67,67,67,67,,,67,,,,,400,,67,,,67,67,67,67,67,67,67,67',
',67,67,67,,67,67,,67,67,67,400,400,400,400,400,400,400,400,400,400,400',
',400,400,,,400,400,,67,,,67,,,67,67,,,67,,,400,,400,67,400,400,400,400',
'400,400,400,67,400,,,,67,67,67,67,67,67,,,,67,67,67,400,68,68,68,67',
'68,67,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68',
',,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,,,68,,,,,',
',,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68,,,,,,,,,,,,,,,,,68,68,68,68,68',
'68,,,,68,68,105,105,105,105,105,,,68,105,105,,,,105,,105,105,105,105',
'105,105,105,,,,,,105,105,105,105,105,105,105,,,105,,,,,,105,105,105',
'105,105,105,105,105,105,105,105,105,,105,105,105,,105,105,,105,105,105',
',,,,,,,,,,,,,,,,,,,105,,,105,,,105,105,,,105,,105,,,,105,,,,,,,,105',
',,,,105,105,105,105,105,105,,,,105,105,110,110,110,,110,105,,105,110',
'110,,,,110,,110,110,110,110,110,110,110,,,,,,110,110,110,110,110,110',
'110,,,110,,,,,,,110,,,110,110,110,110,110,110,110,110,,110,110,110,',
'110,110,,110,110,110,,,,,,,,,,,,,,,,,,,,110,,,110,,,110,110,,,110,,',
',,,110,,,,,,,,110,,,,,110,110,110,110,110,110,,,,110,110,111,111,111',
',111,,,110,111,111,,,,111,,111,111,111,111,111,111,111,,,,,,111,111',
'111,111,111,111,111,,,111,,,,,,,111,,,111,111,111,111,111,111,111,111',
',111,111,111,,111,111,,111,111,111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111',
'111,,,111,,,,,,111,,,,,,,,111,,,,,111,111,111,111,111,111,,,,111,111',
'112,112,112,,112,,,111,112,112,,,,112,,112,112,112,112,112,112,112,',
',,,,112,112,112,112,112,112,112,,,112,,,,,,,112,,,112,112,112,112,112',
'112,112,112,,112,112,112,,112,112,,112,112,112,,,,,,,,,,,,,,,,,,,,112',
',,112,,,112,112,,,112,,,,,,112,,,,,,,,112,,,,,112,112,112,112,112,112',
',,,112,112,113,113,113,,113,,,112,113,113,,,,113,,113,113,113,113,113',
'113,113,,,,,,113,113,113,113,113,113,113,,,113,,,,,,,113,,,113,113,113',
'113,113,113,113,113,,113,113,113,,113,113,,113,113,113,,,,,,,,,,,,,',
',,,,,,113,,,113,,,113,113,,,113,,,,,,113,,,,,,,,113,,,,,113,113,113',
'113,113,113,,,,113,113,114,114,114,114,114,,,113,114,114,,,,114,,114',
'114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114,,,114,,,,,',
'114,114,,114,114,114,114,114,114,114,114,114,,114,114,114,,114,114,',
'114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114,,114,,,,114',
',,,,,,,114,,,,,114,114,114,114,114,114,,,,114,114,200,200,200,,200,',
',114,200,200,,,,200,,200,200,200,200,200,200,200,,,,,,200,200,200,200',
'200,200,200,,,200,,,,,,,200,,,200,200,200,200,200,200,200,200,,200,200',
'200,,200,200,,200,200,200,,,,,,,,,,,,,,,,,,,,200,,,200,,,200,200,,,200',
',200,,,,200,,,,,,,,200,,,,,200,200,200,200,200,200,,,,200,200,201,201',
'201,,201,,,200,201,201,,,,201,,201,201,201,201,201,201,201,,,,,,201',
'201,201,201,201,201,201,,,201,,,,,,,201,,,201,201,201,201,201,201,201',
'201,,201,201,201,,201,201,,201,201,201,,,,,,,,,,,,,,,,,,,,201,,,201',
',,201,201,,,201,,,,,,201,,,,,,,,201,,,,,201,201,201,201,201,201,,,,201',
'201,202,202,202,,202,,,201,202,202,,,,202,,202,202,202,202,202,202,202',
',,,,,202,202,202,202,202,202,202,,,202,,,,,,,202,,,202,202,202,202,202',
'202,202,202,202,202,202,202,,202,202,,202,202,202,,,,,,,,,,,,,,,,,,',
',202,,,202,,,202,202,,,202,,202,,202,,202,,,,,,,,202,,,,,202,202,202',
'202,202,202,,,,202,202,205,205,205,,205,,,202,205,205,,,,205,,205,205',
'205,205,205,205,205,,,,,,205,205,205,205,205,205,205,,,205,,,,,,,205',
',,205,205,205,205,205,205,205,205,,205,205,205,,205,205,,205,205,205',
',,,,,,,,,,,,,,,,,,,205,,,205,,,205,205,,,205,,,,,,205,,,,,,,,205,,,',
',205,205,205,205,205,205,,,,205,205,206,206,206,,206,,,205,206,206,',
',,206,,206,206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206',
',,206,,,,,,,206,,,206,206,206,206,206,206,206,206,,206,206,206,,206',
'206,,206,206,206,,,,,,,,,,,,,,,,,,,,206,,,206,,,206,206,,,206,,206,',
',,206,,,,,,,,206,,,,,206,206,206,206,206,206,,,,206,206,207,207,207',
',207,,,206,207,207,,,,207,,207,207,207,207,207,207,207,,,,,,207,207',
'207,207,207,207,207,,,207,,,,,,,207,,,207,207,207,207,207,207,207,207',
',207,207,207,,207,207,,207,207,207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207',
'207,,,207,,,,,,207,,,,,,,,207,,,,,207,207,207,207,207,207,,,,207,207',
'208,208,208,,208,,,207,208,208,,,,208,,208,208,208,208,208,208,208,',
',,,,208,208,208,208,208,208,208,,,208,,,,,,,208,,,208,208,208,208,208',
'208,208,208,,208,208,208,,208,208,,208,208,208,,,,,,,,,,,,,,,,,,,,208',
',,208,,,208,208,,,208,,,,,,208,,,,,,,,208,,,,,208,208,208,208,208,208',
',,,208,208,209,209,209,,209,,,208,209,209,,,,209,,209,209,209,209,209',
'209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209',
'209,209,209,209,209,,209,209,209,,209,209,,209,209,209,,,,,,,,,,,,,',
',,,,,,209,,,209,,,209,209,,,209,,,,,,209,,,,,,,,209,,,,,209,209,209',
'209,209,209,,,,209,209,210,210,210,,210,,,209,210,210,,,,210,,210,210',
'210,210,210,210,210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210',
',,210,210,210,210,210,210,210,210,,210,210,210,,210,210,,210,210,210',
',,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,,,,,210,,,,,,,,210,,,',
',210,210,210,210,210,210,,,,210,210,210,221,221,221,,221,,210,,221,221',
',,,221,,221,221,221,221,221,221,221,,,,,,221,221,221,221,221,221,221',
',,221,,,,,,,221,,,221,221,221,221,221,221,221,221,,221,221,221,,221',
'221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221',
',,,,,,,221,,,,,221,221,221,221,221,221,,,,221,221,224,224,224,,224,',
',221,224,224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224',
'224,224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224',
'224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224',
',,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,225,225,225',
',225,,,224,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225',
'225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225',
',225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225',
'225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225',
'226,226,226,,226,,,225,226,226,,,,226,,226,226,226,226,226,226,226,',
',,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226',
'226,226,226,,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226',
',,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226',
',,,226,226,227,227,227,,227,,,226,227,227,,,,227,,227,227,227,227,227',
'227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227',
'227,227,227,227,227,,227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,',
',,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227',
'227,227,227,,,,227,227,228,228,228,,228,,,227,228,228,,,,228,,228,228',
'228,228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228',
',,228,228,228,228,228,228,228,228,,228,228,228,,228,228,,228,228,228',
',,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,228,,,',
',228,228,228,228,228,228,,,,228,228,229,229,229,,229,,,228,229,229,',
',,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229,229,229,229',
',,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229,229,229,,229',
'229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,,,,229',
',,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,230,230,230,,230,',
',229,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230,230,230',
'230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230,,230,230',
'230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230',
',,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,231,231,231',
',231,,,230,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231',
'231,231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231',
',231,231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231',
'231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231',
'232,232,232,,232,,,231,232,232,,,,232,,232,232,232,232,232,232,232,',
',,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232',
'232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232',
',,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232',
',,,232,232,233,233,233,,233,,,232,233,233,,,,233,,233,233,233,233,233',
'233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233',
'233,233,233,233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,',
',,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233',
'233,233,233,,,,233,233,234,234,234,,234,,,233,234,234,,,,234,,234,234',
'234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234',
',,234,234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234,234',
',,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,',
',234,234,234,234,234,234,,,,234,234,235,235,235,,235,,,234,235,235,',
',,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235',
',,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,,235',
'235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235',
',,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,236,236,236,,236,',
',235,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236',
'236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236',
'236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236',
',,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236,237,237,237',
',237,,,236,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237',
'237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237',
',237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237',
'237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237',
'238,238,238,,238,,,237,238,238,,,,238,,238,238,238,238,238,238,238,',
',,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238',
'238,238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238',
',,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,238,238',
',,,238,238,239,239,239,,239,,,238,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,',
',,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239',
'239,239,239,,,,239,239,240,240,240,,240,,,239,240,240,,,,240,,240,240',
'240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240',
',,240,240,240,240,240,240,240,240,,240,240,240,,240,240,,240,240,240',
',,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,',
',240,240,240,240,240,240,,,,240,240,241,241,241,,241,,,240,241,241,',
',,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241',
',,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241,,241',
'241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241',
',,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,242,242,242,,242,',
',241,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242',
'242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242',
'242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242',
',,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,243,243,243',
',243,,,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243',
'243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243',
',243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243',
'243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243',
'244,244,244,,244,,,243,244,244,,,,244,,244,244,244,244,244,244,244,',
',,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244',
',,,244,244,245,245,245,,245,,,244,245,245,,,,245,,245,245,245,245,245',
'245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245',
'245,245,245,245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,',
',,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245',
'245,245,245,,,,245,245,246,246,246,,246,,,245,246,246,,,,246,,246,246',
'246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246',
',,246,246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246',
',,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,',
',246,246,246,246,246,246,,,,246,246,247,247,247,,247,,,246,247,247,',
',,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247',
',,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247',
'247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247',
',,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,248,248,248,,248,',
',247,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248',
'248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248',
'248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248',
',,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,249,249,249',
',249,,,248,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249',
'249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249',
',249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249',
'249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249',
'255,255,255,,255,,,249,255,255,,,,255,,255,255,255,255,255,255,255,',
',,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255',
'255,255,255,255,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,',
',255,,,255,,,255,255,,,255,,255,,255,,255,,,,,,,,255,,,,,255,255,255',
'255,255,255,,,,255,255,261,261,261,,261,,,255,261,261,,,,261,,261,261',
'261,261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261',
',,261,261,261,261,261,261,261,261,261,261,261,261,,261,261,,261,261',
'261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,261,,261,,261,,,,',
',,,261,,,,,261,261,261,261,261,261,,,,261,261,264,264,264,,264,,,261',
'264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264,264,264',
'264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,264,264,264',
'264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264',
',264,,264,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,264',
'271,271,271,,271,,264,,271,271,,,,271,,271,271,271,271,271,271,271,',
',,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271,271,271,271,271',
'271,271,271,,271,271,271,,271,271,,271,271,271,,,,,,,,,,,,,,,,,,,,271',
',,271,,,271,271,,,271,,,,,,271,,,,,,,,271,,,,,271,271,271,271,271,271',
',,,271,271,273,273,273,,273,,,271,273,273,,,,273,,273,273,273,273,273',
'273,273,,,,,,273,273,273,273,273,273,273,,,273,,,,,,,273,,,273,273,273',
'273,273,273,273,273,,273,273,273,,273,273,,273,273,273,,,,,,,,,,,,,',
',,,,,,273,,,273,,,273,273,,,273,,,,,,273,,,,,,,,273,,,,,273,273,273',
'273,273,273,,,,273,273,275,275,275,,275,,,273,275,275,,,,275,,275,275',
'275,275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,,,275',
',,275,275,275,275,275,275,275,275,,275,275,275,,275,275,,275,275,275',
',,,,,,,,,,,,,,,,,,,275,,,275,,,275,275,,,275,,,,,,275,,,,,,,,275,,,',
',275,275,275,275,275,275,,,,275,275,281,281,281,281,281,,,275,281,281',
',,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281,281,281',
',,281,,,,,,281,281,,281,281,281,281,281,281,281,281,281,,281,281,281',
',281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,',
'281,,,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281,281,287,287',
'287,,287,,,281,287,287,,,,287,,287,287,287,287,287,287,287,,,,,,287',
'287,287,287,287,287,287,,,287,,,,,,,287,,,287,287,287,287,287,287,287',
'287,,287,287,287,,287,287,,,,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287',
'287,,,287,,,,,,,,,,,,,,,,,,,287,287,287,287,287,287,,,,287,287,304,304',
'304,287,304,,,287,304,304,,,,304,,304,304,304,304,304,304,304,,,,,,304',
'304,304,304,304,304,304,,,304,,,,,,,304,,,304,304,304,304,304,304,304',
'304,,304,304,304,,304,304,,,,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304',
'304,,,304,,,,,,,,,,,,,,,,,,,304,304,304,304,304,304,,,,304,304,313,313',
'313,,313,,,304,313,313,,,,313,,313,313,313,313,313,313,313,,,,,,313',
'313,313,313,313,313,313,,,313,,,,,,,313,,,313,313,313,313,313,313,313',
'313,,313,313,313,,313,313,,313,313,313,,,,,,,,,,,,,,,,,,,,313,,,313',
'313,,313,313,,,313,,,,,,313,,,,,,,,313,,,,,313,313,313,313,313,313,',
',,313,313,330,330,330,,330,,,313,330,330,,,,330,,330,330,330,330,330',
'330,330,,,,,,330,330,330,330,330,330,330,,,330,,,,,,,330,,,330,330,330',
'330,330,330,330,330,,330,330,330,,330,330,,330,330,330,,,,,,,,,,,,,',
',,,,,,330,,,330,,,330,330,,,330,,,,,,330,,,,,,,,330,,,,,330,330,330',
'330,330,330,,,,330,330,331,331,331,,331,,,330,331,331,,,,331,,331,331',
'331,331,331,331,331,,,,,,331,331,331,331,331,331,331,,,331,,,,,,,331',
',,331,331,331,331,331,331,331,331,,331,331,331,,331,331,,331,331,331',
',,,,,,,,,,,,,,,,,,,331,,,331,,,331,331,,,331,,,,,,331,,,,,,,,331,,,',
',331,331,331,331,331,331,,,,331,331,343,343,343,,343,,,331,343,343,',
',,343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343',
',,343,,,,,,,343,,,343,343,343,343,343,343,343,343,,343,343,343,,343',
'343,,,,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,,,,,,,,,,,',
',,,,,,343,343,343,343,343,343,,,,343,343,345,345,345,,345,,,343,345',
'345,,,,345,,345,345,345,345,345,345,345,,,,,,345,345,345,345,345,345',
'345,,,345,,,,,,,345,,,345,345,345,345,345,345,345,345,,345,345,345,',
'345,345,,,,345,,,,,,,,,,,,,,,,,,,,345,,,345,,,345,345,,,345,,,,,,,,',
',,,,,,,,,,345,345,345,345,345,345,,,,345,345,397,397,397,,397,,,345',
'397,397,,,,397,,397,397,397,397,397,397,397,,,,,,397,397,397,397,397',
'397,397,,,397,,,,,,,397,,,397,397,397,397,397,397,397,397,,397,397,397',
',397,397,,397,397,397,,,,,,,,,,,,,,,,,,,,397,,,397,,,397,397,,,397,',
',,,,397,,,,,,,,397,,,,408,397,397,397,397,397,397,408,408,408,397,397',
'408,408,408,,408,,,397,,,,,,408,408,408,,,,,,,,,408,408,,408,408,408',
'408,408,,,,,,,,,,,,,,,,,,,,,,,,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,,,408,408,408,,,408,,408,408,,,408,408,,408,,408,,408',
',408,408,408,408,408,408,408,,408,408,408,,,,,,,,,,,,,408,408,,408,',
'408,435,435,435,,435,,,,435,435,,,,435,,435,435,435,435,435,435,435',
',,,,,435,435,435,435,435,435,435,,,435,,,,,,,435,,,435,435,435,435,435',
'435,435,435,435,435,435,435,,435,435,,435,435,435,,,,,,,,,,,,,,,,,,',
',435,,,435,,,435,435,,,435,,435,,435,,435,,,,,,,,435,,,,,435,435,435',
'435,435,435,,,,435,435,437,437,437,,437,,,435,437,437,,,,437,,437,437',
'437,437,437,437,437,,,,,,437,437,437,437,437,437,437,,,437,,,,,,,437',
',,437,437,437,437,437,437,437,437,,437,437,437,,437,437,,437,437,437',
',,,,,,,,,,,,,,,,,,,437,,,437,,,437,437,,,437,,,,,,437,,,,,,,,437,,,',
',437,437,437,437,437,437,,,,437,437,438,438,438,,438,,,437,438,438,',
',,438,,438,438,438,438,438,438,438,,,,,,438,438,438,438,438,438,438',
',,438,,,,,,,438,,,438,438,438,438,438,438,438,438,,438,438,438,,438',
'438,,438,438,438,,,,,,,,,,,,,,,,,,,,438,,,438,,,438,438,,,438,,,,,,438',
',,,,,,,438,,,,,438,438,438,438,438,438,,,,438,438,439,439,439,,439,',
',438,439,439,,,,439,,439,439,439,439,439,439,439,,,,,,439,439,439,439',
'439,439,439,,,439,,,,,,,439,,,439,439,439,439,439,439,439,439,,439,439',
'439,,439,439,,439,439,439,,,,,,,,,,,,,,,,,,,,439,,,439,,,439,439,,,439',
',,,,,439,,,,,,,,439,,,,467,439,439,439,439,439,439,467,467,467,439,439',
'467,467,467,,467,,,439,,,,,,,467,,,,,,,,,,467,467,,467,467,467,467,467',
',,,,,,,,,,,,470,,,,,,,470,470,470,,,470,470,470,,470,,,,,,467,,,,470',
',,467,,,,,467,467,470,470,,470,470,470,470,470,,,,,,,,,,,,,,467,,,,',
',,,,,,,,467,,,,,467,,,470,,,,,,,470,,,,,470,470,,,,,,,,,,,,,,,,,,,,',
',470,,,,,,481,481,481,,481,,,470,481,481,,,470,481,,481,481,481,481',
'481,481,481,,,,,,481,481,481,481,481,481,481,,,481,,,,,,,481,,,481,481',
'481,481,481,481,481,481,481,481,481,481,,481,481,,481,481,481,,,,,,',
',,,,,,,,,,,,,481,,,481,,,481,481,,,481,,481,,481,,481,,,,,,,,481,,,',
',481,481,481,481,481,481,,,,481,481,484,484,484,,484,,,481,484,484,',
',,484,,484,484,484,484,484,484,484,,,,,,484,484,484,484,484,484,484',
',,484,,,,,,,484,,,484,484,484,484,484,484,484,484,484,484,484,484,,484',
'484,,484,484,484,,,,,,,,,,,,,,,,,,,,484,,,484,,,484,484,,,484,,,,484',
',484,,,,,,,,484,,,,,484,484,484,484,484,484,,,,484,484,486,486,486,',
'486,,,484,486,486,,,,486,,486,486,486,486,486,486,486,,,,,,486,486,486',
'486,486,486,486,,,486,,,,,,,486,,,486,486,486,486,486,486,486,486,,486',
'486,486,,486,486,,486,486,486,,,,,,,,,,,,,,,,,,,,486,,,486,,,486,486',
',,486,,,,,,486,,,,,,,,486,,,,,486,486,486,486,486,486,,,,486,486,490',
'490,490,490,490,,,486,490,490,,,,490,,490,490,490,490,490,490,490,,',
',,,490,490,490,490,490,490,490,,,490,,,,,,490,490,,490,490,490,490,490',
'490,490,490,490,,490,490,490,,490,490,,490,490,490,,,,,,,,,,,,,,,,,',
',,490,,,490,,,490,490,,,490,,490,,,,490,,,,,,,,490,,,,,490,490,490,490',
'490,490,,,,490,490,497,497,497,,497,490,,490,497,497,,,,497,,497,497',
'497,497,497,497,497,,,,,,497,497,497,497,497,497,497,,,497,,,,,,,497',
',,497,497,497,497,497,497,497,497,,497,497,497,,497,497,,,,497,,,,,',
',,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,,,,,,,,,,,,,,,,,,497,497,497',
'497,497,497,,,,497,497,499,499,499,,499,,,497,499,499,,,,499,,499,499',
'499,499,499,499,499,,,,,,499,499,499,499,499,499,499,,,499,,,,,,,499',
',,499,499,499,499,499,499,499,499,499,499,499,499,,499,499,,499,499',
'499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499,,499,,499,,499,,,,',
',,,499,,,,,499,499,499,499,499,499,,,,499,499,506,506,506,,506,,,499',
'506,506,,,,506,,506,506,506,506,506,506,506,,,,,,506,506,506,506,506',
'506,506,,,506,,,,,,,506,,,506,506,506,506,506,506,506,506,,506,506,506',
',506,506,,,,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,,,,,,',
',,,,,,,,,,,506,506,506,506,506,506,,,,506,506,509,509,509,,509,,,506',
'509,509,,,,509,,509,509,509,509,509,509,509,,,,,,509,509,509,509,509',
'509,509,,,509,,,,,,,509,,,509,509,509,509,509,509,509,509,,509,509,509',
',509,509,,509,509,509,,,,,,,,,,,,,,,,,,,,509,,,509,,,509,509,,,509,',
',,,,509,,,,,,,,509,,,,,509,509,509,509,509,509,,,,509,509,510,510,510',
',510,,,509,510,510,,,,510,,510,510,510,510,510,510,510,,,,,,510,510',
'510,510,510,510,510,,,510,,,,,,,510,,,510,510,510,510,510,510,510,510',
',510,510,510,,510,510,,510,510,510,,,,,,,,,,,,,,,,,,,,510,,,510,,,510',
'510,,,510,,,,,,510,,,,,,,,510,,,,,510,510,510,510,510,510,,,,510,510',
'511,511,511,,511,,,510,511,511,,,,511,,511,511,511,511,511,511,511,',
',,,,511,511,511,511,511,511,511,,,511,,,,,,,511,,,511,511,511,511,511',
'511,511,511,,511,511,511,,511,511,,511,511,511,,,,,,,,,,,,,,,,,,,,511',
',,511,,,511,511,,,511,,,,,,511,,,,,,,,511,,,,,511,511,511,511,511,511',
',,,511,511,515,515,515,,515,,,511,515,515,,,,515,,515,515,515,515,515',
'515,515,,,,,,515,515,515,515,515,515,515,,,515,,,,,,,515,,,515,515,515',
'515,515,515,515,515,,515,515,515,,515,515,,515,515,515,,,,,,,,,,,,,',
',,,,,,515,,,515,,,515,515,,,515,,,,,,515,,,,,,,,515,,,,,515,515,515',
'515,515,515,,,,515,515,520,520,520,,520,,,515,520,520,,,,520,,520,520',
'520,520,520,520,520,,,,,,520,520,520,520,520,520,520,,,520,,,,,,,520',
',,520,520,520,520,520,520,520,520,520,520,520,520,,520,520,,520,520',
'520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,,520,,520,,,,520,,,,,,,',
'520,,,,,520,520,520,520,520,520,,,,520,520,523,523,523,,523,,,520,523',
'523,,,,523,,523,523,523,523,523,523,523,,,,,,523,523,523,523,523,523',
'523,,,523,,,,,,,523,,,523,523,523,523,523,523,523,523,523,523,523,523',
',523,523,,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523,523,,,523,',
',,,,523,,,,,,,,523,,,,,523,523,523,523,523,523,,,,523,523,559,559,559',
',559,,,523,559,559,,,,559,,559,559,559,559,559,559,559,,,,,,559,559',
'559,559,559,559,559,,,559,,,,,,,559,,,559,559,559,559,559,559,559,559',
'559,559,559,559,,559,559,,559,559,559,,,,,,,,,,,,,,,,,,,,559,,,559,',
',559,559,,,559,,559,,559,,559,,,,,,,,559,,,,,559,559,559,559,559,559',
',,,559,559,571,571,571,,571,,,559,571,571,,,,571,,571,571,571,571,571',
'571,571,,,,,,571,571,571,571,571,571,571,,,571,,,,,,,571,,,571,571,571',
'571,571,571,571,571,,571,571,571,,571,571,,571,571,571,,,,,,,,,,,,,',
',,,,,,571,,,571,,,571,571,,,571,,,,,,571,,,,,,,,571,,,,,571,571,571',
'571,571,571,,,,571,571,577,577,577,,577,,,571,577,577,,,,577,,577,577',
'577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,,577,,,,,,,577',
',,577,577,577,577,577,577,577,577,,577,577,577,,577,577,,577,577,577',
',,,,,,,,,,,,,,,,,,,577,,,577,,,577,577,,,577,,,,,,577,,,,,,,,577,,,',
',577,577,577,577,577,577,,,,577,577,600,600,600,,600,,,577,600,600,',
',,600,,600,600,600,600,600,600,600,,,,,,600,600,600,600,600,600,600',
',,600,,,,,,,600,,,600,600,600,600,600,600,600,600,,600,600,600,,600',
'600,,600,600,600,,,,,,,,,,,,,,,,,,,,600,,,600,,,600,600,,,600,,600,',
',,600,,,,,,,,600,,,,,600,600,600,600,600,600,,,,600,600,601,601,601',
',601,,,600,601,601,,,,601,,601,601,601,601,601,601,601,,,,,,601,601',
'601,601,601,601,601,,,601,,,,,,,601,,,601,601,601,601,601,601,601,601',
',601,601,601,,601,601,,601,601,601,,,,,,,,,,,,,,,,,,,,601,,,601,,,601',
'601,,,601,,,,,,601,,,,,,,,601,,,,,601,601,601,601,601,601,,,,601,601',
'604,604,604,,604,,,601,604,604,,,,604,,604,604,604,604,604,604,604,',
',,,,604,604,604,604,604,604,604,,,604,,,,,,,604,,,604,604,604,604,604',
'604,604,604,604,604,604,604,,604,604,,604,604,604,,,,,,,,,,,,,,,,,,',
',604,,,604,,,604,604,,,604,,604,,604,,604,,,,,,,,604,,,,,604,604,604',
'604,604,604,,,,604,604,605,605,605,,605,,,604,605,605,,,,605,,605,605',
'605,605,605,605,605,,,,,,605,605,605,605,605,605,605,,,605,,,,,,,605',
',,605,605,605,605,605,605,605,605,605,605,605,605,,605,605,,605,605',
'605,,,,,,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605,,,,605,,605,,,,,,,',
'605,,,,,605,605,605,605,605,605,,,,605,605,606,606,606,,606,,,605,606',
'606,,,,606,,606,606,606,606,606,606,606,,,,,,606,606,606,606,606,606',
'606,,,606,,,,,,,606,,,606,606,606,606,606,606,606,606,,606,606,606,',
'606,606,,606,606,606,,,,,,,,,,,,,,,,,,,,606,,,606,,,606,606,,,606,,',
',,,606,,,,,,,,606,,,,,606,606,606,606,606,606,,,,606,606,607,607,607',
',607,,,606,607,607,,,,607,,607,607,607,607,607,607,607,,,,,,607,607',
'607,607,607,607,607,,,607,,,,,,,607,,,607,607,607,607,607,607,607,607',
',607,607,607,,607,607,,607,607,607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607',
'607,,,607,,,,,,607,,,,,,,,607,,,,,607,607,607,607,607,607,,,,607,607',
'612,612,612,,612,,,607,612,612,,,,612,,612,612,612,612,612,612,612,',
',,,,612,612,612,612,612,612,612,,,612,,,,,,,612,,,612,612,612,612,612',
'612,612,612,,612,612,612,,612,612,,612,612,612,,,,,,,,,,,,,,,,,,,,612',
',,612,,,612,612,,,612,,,,,,612,,,,,,,,612,,,,,612,612,612,612,612,612',
',,,612,612,613,613,613,,613,,,612,613,613,,,,613,,613,613,613,613,613',
'613,613,,,,,,613,613,613,613,613,613,613,,,613,,,,,,,613,,,613,613,613',
'613,613,613,613,613,,613,613,613,,613,613,,613,613,613,,,,,,,,,,,,,',
',,,,,,613,,,613,,,613,613,,,613,,,,,,613,,,,,,,,613,,,,,613,613,613',
'613,613,613,,,,613,613,616,616,616,,616,,,613,616,616,,,,616,,616,616',
'616,616,616,616,616,,,,,,616,616,616,616,616,616,616,,,616,,,,,,,616',
',,616,616,616,616,616,616,616,616,,616,616,616,,616,616,,616,616,616',
',,,,,,,,,,,,,,,,,,,616,,,616,,,616,616,,,616,,,,,,616,,,,,,,,616,,,',
',616,616,616,616,616,616,,,,616,616,617,617,617,,617,,,616,617,617,',
',,617,,617,617,617,617,617,617,617,,,,,,617,617,617,617,617,617,617',
',,617,,,,,,,617,,,617,617,617,617,617,617,617,617,,617,617,617,,617',
'617,,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617,,,,,,617',
',,,,,,,617,,,,,617,617,617,617,617,617,,,,617,617,644,644,644,,644,',
',617,644,644,,,,644,,644,644,644,644,644,644,644,,,,,,644,644,644,644',
'644,644,644,,,644,,,,,,,644,,,644,644,644,644,644,644,644,644,,644,644',
'644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644',
',,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644,644,649,649,649',
',649,,,644,649,649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649',
'649,649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649',
',649,649,649,,649,649,,,,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649',
',,649,,,,,,,,,,,,,,,,,,,649,649,649,649,649,649,,,,649,649,660,660,660',
',660,,,649,660,660,,,,660,,660,660,660,660,660,660,660,,,,,,660,660',
'660,660,660,660,660,,,660,,,,,,,660,,,660,660,660,660,660,660,660,660',
',660,660,660,,660,660,,,,660,,,,,,,,,,,,,,,,,,,,660,,,660,,,660,660',
',,660,,,,,,,,,,,,,,,,,,,660,660,660,660,660,660,,,,660,660,666,666,666',
',666,,,660,666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666,666',
'666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666,666',
',666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666',
'666,,,666,,666,,,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666',
'666,680,680,680,,680,,,666,680,680,,,,680,,680,680,680,680,680,680,680',
',,,,,680,680,680,680,680,680,680,,,680,,,,,,,680,,,680,680,680,680,680',
'680,680,680,,680,680,680,,680,680,,680,680,680,,,,,,,,,,,,,,,,,,,,680',
',,680,,,680,680,,,680,,,,,,680,,,,,,,,680,,,,,680,680,680,680,680,680',
',,,680,680,699,699,699,,699,,,680,699,699,,,,699,,699,699,699,699,699',
'699,699,,,,,,699,699,699,699,699,699,699,,,699,,,,,,,699,,,699,699,699',
'699,699,699,699,699,,699,699,699,,699,699,,699,699,699,,,,,,,,,,,,,',
',,,,,,699,,,699,,,699,699,,,699,,699,,,,699,,,,,,,,699,,,,,699,699,699',
'699,699,699,,,,699,699,705,705,705,,705,,,699,705,705,,,,705,,705,705',
'705,705,705,705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,,,705',
',,705,705,705,705,705,705,705,705,,705,705,705,,705,705,,705,705,705',
',,,,,,,,,,,,,,,,,,,705,,,705,,,705,705,,,705,,,,,,705,,,,,,,,705,,,',
',705,705,705,705,705,705,,,,705,705,711,711,711,,711,,,705,711,711,',
',,711,,711,711,711,711,711,711,711,,,,,,711,711,711,711,711,711,711',
',,711,,,,,,,711,,,711,711,711,711,711,711,711,711,711,711,711,711,,711',
'711,,711,711,711,,,,,,,,,,,,,,,,,,,,711,,,711,,,711,711,,,711,,711,',
'711,,711,,,,,,,,711,,,,,711,711,711,711,711,711,,,,711,711,731,731,731',
',731,,,711,731,731,,,,731,,731,731,731,731,731,731,731,,,,,,731,731',
'731,731,731,731,731,,,731,,,,,,,731,,,731,731,731,731,731,731,731,731',
',731,731,731,,731,731,,731,731,731,,,,,,,,,,,,,,,,,,,,731,,,731,,,731',
'731,,,731,,,,,,731,,,,,,,,731,,,,,731,731,731,731,731,731,,,,731,731',
'733,733,733,,733,,,731,733,733,,,,733,,733,733,733,733,733,733,733,',
',,,,733,733,733,733,733,733,733,,,733,,,,,,,733,,,733,733,733,733,733',
'733,733,733,,733,733,733,,733,733,,733,733,733,,,,,,,,,,,,,,,,,,,,733',
',,733,,,733,733,,,733,,,,,,733,,,,,,,,733,,,,,733,733,733,733,733,733',
',,,733,733,747,747,747,,747,,,733,747,747,,,,747,,747,747,747,747,747',
'747,747,,,,,,747,747,747,747,747,747,747,,,747,,,,,,,747,,,747,747,747',
'747,747,747,747,747,,747,747,747,,747,747,,747,747,747,,,,,,,,,,,,,',
',,,,,,747,,,747,,,747,747,,,747,,,,,,747,,,,,,,,747,,,,,747,747,747',
'747,747,747,,,,747,747,748,748,748,,748,,,747,748,748,,,,748,,748,748',
'748,748,748,748,748,,,,,,748,748,748,748,748,748,748,,,748,,,,,,,748',
',,748,748,748,748,748,748,748,748,,748,748,748,,748,748,,748,748,748',
',,,,,,,,,,,,,,,,,,,748,,,748,,,748,748,,,748,,,,,,748,,,,,,,,748,,,',
',748,748,748,748,748,748,,,,748,748,749,749,749,,749,,,748,749,749,',
',,749,,749,749,749,749,749,749,749,,,,,,749,749,749,749,749,749,749',
',,749,,,,,,,749,,,749,749,749,749,749,749,749,749,,749,749,749,,749',
'749,,749,749,749,,,,,,,,,,,,,,,,,,,,749,,,749,,,749,749,,,749,,,,,,749',
',,,,,,,749,,,,,749,749,749,749,749,749,,,,749,749,750,750,750,,750,',
',749,750,750,,,,750,,750,750,750,750,750,750,750,,,,,,750,750,750,750',
'750,750,750,,,750,,,,,,,750,,,750,750,750,750,750,750,750,750,,750,750',
'750,,750,750,,750,750,750,,,,,,,,,,,,,,,,,,,,750,,,750,,,750,750,,,750',
',,,,,750,,,,,,,,750,,,,,750,750,750,750,750,750,,,,750,750,752,752,752',
',752,,,750,752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752',
'752,752,752,752,752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752',
',752,752,752,,752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752',
'752,,,752,,,,,,752,,,,,,,,752,,,,,752,752,752,752,752,752,,,,752,752',
'800,800,800,,800,,,752,800,800,,,,800,,800,800,800,800,800,800,800,',
',,,,800,800,800,800,800,800,800,,,800,,,,,,,800,,,800,800,800,800,800',
'800,800,800,,800,800,800,,800,800,,800,800,800,,,,,,,,,,,,,,,,,,,,800',
',,800,,,800,800,,,800,,,,,,800,,,,,,,,800,,,,,800,800,800,800,800,800',
',,,800,800,813,813,813,,813,,,800,813,813,,,,813,,813,813,813,813,813',
'813,813,,,,,,813,813,813,813,813,813,813,,,813,,,,,,,813,,,813,813,813',
'813,813,813,813,813,,813,813,813,,813,813,,813,813,813,,,,,,,,,,,,,',
',,,,,,813,,,813,,,813,813,,,813,,,,,,813,,,,,,,,813,,,,,813,813,813',
'813,813,813,,,,813,813,831,831,831,,831,,,813,831,831,,,,831,,831,831',
'831,831,831,831,831,,,,,,831,831,831,831,831,831,831,,,831,,,,,,,831',
',,831,831,831,831,831,831,831,831,831,831,831,831,,831,831,,831,831',
'831,,,,,,,,,,,,,,,,,,,,831,,,831,,,831,831,,,831,,,,831,,831,,,,,,,',
'831,,,,,831,831,831,831,831,831,,,,831,831,832,832,832,,832,,,831,832',
'832,,,,832,,832,832,832,832,832,832,832,,,,,,832,832,832,832,832,832',
'832,,,832,,,,,,,832,,,832,832,832,832,832,832,832,832,,832,832,832,',
'832,832,,832,832,832,,,,,,,,,,,,,,,,,,,,832,,,832,,,832,832,,,832,,',
',,,832,,,,,,,,832,,,,,832,832,832,832,832,832,,,,832,832,846,846,846',
',846,,,832,846,846,,,,846,,846,846,846,846,846,846,846,,,,,,846,846',
'846,846,846,846,846,,,846,,,,,,,846,,,846,846,846,846,846,846,846,846',
',846,846,846,,846,846,,,,846,,,,,,,,,,,,,,,,,,,,846,,,846,,,846,846',
',,846,,,,,,,,,,,,,,,,,,,846,846,846,846,846,846,,,,846,846,856,856,856',
',856,,,846,856,856,,,,856,,856,856,856,856,856,856,856,,,,,,856,856',
'856,856,856,856,856,,,856,,,,,,,856,,,856,856,856,856,856,856,856,856',
',856,856,856,,856,856,,,,856,,,,,,,,,,,,,,,,,,,,856,,,856,,,856,856',
',,856,,,,,,,,,,,,,,,,,,,856,856,856,856,856,856,,,,856,856,880,880,880',
',880,,,856,880,880,,,,880,,880,880,880,880,880,880,880,,,,,,880,880',
'880,880,880,880,880,,,880,,,,,,,880,,,880,880,880,880,880,880,880,880',
',880,880,880,,880,880,,880,880,880,,,,,,,,,,,,,,,,,,,,880,,,880,,,880',
'880,,,880,,880,,,,880,,,,,,,,880,,,,,880,880,880,880,880,880,,,,880',
'880,945,945,945,,945,,,880,945,945,,,,945,,945,945,945,945,945,945,945',
',,,,,945,945,945,945,945,945,945,,,945,,,,,425,,945,,,945,945,945,945',
'945,945,945,945,945,945,945,945,,945,945,,945,945,945,425,425,425,425',
'425,425,425,425,425,425,425,,425,425,,,425,425,,945,,,945,,,945,945',
',,945,,945,425,945,425,945,425,425,425,425,425,425,425,945,425,,,,945',
'945,945,945,945,945,,,,945,945,,425,,425,,,,945,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11',
'11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11',
',11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11',
'11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12',
'12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12',
',12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12',
'12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,388,388,388,388,388',
'388,388,388,388,388,388,388,388,388,388,388,388,388,388,388,388,388',
'388,388,,,,388,388,388,388,388,388,388,388,388,388,,,,,,388,388,388',
'388,388,388,388,388,388,,,388,,,,,,,,,388,388,,388,388,388,388,388,388',
'388,,,388,388,,,,388,388,388,388,,,,,,,,,,,,,,388,388,,388,388,388,388',
'388,388,388,388,388,388,388,,,388,388,,,,,,,,,,388,597,597,597,597,597',
'597,597,597,597,597,597,597,597,597,597,597,597,597,597,597,597,597',
'597,597,,,,597,597,597,597,597,597,597,597,597,597,,,,,,597,597,597',
'597,597,597,597,597,597,,,597,,,,,,,,,597,597,,597,597,597,597,597,597',
'597,,,597,597,,,,597,597,597,597,,,,,,,,,,,,,,597,597,,597,597,597,597',
'597,597,597,597,597,597,597,,,597,597,,,,,,,,,,597,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,,,,71,71,71,71',
'71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,71,71,71,71,71,,71,,,,,',
',71,71,,71,71,71,71,71,71,71,,,71,71,,,,71,71,71,71,,,,,,71,,,,,,,,71',
'71,,71,71,71,71,71,71,71,71,71,71,71,,,71,85,85,85,85,85,85,85,85,85',
'85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,,,,85,85,85,85,85,85,85',
'85,85,85,,,,,,85,85,85,85,85,85,85,85,85,85,85,85,,85,,,,,,,85,85,,85',
'85,85,85,85,85,85,,,85,85,,,,85,85,85,85,,,,,,,,,,,,,,85,85,,85,85,85',
'85,85,85,85,85,85,85,85,,,85,721,721,721,721,721,721,721,721,721,721',
'721,721,721,721,721,721,721,721,721,721,721,721,721,721,,,,721,721,721',
'721,721,721,721,721,721,721,,,,,,721,721,721,721,721,721,721,721,721',
',,721,,,,,,,,,721,721,,721,721,721,721,721,721,721,,,721,721,,,,721',
'721,721,721,,,,,,,625,,,,,,,721,721,,721,721,721,721,721,721,721,721',
'721,721,721,,,721,625,625,625,625,625,625,625,625,625,625,625,,625,625',
',,625,625,,,,,,,,,,,,,,,625,,625,,625,625,625,625,625,625,625,,625,203',
'203,,,203,,,,,,,,,203,203,625,203,203,203,203,203,203,203,,,203,203',
',,,203,203,203,203,,,,,,203,,,,,,,,203,203,,203,203,203,203,203,203',
'203,203,203,203,203,204,204,203,,204,,,,,,,,,204,204,,204,204,204,204',
'204,204,204,,,204,204,,,,204,204,204,204,,,,,,204,,,,,,,,204,204,,204',
'204,204,204,204,204,204,204,204,204,204,252,252,204,,252,,,,,,,,,252',
'252,,252,252,252,252,252,252,252,,,252,252,,,,252,252,252,252,,,,,,',
',,,,,,,252,252,,252,252,252,252,252,252,252,252,252,252,252,253,253',
'252,,253,,,,,,,,,253,253,,253,253,253,253,253,253,253,,,253,253,,,,253',
'253,253,253,,,,,,,,,,,,,,253,253,,253,253,253,253,253,253,253,253,253',
'253,253,433,433,253,,433,,,,,,,,,433,433,,433,433,433,433,433,433,433',
',,433,433,,,,433,433,433,433,,,,,,433,,,,,,,,433,433,,433,433,433,433',
'433,433,433,433,433,433,433,434,434,433,,434,,,,,,,,,434,434,,434,434',
'434,434,434,434,434,,,434,434,,,,434,434,434,434,,,,,,434,,,,,,,,434',
'434,,434,434,434,434,434,434,434,434,434,434,434,500,500,434,,500,,',
',,,,,,500,500,,500,500,500,500,500,500,500,,,500,500,,,,500,500,500',
'500,,,,,,500,,,,,,,,500,500,,500,500,500,500,500,500,500,500,500,500',
'500,501,501,500,,501,,,,,,,,,501,501,,501,501,501,501,501,501,501,,',
'501,501,,,,501,501,501,501,,,,,,501,,,,,,,,501,501,,501,501,501,501',
'501,501,501,501,501,501,501,512,512,501,,512,,,,,,,,,512,512,,512,512',
'512,512,512,512,512,,,512,512,,,,512,512,512,512,,,,,,512,,,,,,,,512',
'512,,512,512,512,512,512,512,512,512,512,512,512,513,513,512,,513,,',
',,,,,,513,513,,513,513,513,513,513,513,513,,,513,513,,,,513,513,513',
'513,,,,,,513,,,,,,,,513,513,,513,513,513,513,513,513,513,513,513,513',
'513,560,560,513,,560,,,,,,,,,560,560,,560,560,560,560,560,560,560,,',
'560,560,,,,560,560,560,560,,,,,,560,,,,,,,,560,560,,560,560,560,560',
'560,560,560,560,560,560,560,561,561,560,,561,,,,,,,,,561,561,,561,561',
'561,561,561,561,561,,,561,561,,,,561,561,561,561,,,,,,561,,,,,,,,561',
'561,,561,561,561,561,561,561,561,561,561,561,561,709,709,561,,709,,',
',,,,,,709,709,,709,709,709,709,709,709,709,,,709,709,,,,709,709,709',
'709,,,,,,709,,,,,,,,709,709,,709,709,709,709,709,709,709,709,709,709',
'709,710,710,709,,710,,,,,,,,,710,710,,710,710,710,710,710,710,710,,',
'710,710,,,,710,710,710,710,,,,,,710,,,,,,,,710,710,,710,710,710,710',
'710,710,710,710,710,710,710,941,941,710,,941,,,,,,,,,941,941,,941,941',
'941,941,941,941,941,,,941,941,,,,941,941,941,941,,,,,,941,,,,,,,,941',
'941,,941,941,941,941,941,941,941,941,941,941,941,946,946,941,,946,,',
',,,,,,946,946,,946,946,946,946,946,946,946,,,946,946,,,,946,946,946',
'946,,,,,,946,,,,,,,,946,946,,946,946,946,946,946,946,946,946,946,946',
'946,947,947,946,,947,,,,,,,,,947,947,,947,947,947,947,947,947,947,,',
'947,947,,,,947,947,947,947,,,,,,947,,,,,,,,947,947,,947,947,947,947',
'947,947,947,947,947,947,947,,,947,24,24,24,24,24,24,24,24,24,24,24,',
'24,24,,,24,24,,,,,,,,,,,,,,,24,,24,,24,24,24,24,24,24,24,,24,266,266',
'266,266,266,266,266,266,266,266,266,,266,266,,24,266,266,,,,,,,,,,,',
',,,266,,266,,266,266,266,266,266,266,266,,266,420,420,420,420,420,420',
'420,420,420,420,420,,420,420,,266,420,420,,,,,,,,,,,,,,,420,,420,,420',
'420,420,420,420,420,420,,420,465,465,465,465,465,465,465,465,465,465',
'465,,465,465,,420,465,465,,,,,,,,,,,,,,,465,,465,,465,465,465,465,465',
'465,465,,465,514,514,514,514,514,514,514,514,514,514,514,,514,514,465',
'465,514,514,,,,,,,,,,,,,,,514,,514,,514,514,514,514,514,514,514,,514',
'661,661,661,661,661,661,661,661,661,661,661,,661,661,,514,661,661,,',
',,,,,,,,,,,,661,,661,,661,661,661,661,661,661,661,,661,732,732,732,732',
'732,732,732,732,732,732,732,,732,732,,661,732,732,,,,,,,,,,,,,,,732',
',732,,732,732,732,732,732,732,732,,732,737,737,737,737,737,737,737,737',
'737,737,737,,737,737,,732,737,737,,,,,,,,,,,,,,,737,,737,,737,737,737',
'737,737,737,737,,737,739,739,739,739,739,739,739,739,739,739,739,,739',
'739,,737,739,739,,,,,,,,,,,,,,,739,,739,,739,739,739,739,739,739,739',
',739,742,742,742,742,742,742,742,742,742,742,742,,742,742,,739,742,742',
',,,,,,,,,,,,,,742,,742,,742,742,742,742,742,742,742,,742,744,744,744',
'744,744,744,744,744,744,744,744,,744,744,,742,744,744,,,,,,,,,,,,,,',
'744,,744,,744,744,744,744,744,744,744,,744,746,746,746,746,746,746,746',
'746,746,746,746,,746,746,,744,746,746,,,,,,,,,,,,,,,746,,746,,746,746',
'746,746,746,746,746,,746,830,830,830,830,830,830,830,830,830,830,830',
',830,830,,746,830,830,,,,,,,,,,,,,,,830,,830,,830,830,830,830,830,830',
'830,,830,833,833,833,833,833,833,833,833,833,833,833,,833,833,,830,833',
'833,,,,,,,,,,,,,,,833,,833,,833,833,833,833,833,833,833,,833,,,,,,,',
',,,,,,,,833' ]
        racc_action_check = arr = ::Array.new(23644, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   100,     0,   122,   nil,    64,   nil,   nil,  4788,  1289,
   nil, 21076, 21200,    33,   nil,    24,   105,   355,   301,    76,
   280,   nil,    65,  4912, 22931,   203,   nil,   230,   197,  5026,
  5151,  5281,  5405,  5529,   nil,  1164,  5653,  5777,   nil,   143,
   380,   426,   271,   495,  5901,  6025,  6149,   224,   357,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   770,   nil,  6273,  6397,
  6521,     0,   nil,  6645,  6769,   nil,   nil,  6893,  7019,   299,
   nil, 21572,   nil,   nil,   nil,   nil,   nil,   189,   nil,   nil,
   nil,   nil,   nil,   270,   285, 21685,   nil,   nil,   nil,     0,
   nil,   nil,   130,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  7143,   nil,   nil,   nil,   nil,
  7267,  7391,  7515,  7639,  7763,   322,   nil,   253,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   346,   nil,  1289,
  7887,  8011,  8135, 21907, 21968,  8259,  8383,  8507,  8631,  8755,
  8879,   nil,   nil,   454,   296,   350,   475,   386,   435,   489,
   nil,  9004,  1414,   501,  9128,  9252,  9376,  9500,  9624,  9748,
  9872,  9996, 10120, 10244, 10368, 10492, 10616, 10740, 10864, 10988,
 11112, 11236, 11360, 11484, 11608, 11732, 11856, 11980, 12104, 12228,
   nil,   nil, 22029, 22090,   502, 12352,   nil,   530,   nil,   nil,
   nil, 12476,   nil,   nil, 12600,   nil, 22976,   nil,   521,   531,
   nil, 12725,   587, 12849,   nil, 12973,   nil,   nil,   503,   nil,
  1330, 13097,   543,  1539,   566,   609,   577, 13221,  1664,   609,
   611,   644,   675,   687,   nil,   642,   610,    56,   nil,   nil,
   nil,   650,   602,   621, 13345,   nil,   467,   695,   697,   817,
   nil,   709,   nil, 13469,  1789,   756,   nil,   288,   317,   699,
   692,   nil,   348,   731,   nil,   nil,   474,   767,    48,    51,
 13593, 13717,   520,   806,   699,    90,    99,   908,   781,   116,
   838,   nil,   nil, 13841,   nil, 13965,   270,   299,   312,   338,
   455,   456,   481,   547,   695,   nil,   730,   nil,   nil,   nil,
   nil,   nil,   359,   nil,   378,   nil,   235,   nil,   743,   381,
   nil,   745,    93,   nil,   385,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1914, 21324,   nil,
   nil,   nil,   nil,   757,   nil,   743,   nil, 14089,   751,   nil,
  6893,   777,   nil,   nil,   781,   794,   471,   555, 14203,   nil,
   nil,   nil,   260,   385,   834,   nil,   nil,   900,  1030,   nil,
 23021,   nil,   798,   nil,   nil, 20944,   nil,   nil,   nil,   nil,
   114,   nil,   843, 22151, 22212, 14333,   408, 14457, 14581, 14705,
  1914,  2039,   566,   790,   868,   871,   878,   882,  3664,  3789,
  3914,  2164,  2289,  2414,  2539,  2664,  2789,  2914,  3039,  3164,
  3289,   303,   855,  3414,  3539, 23066,    66, 14819,   nil,   nil,
 14875,   nil,   nil,   nil,   nil,    85,   103,   840,   855,   nil,
   nil, 14992,   nil,   nil, 15116,   nil, 15240,   nil,   nil,   nil,
 15364,  1414,   861,   860,   nil,   nil,   861, 15488,   866, 15612,
 22273, 22334,   947,   906,   nil,   nil, 15736,   869,   nil, 15860,
 15984, 16108, 22395, 22456, 23111, 16232,   993,  1001,   889,   nil,
 16356,   nil,   nil, 16480,   nil,   nil,   nil,    62,   701,   nil,
   890,   892,   893,   nil,   nil,   nil,   nil,   nil,   nil,   888,
   nil,   514,   nil,   nil,   nil,   nil,   973,   nil,   nil,   982,
  2039,  1023,   nil,  2164,   121,   122,  1020,  1031,   nil, 16604,
 22517, 22578,   152,   nil,   229,   268,   580,   nil,   990,   nil,
    55, 16728,   nil,   734,   nil,   nil,   nil, 16852,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   282,
   nil,   nil,   nil,   920,   nil,   940,   nil, 21448,   nil,   925,
 16976, 17100,   556,   964, 17224, 17348, 17472, 17596,   963,   nil,
   nil,   nil, 17720, 17844,   964,   nil, 17968, 18092,   nil,   nil,
   457,   473,   510,   640,   936, 21846,   937,   nil,   nil,   573,
   nil,   nil,   nil,   nil,   nil,   nil,   195,   nil,   nil,   nil,
   nil,   950,   nil,   993, 18216,   nil,   nil,  1442,   276, 18340,
   953,   nil,   960,    58,    97,  1000,   354,  1038,  1006,   982,
 18464, 23156,  1050,  1052,   226,  1106, 18588,   nil,   nil,   416,
   nil,  2289,  2414,   991,   831,   nil,   864,   nil,   nil,   963,
 18712,   nil,   604,   nil,   997,   267,   nil,  1004,   nil,   nil,
   846,   nil,  1126,   nil,   nil,   nil,   nil,  1136,   nil, 18836,
  1022,   156,   159,   196,   220, 18960,   nil,  1066,   nil, 22639,
 22700, 19084,   nil,   nil,   nil,   595,   854,  2539,  2664,   994,
   695, 21798,   255,   898,  2789,   nil,   nil,   nil,   nil,   nil,
  1020, 19208, 23201, 19332,   nil,  1021,   nil, 23246,   nil, 23291,
   nil,   nil, 23336,   nil, 23381,   nil, 23426, 19456, 19580, 19704,
 19828,   475, 19952,  1023,  1026,  1042,   nil,  1063,  1045,   nil,
  1034,  1042,   nil,  2914,   nil,  3039,  3164,   nil,   nil,  1049,
   335,   nil,   nil,  1180,   nil,  3289,  1061,  1103,   nil,   nil,
   nil,  1079,  1191,  1080,  1081,  1095,   nil,   nil,  1104,  1105,
   nil,  1115,   nil,  1120,   644,  1119,   706,   nil,  1240,   nil,
 20076,  1245,  3414,  3539,   nil,   120,   161,   163,   393,  1142,
   nil,  1129,  3664, 20200,   nil,   725,  1249,  1250,  1137,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1151,  1136,   nil,
 23471, 20324, 20448, 23516,  1216,   nil,  1341,   nil,   nil,  1186,
   nil,  1159,  1143,   nil,   nil,   nil, 20572,  1267,  3789,  1164,
  1269,   nil,  3914,   nil,   nil,   124, 20696,   nil,   nil,   nil,
   nil,  1466,   nil,   nil,  1311,   nil,  1436,   nil,  1561,   nil,
   nil,   nil,   321,   763,  1156,   nil,   140,   nil,  1287,  1289,
 20820,  4039,   nil,   nil,  1292,   761,   nil,   nil,   nil,   nil,
  4958,   nil,  1173,  1174,  1184,  1196,   nil,  1197,   nil,  1150,
  1068,  1280,   nil,  1236,   nil,   nil,   nil,  4164,  1069,  1095,
  1153,  1301,  1157,   nil,  1229,  1230,  1231,  1234,  1238,   774,
  1245,   893,  4289,   nil,   nil,   nil,   672,  4414,   nil,   nil,
  4539,  4664,  1591,   nil,   nil,  1686,   nil,  1714,   nil,   nil,
   nil, 22761,   nil,   nil,  1369, 20944, 22822, 22883,  1167,   nil,
  1811,   nil,   nil,   nil,  1023,  1248,   892,   nil,   nil,   nil,
  1370,  1371,  1374,  1255,  1257,  1259,  1260,  1300,  1303,   nil,
  1271,   149,   151,   152,  1267,  1272,  1273,   nil,   nil,   nil,
   nil,   nil,  1839,   nil,   nil,   nil,   153,   nil,  1274,   nil ]

racc_action_default = [
    -1,  -579,  -578,  -579,    -2,  -565,    -4,    -5,  -579,    -8,
    -9,  -579,  -579,  -579,   -29,  -579,  -579,  -579,  -277,  -579,
   -41,   -44,  -567,  -579,   -49,   -51,   -52,   -53,  -258,  -258,
  -258,  -288,  -327,  -328,   -70,  -578,   -74,   -82,   -84,  -579,
  -492,  -493,  -579,  -579,  -579,  -579,  -579,  -567,  -239,  -270,
  -271,  -272,  -273,  -274,  -275,  -276,  -555,  -279,  -579,  -578,
  -578,  -296,  -393,  -579,  -579,  -301,  -304,  -565,  -579,  -312,
  -319,  -579,  -329,  -330,  -434,  -435,  -436,  -437,  -438,  -578,
  -441,  -578,  -578,  -578,  -578,  -578,  -470,  -476,  -477,  -553,
  -481,  -482,  -554,  -484,  -485,  -486,  -487,  -488,  -489,  -490,
  -491,  -496,  -497,   990,    -3,  -566,  -574,  -575,  -576,    -7,
  -579,  -579,  -579,  -579,  -579,  -579,   -17,  -579,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -122,  -578,
  -579,  -579,  -578,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
  -567,  -568,   -48,  -579,  -492,  -493,  -579,  -277,  -579,  -579,
  -231,  -579,  -578,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
  -399,  -402,  -579,  -579,   -59,  -579,  -295,  -579,  -415,  -418,
   -65,  -578,  -412,   -66,  -567,   -67,  -240,  -253,  -578,  -578,
  -257,  -579,  -263,  -579,  -549,  -579,   -68,   -69,  -565,   -13,
   -14,  -579,   -72,  -578,  -567,  -579,   -75,   -78,  -578,   -90,
   -91,  -579,  -579,   -98,  -288,  -291,  -567,  -405,  -327,  -328,
  -331,  -413,  -579,   -80,  -579,   -86,  -285,  -478,  -479,  -579,
  -216,  -217,  -232,  -579,  -578,  -281,  -241,  -571,  -571,  -579,
  -579,  -547,  -571,  -579,  -297,  -298,  -518,   -50,  -579,  -579,
  -579,  -579,  -565,  -579,  -566,  -492,  -493,  -579,  -579,  -277,
  -579,  -352,  -353,  -579,  -315,  -579,  -113,  -114,  -154,  -155,
  -156,  -172,  -177,  -184,  -187,  -322,  -579,  -492,  -493,  -544,
  -545,  -439,  -579,  -454,  -579,  -456,  -579,  -458,  -579,  -579,
  -446,  -579,  -579,  -452,  -579,  -469,  -471,  -472,  -473,  -474,
    -6,  -577,   -23,   -24,   -25,   -26,   -27,  -578,  -579,   -19,
   -20,   -21,  -123,  -579,   -30,   -39,   -40,  -579,  -579,   -31,
  -197,  -567,  -248,  -249,  -578,  -578,  -556,  -557,  -258,  -410,
  -558,  -559,  -557,  -556,  -258,  -409,  -411,  -558,  -559,   -37,
  -205,   -38,  -579,   -42,   -43,  -195,  -263,   -45,   -46,   -47,
  -567,  -294,  -579,  -579,  -579,  -578,  -285,  -579,  -579,  -579,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -218,  -219,
  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,
  -230,  -233,  -234,  -235,  -236,  -567,  -578,  -258,  -556,  -557,
  -258,   -56,   -60,  -259,  -406,  -578,  -578,  -567,  -567,  -290,
  -254,  -579,  -262,  -255,  -579,  -260,  -579,  -264,  -552,   -12,
  -566,   -16,  -567,   -71,  -283,   -87,   -76,  -579,  -567,  -578,
  -579,  -579,   -97,  -579,  -478,  -479,  -579,   -83,   -88,  -579,
  -579,  -579,  -579,  -579,  -237,  -579,  -426,  -579,  -567,  -242,
  -573,  -572,  -244,  -573,  -286,  -287,  -548,  -579,  -518,  -396,
  -543,  -543,  -543,  -517,  -519,  -520,  -521,  -522,  -523,  -524,
  -525,  -579,  -527,  -533,  -535,  -536,  -538,  -539,  -540,  -579,
  -578,  -343,  -344,  -578,  -579,  -579,  -579,  -579,  -421,  -578,
  -579,  -579,  -285,  -309,  -108,  -109,  -579,  -111,  -579,  -277,
  -579,  -579,  -320,  -518,  -324,  -563,  -564,  -579,  -440,  -455,
  -460,  -461,  -463,  -442,  -457,  -443,  -459,  -444,  -445,  -579,
  -448,  -450,  -451,  -579,  -475,  -579,   -18,  -579,   -28,  -269,
  -579,  -579,  -414,  -579,  -250,  -252,  -579,  -579,   -61,  -246,
  -247,  -407,  -579,  -579,   -63,  -408,  -579,  -579,  -293,  -569,
  -556,  -557,  -556,  -557,  -567,  -195,  -579,  -382,  -383,  -578,
  -385,  -400,   -54,  -403,   -55,  -404,  -578,  -416,  -419,  -245,
  -289,  -578,  -261,  -265,  -579,  -550,  -551,   -15,   -73,  -579,
   -79,   -85,  -567,  -556,  -557,  -578,   -94,   -96,  -579,   -81,
  -579,  -204,  -214,  -215,  -567,  -578,  -578,  -280,  -282,  -571,
  -394,  -578,  -578,  -578,  -579,  -510,  -579,  -513,  -515,  -579,
  -579,  -354,  -579,  -356,  -358,  -365,  -524,  -567,  -537,  -541,
  -578,  -345,  -578,  -302,  -346,  -347,  -305,  -579,  -308,  -579,
  -567,  -556,  -557,  -560,  -284,  -579,  -108,  -109,  -110,  -579,
  -579,  -578,  -313,  -498,  -499,  -579,  -316,  -578,  -578,  -518,
  -579,  -579,  -567,  -579,  -578,  -447,  -449,  -453,   -10,  -124,
  -267,  -579,  -198,  -579,  -570,  -578,   -33,  -200,   -34,  -201,
   -62,   -35,  -203,   -36,  -202,   -64,  -196,  -579,  -579,  -579,
  -579,  -414,  -579,  -543,  -543,  -543,  -381,  -579,  -578,  -387,
  -579,  -524,  -531,  -578,   -57,  -578,  -578,  -256,  -266,   -77,
   -92,   -89,  -292,  -578,  -350,  -578,  -427,  -578,  -428,  -429,
  -243,  -579,  -579,  -567,  -543,  -543,  -528,  -542,  -543,  -543,
  -534,  -543,  -529,  -567,  -579,  -363,  -579,  -526,  -579,  -348,
  -579,  -579,  -578,  -578,  -307,  -579,  -414,  -579,  -108,  -109,
  -112,  -567,  -578,  -579,  -501,  -579,  -579,  -579,  -567,  -503,
  -325,  -546,  -462,  -465,  -466,  -467,  -468,  -579,  -268,   -32,
  -199,  -251,  -579,  -238,  -372,  -374,  -579,  -377,  -379,  -579,
  -384,  -579,  -388,  -389,  -391,  -392,  -579,  -579,  -578,  -579,
  -579,   -11,  -578,  -433,  -351,  -579,  -579,  -431,  -397,  -398,
  -395,  -579,  -506,  -508,  -579,  -511,  -579,  -514,  -579,  -516,
  -355,  -357,  -361,  -579,  -366,  -299,  -579,  -300,  -579,  -579,
  -579,  -578,  -310,  -414,  -579,  -579,  -317,  -321,  -323,  -502,
  -518,  -464,  -543,  -543,  -543,  -543,  -532,  -543,  -386,  -579,
  -530,  -579,  -401,  -579,  -417,  -420,  -432,  -578,   -99,  -100,
  -579,  -579,  -107,  -430,  -543,  -543,  -543,  -543,  -359,  -579,
  -364,  -579,  -578,  -303,  -306,  -265,  -578,  -578,  -314,  -500,
  -578,  -578,  -579,  -369,  -371,  -579,  -375,  -579,  -378,  -380,
  -390,  -579,  -285,   -58,  -426,  -578,  -579,  -579,  -106,  -504,
  -579,  -507,  -509,  -512,  -579,  -362,  -578,  -422,  -423,  -424,
  -579,  -579,  -579,  -543,  -543,  -543,  -543,  -284,  -560,  -425,
  -567,  -556,  -557,  -560,  -105,  -543,  -360,  -349,  -311,  -318,
  -326,  -367,  -579,  -370,  -373,  -376,  -414,  -505,  -543,  -368 ]

clist = [
'6,209,665,212,557,355,602,424,254,260,263,4,121,121,116,198,262,550',
'553,376,124,124,286,396,517,718,313,126,126,421,108,645,529,17,798,105',
'874,483,472,17,754,267,267,267,303,282,268,268,268,284,401,693,696,786',
'213,9,708,316,321,104,533,9,213,213,213,790,17,291,291,773,645,843,121',
'642,317,687,642,363,845,365,367,370,373,365,579,109,121,507,586,213',
'757,590,108,871,213,213,801,896,213,337,269,269,269,300,300,1,519,522',
'755,477,570,526,572,920,323,328,329,633,364,332,635,333,374,2,115,408',
'414,851,318,322,197,342,388,636,783,300,17,848,597,319,631,213,213,213',
'213,17,265,276,277,637,638,359,645,785,320,788,324,325,9,955,340,712',
'382,383,384,385,356,386,574,314,518,330,802,483,467,470,331,803,705',
'927,394,399,380,343,812,419,423,571,815,930,409,345,717,896,976,573',
'642,642,721,810,402,890,758,842,527,418,670,326,251,466,940,763,267',
'786,475,398,793,845,765,841,871,398,476,766,957,699,777,697,855,751',
'17,213,213,213,673,361,213,213,213,213,213,213,362,366,474,892,369,786',
'589,372,790,822,723,17,395,724,375,770,813,402,426,784,533,577,,267',
'482,482,,,268,267,,,267,503,,,,268,650,,,624,,,213,,262,659,508,,213',
'282,496,213,,492,282,,977,,498,108,882,806,,533,490,,764,726,17,893',
'17,894,,,291,17,,,,,269,485,,487,,488,958,,489,269,491,291,,,,,914,',
'931,,,17,,652,,,,,,,300,408,414,108,,,,213,213,756,,,,,,,473,300,,,568',
',568,,645,478,603,16,554,555,,6,556,16,608,121,,596,740,,614,610,595',
'124,745,,,615,482,482,126,,609,700,,767,300,963,300,,16,,883,424,17',
',409,,655,642,,818,,816,817,,969,,769,402,655,418,,,,,9,,,,626,267,',
'632,,,634,599,,533,610,,,610,780,,,,,,627,609,213,,609,,,,,627,627,',
',,,19,,,655,508,16,19,,409,,778,,,508,16,881,,,402,,409,,,418,767,,',
',,,267,,,19,,418,,,,,,,17,884,,,,,,291,,213,,,,,643,,291,323,,646,,',
'647,907,341,213,409,,,641,,,,,,,402,,811,285,,418,,300,922,,,,267,,',
',300,643,986,,323,16,694,694,17,19,,17,,736,738,,669,213,19,741,743',
',713,423,959,121,,729,16,213,603,,,124,,213,,,,,126,,,,,,,,,,,533,,',
'759,,,,603,655,,627,508,,213,213,482,961,962,610,213,213,615,771,213',
',,675,677,678,609,730,820,,,643,323,16,,16,774,779,,,16,,,,759,,735',
',,19,,,603,291,398,,422,,,,,774,,774,291,,16,,,,409,768,19,,,17,17,',
',,,,402,418,,,829,805,,300,,,,776,267,121,,393,,681,300,,,,,,482,792',
',213,,,,814,,213,,,819,,285,17,17,,,,426,,17,759,807,19,,19,,,,213,19',
'16,,315,,,853,,327,327,857,,327,,,,,,,,828,28,,,,603,19,28,970,17,,17',
'17,,,,,,,,,17,28,285,,,,,285,,28,28,28,,28,327,327,327,327,,,,,,,,213',
'694,17,17,,,,,,886,,28,17,213,,,28,28,,,28,876,,,,,,,,,,,,19,885,,681',
'655,16,795,,,835,837,838,,900,,17,,753,,17,,323,,910,,28,,,,,28,28,28',
'28,28,,,,,,862,863,,,865,867,929,869,17,300,,,,427,428,429,430,,,300',
'774,,,,789,16,,791,16,409,925,18,,,17,,,18,418,402,,,,,418,603,,,,17',
'774,267,,,17,,,17,17,,,,,19,18,293,293,,,,,,213,,,681,,681,,28,28,28',
'28,,,28,28,28,28,28,28,,,,,,,339,,,,,28,,,,,,933,934,936,938,,939,,',
',,,,,,,19,,,19,,,,949,951,952,953,18,28,327,327,,,,28,,18,28,,16,16',
',,,,,918,681,,,,,,,28,,28,,,,,28,,,690,,,692,,,,,981,983,984,985,,895',
',,897,,422,,987,16,16,28,,,,,16,681,,681,,989,,,,,915,28,28,916,,917',
',,,,,,,,,,,,,18,,,,,,,681,,,16,,16,16,,,19,19,,,,,16,18,,,431,,,,,,',
',,,,,,28,40,,,,,,40,,,16,16,,964,,,965,,966,,16,,,19,19,781,782,,,,19',
'975,,,40,289,289,,,,,479,,18,,18,,,28,293,18,,,,664,,16,,,,16,493,,988',
',,293,335,,19,357,19,19,,,,18,,827,,,19,,,,,,,,16,,,,,,,,,,,,,,28,40',
'569,,569,19,19,716,,28,40,,16,722,847,19,849,850,,,,,,,,28,854,16,,',
',,16,,,16,16,,,,,,,,,,18,,,,,19,,878,879,19,,,41,913,28,,,28,41,,,,',
'28,,,,,,,,,,,,28,,,19,,,28,,,,41,290,290,,40,,,,903,,,,906,618,,,,,',
'19,,,,,,28,28,40,,,,28,28,336,19,28,358,,,19,,926,19,19,,,,,,,327,,',
',,,,,18,,639,640,,,,293,,944,,,41,,,,293,648,,,,41,,651,956,,,,40,960',
'40,,28,28,289,40,,,,,,,,668,,,,,,,,289,,,,,,,,,18,40,,18,,,28,,,,,,28',
',,,,,28,28,,,,,,28,,327,,,357,,357,,28,,,,,,327,,,,,,41,,,,,,,,,,,,',
',,,,,28,,28,28,,41,,,,,40,,28,,,,,,,,,,,,,,,,,,,,,,,293,,28,,28,28,',
',,,,293,,,28,28,,,,,,,18,18,,,,,,41,772,41,,,,290,41,,,,,,,,,,,,,,28',
',290,797,28,,,,,,,,41,,,,,,18,18,,,,,826,18,,,40,,,,,28,,289,,,821,',
',358,,358,289,,,,,,,,,,,,,,,28,,,,,18,,18,18,,,,,,,28,,18,,,28,,,28',
'28,,41,,,40,,,40,,,,,,28,,860,,,,18,18,,,,,870,,,,18,,,,,,,,,,,,,,,',
',,,,,889,,,,,,,,,,,,,569,,18,,,,18,,,,912,,,,,,,,,,,,,,,,,,,,,,,,,18',
',,,,289,41,,,,,,,290,,,289,,,,,,290,,,,18,40,40,,,,,,,,,,,,,18,,,,,18',
',,18,18,,,,,,,,,,,,,,,,41,,,41,,,,40,40,,,,,,40,,,,,,,,,,,220,,,,,,',
',266,266,266,,,,,,,,,,,310,311,312,,,,,40,,40,40,,,,,266,266,,,40,,',
',,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,290,,,40,,,,,,,,290,,,,,,,,,,,41',
'41,,,,,,,,,,,,,,357,,40,,,,40,,,,908,,,,,,,,,,,,,,,,,,,,,41,41,,,40',
',,41,,,,,,,,,,,,,,,,,,,,,,,40,,,,,266,400,266,,,420,425,,,,40,41,,41',
'41,40,,,40,40,,220,,41,440,441,442,443,444,445,446,447,448,449,450,451',
'452,453,454,455,456,457,458,459,460,461,462,463,464,465,41,41,,,,266',
',,,,41,266,,,266,,,,,,,266,,266,,266,,,,,,,,,,,,,,,,,,,358,,41,,,,41',
',,,909,,,,,,,,,514,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,',
',,,,,,,,,,,41,,,,,41,,,41,41,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,266,,420,625,400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,266,,,266,,266,,,,,,,,,,,,,266,,,,,,,,,,661,662,663,,,,,,,',
',266,,,266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,266,732,,,266,266,737,739,,,,,742,744,,,625,746',
',,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,',
'266,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,,266,,830',
',,,,,,,,,,,,,737,739,744,742,,833,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,830,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266' ]
        racc_goto_table = arr = ::Array.new(2828, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,13,22,88,57,26,20,39,39,39,2,58,58,17,17,69,85,85,57,61,61,50,29',
'10,92,33,62,62,29,91,178,142,24,86,8,127,71,40,24,130,35,35,35,51,46',
'66,66,66,47,25,87,87,172,24,9,55,6,6,5,133,9,24,24,24,173,24,24,24,14',
'178,137,58,72,66,126,72,6,138,6,6,6,6,6,164,7,58,52,164,24,135,164,91',
'124,24,24,14,174,24,24,68,68,68,64,64,1,67,67,131,25,56,67,56,127,30',
'19,19,70,160,19,70,5,160,3,11,38,38,15,68,68,18,21,32,42,135,64,24,43',
'63,65,41,24,24,24,24,24,45,45,45,41,41,80,178,131,81,131,82,84,9,127',
'89,90,19,19,19,19,93,9,94,95,96,97,98,71,38,38,99,100,101,102,22,22',
'7,103,104,22,22,105,106,107,69,108,109,174,127,110,72,72,111,55,6,112',
'128,136,139,58,140,141,143,144,137,145,35,172,148,66,126,138,149,135',
'124,66,150,151,152,153,154,88,155,26,24,24,24,24,142,158,24,24,24,24',
'24,24,159,161,69,130,162,172,163,165,173,166,167,24,30,168,169,26,170',
'6,30,171,133,177,,35,6,6,,,66,35,,,35,33,,,,66,52,,,25,,,24,,69,52,50',
',24,46,51,24,,47,46,,86,,47,91,87,26,,133,8,,41,164,24,131,24,131,,',
'24,24,,,,,68,30,,30,,30,14,,5,68,9,24,,,,,131,,92,,,24,,25,,,,,,,64',
'38,38,91,,,,24,24,133,,,,,,,45,64,,,24,,24,,178,45,33,23,19,19,,6,5',
'23,39,58,,17,40,,39,69,2,61,40,,,69,6,6,62,,6,25,,71,64,131,64,,23,',
'26,20,24,,69,,38,72,,142,,10,10,,13,,52,6,38,58,,,,,9,,,,33,35,,39,',
',39,30,,133,69,,,69,67,,,,,,6,6,24,,6,,,,,6,6,,,,,28,,,38,50,23,28,',
'69,,29,,,50,23,85,,,6,,69,,,58,71,,,,,,35,,,28,,58,,,,,,,24,10,,,,,',
'24,,24,,,,,30,,24,30,,30,,,9,85,28,24,69,,,68,,,,,,,6,,25,12,,58,,64',
'85,,,,35,,,,64,30,26,,30,23,91,91,24,28,,24,,22,22,,68,24,28,22,22,',
'91,22,88,58,,17,23,24,33,,,61,,24,,,,,62,,,,,,,,,,,133,,,6,,,,33,38',
',6,50,,24,24,6,10,10,69,24,24,69,50,24,,,132,132,132,6,30,57,,,30,30',
'23,,23,6,6,,,23,,,,6,,68,,,28,,,33,24,66,,28,,,,,6,,6,24,,23,,,,69,30',
'28,,,24,24,,,,,,6,58,,,22,66,,64,,,,30,35,58,,12,,125,64,,,,,,6,30,',
'24,,,,91,,24,,,91,,12,24,24,,,,30,,24,6,19,28,,28,,,,24,28,23,,31,,',
'6,,31,31,6,,31,,,,,,,,30,44,,,,33,28,44,25,24,,24,24,,,,,,,,,24,44,12',
',,,,12,,44,44,44,,44,31,31,31,31,,,,,,,,24,91,24,24,,,,,,91,,44,24,24',
',,44,44,,,44,19,,,,,,,,,,,,28,19,,125,38,23,125,,,132,132,132,,24,,24',
',129,,24,,30,,24,,44,,,,,44,44,44,44,44,,,,,,132,132,,,132,132,91,132',
'24,64,,,,31,31,31,31,,,64,6,,,,129,23,,129,23,69,30,27,,,24,,,27,58',
'6,,,,,58,33,,,,24,6,35,,,24,,,24,24,,,,,28,27,27,27,,,,,,24,,,125,,125',
',44,44,44,44,,,44,44,44,44,44,44,,,,,,,27,,,,,44,,,,,,132,132,132,132',
',132,,,,,,,,,,28,,,28,,,,132,132,132,132,27,44,31,31,,,,44,,27,44,,23',
'23,,,,,,125,125,,,,,,,44,,44,,,,,44,,,12,,,12,,,,,132,132,132,132,,129',
',,129,,28,,132,23,23,44,,,,,23,125,,125,,132,,,,,129,44,44,129,,129',
',,,,,,,,,,,,,27,,,,,,,125,,,23,,23,23,,,28,28,,,,,23,27,,,48,,,,,,,',
',,,,,44,53,,,,,,53,,,23,23,,129,,,129,,129,,23,,,28,28,12,12,,,,28,129',
',,53,53,53,,,,,48,,27,,27,,,44,27,27,,,,31,,23,,,,23,48,,129,,,27,53',
',28,53,28,28,,,,27,,12,,,28,,,,,,,,23,,,,,,,,,,,,,,44,53,27,,27,28,28',
'31,,44,53,,23,31,12,28,12,12,,,,,,,,44,12,23,,,,,23,,,23,23,,,,,,,,',
',27,,,,,28,,12,12,28,,,54,28,44,,,44,54,,,,,44,,,,,,,,,,,,44,,,28,,',
'44,,,,54,54,54,,53,,,,12,,,,12,48,,,,,,28,,,,,,44,44,53,,,,44,44,54',
'28,44,54,,,28,,12,28,28,,,,,,,31,,,,,,,,27,,48,48,,,,27,,12,,,54,,,',
'27,48,,,,54,,48,12,,,,53,12,53,,44,44,53,53,,,,,,,,48,,,,,,,,53,,,,',
',,,,27,53,,27,,,44,,,,,,44,,,,,,44,44,,,,,,44,,31,,,53,,53,,44,,,,,',
'31,,,,,,54,,,,,,,,,,,,,,,,,,44,,44,44,,54,,,,,53,,44,,,,,,,,,,,,,,,',
',,,,,,,27,,44,,44,44,,,,,,27,,,44,44,,,,,,,27,27,,,,,,54,48,54,,,,54',
'54,,,,,,,,,,,,,,44,,54,48,44,,,,,,,,54,,,,,,27,27,,,,,27,27,,,53,,,',
',44,,53,,,48,,,54,,54,53,,,,,,,,,,,,,,,44,,,,,27,,27,27,,,,,,,44,,27',
',,44,,,44,44,,54,,,53,,,53,,,,,,44,,48,,,,27,27,,,,,48,,,,27,,,,,,,',
',,,,,,,,,,,,,48,,,,,,,,,,,,,27,,27,,,,27,,,,27,,,,,,,,,,,,,,,,,,,,,',
',,,27,,,,,53,54,,,,,,,54,,,53,,,,,,54,,,,27,53,53,,,,,,,,,,,,,27,,,',
',27,,,27,27,,,,,,,,,,,,,,,,54,,,54,,,,53,53,,,,,,53,,,,,,,,,,,34,,,',
',,,,34,34,34,,,,,,,,,,,34,34,34,,,,,53,,53,53,,,,,34,34,,,53,,,,,,,',
',,,,,,,,,,,,,,,,,,,53,53,,,,,,54,,,53,,,,,,,,54,,,,,,,,,,,54,54,,,,',
',,,,,,,,,53,,53,,,,53,,,,53,,,,,,,,,,,,,,,,,,,,,54,54,,,53,,,54,,,,',
',,,,,,,,,,,,,,,,,,53,,,,,34,34,34,,,34,34,,,,53,54,,54,54,53,,,53,53',
',34,,54,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,54,54,,,,34,,,,,54,34,,,34,,,,,,,34,,34,,34,,,,,,',
',,,,,,,,,,,,54,,54,,,,54,,,,54,,,,,,,,,34,,,,,,,,,,,,,,,,54,,,,,,,,',
',,,,,,,,,,,,,,,,,54,,,,,,,,,,,,,,,54,,,,,54,,,54,54,,,,,,,,,,,,,,,,',
',34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,34,34,34,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,34,,,,,,,,,,,,,34,,,,,,,,,,34,34',
'34,,,,,,,,,34,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,34,34,34,34,,,,,34,34,,,34,34,',
',,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,34',
',,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,34,,34,,,,,,,',
',,,,,,34,34,34,34,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(2828, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   105,     9,   123,   nil,    54,    -2,    77,    30,    53,
  -290,   114,   525,  -514,  -596,  -646,   nil,     3,   118,    52,
  -199,    63,   -20,   379,    31,  -152,  -395,   933,   477,  -177,
    54,   710,    16,   -21,  1882,    10,   nil,   nil,   -78,   -20,
  -216,  -326,  -338,  -627,   784,   115,    10,    14,   948,   nil,
   -14,     7,  -217,  1170,  1330,  -510,  -233,   -66,     1,   nil,
   nil,     9,    16,  -254,    67,    80,    15,  -211,    69,   -13,
  -350,  -232,  -408,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    80,    94,    95,   nil,    95,  -311,  -656,  -503,  -329,    92,
  -409,    25,  -548,    95,  -188,   112,  -145,   106,  -521,   110,
  -519,  -385,  -703,   114,  -528,  -157,  -528,  -697,   121,  -380,
  -160,  -376,  -619,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  -701,   185,  -466,  -760,  -427,   252,
  -589,  -521,   120,  -266,   nil,  -539,  -557,  -689,  -682,  -122,
  -321,   145,  -294,   183,   -41,  -420,   nil,   nil,   -44,  -419,
   -37,  -415,  -702,  -333,  -440,  -549,   nil,   nil,   158,   163,
    37,   161,   163,  -121,  -278,   165,  -472,  -329,  -327,   171,
  -456,  -413,  -621,  -611,  -739,   nil,   nil,   -97,  -453 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   279,     7,   334,   280,
   nil,   nil,   516,   nil,   799,   nil,   278,   nil,   nil,   nil,
    14,    15,    21,   219,   309,   nil,   nil,   217,   218,   nil,
   272,    20,   nil,   432,    24,    25,    26,    27,   658,   nil,
   nil,   nil,   nil,   nil,   297,   403,    34,   nil,   nil,    36,
    39,    38,   nil,   214,   215,   567,   nil,   123,   411,   122,
   125,    75,    76,   nil,    48,   nil,   404,   nil,   405,   416,
   611,   480,   270,   255,    49,    50,    51,    52,    53,    54,
    55,   nil,   256,    61,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   551,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   683,   540,   nil,   684,   nil,   530,
   nil,   532,   nil,   787,   628,   nil,   nil,   nil,   538,   nil,
   nil,   nil,   720,   nil,   nil,   nil,   415,   257,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    74,    77,    78,   nil,
   nil,   nil,   nil,   nil,   584,   nil,   nil,   nil,   nil,   nil,
   nil,   531,   542,   543,   762,   546,   549,   nil,   274 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 140, :_reduce_1,
  2, 138, :_reduce_2,
  2, 139, :_reduce_3,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 141, :_reduce_6,
  2, 141, :_reduce_none,
  1, 144, :_reduce_none,
  0, 148, :_reduce_9,
  5, 144, :_reduce_10,
  4, 147, :_reduce_11,
  2, 149, :_reduce_12,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 153, :_reduce_15,
  2, 153, :_reduce_16,
  0, 169, :_reduce_17,
  4, 146, :_reduce_18,
  3, 146, :_reduce_19,
  3, 146, :_reduce_20,
  3, 146, :_reduce_21,
  2, 146, :_reduce_22,
  3, 146, :_reduce_23,
  3, 146, :_reduce_24,
  3, 146, :_reduce_25,
  3, 146, :_reduce_26,
  3, 146, :_reduce_27,
  4, 146, :_reduce_28,
  1, 146, :_reduce_none,
  3, 146, :_reduce_30,
  3, 146, :_reduce_31,
  6, 146, :_reduce_32,
  5, 146, :_reduce_33,
  5, 146, :_reduce_34,
  5, 146, :_reduce_35,
  5, 146, :_reduce_36,
  3, 146, :_reduce_37,
  3, 146, :_reduce_38,
  3, 146, :_reduce_39,
  3, 146, :_reduce_40,
  1, 146, :_reduce_none,
  3, 157, :_reduce_42,
  3, 157, :_reduce_43,
  1, 168, :_reduce_none,
  3, 168, :_reduce_45,
  3, 168, :_reduce_46,
  3, 168, :_reduce_47,
  2, 168, :_reduce_48,
  1, 168, :_reduce_none,
  1, 156, :_reduce_50,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 173, :_reduce_none,
  4, 173, :_reduce_54,
  4, 173, :_reduce_55,
  0, 179, :_reduce_56,
  0, 180, :_reduce_57,
  6, 177, :_reduce_58,
  2, 172, :_reduce_59,
  3, 172, :_reduce_60,
  4, 172, :_reduce_61,
  5, 172, :_reduce_62,
  4, 172, :_reduce_63,
  5, 172, :_reduce_64,
  2, 172, :_reduce_65,
  2, 172, :_reduce_66,
  2, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 158, :_reduce_none,
  3, 158, :_reduce_71,
  1, 184, :_reduce_none,
  3, 184, :_reduce_73,
  1, 183, :_reduce_74,
  2, 183, :_reduce_75,
  3, 183, :_reduce_76,
  5, 183, :_reduce_77,
  2, 183, :_reduce_78,
  4, 183, :_reduce_79,
  2, 183, :_reduce_80,
  4, 183, :_reduce_81,
  1, 183, :_reduce_82,
  3, 183, :_reduce_83,
  1, 187, :_reduce_none,
  3, 187, :_reduce_85,
  2, 186, :_reduce_86,
  3, 186, :_reduce_87,
  1, 189, :_reduce_88,
  3, 189, :_reduce_89,
  1, 188, :_reduce_90,
  1, 188, :_reduce_91,
  4, 188, :_reduce_92,
  3, 188, :_reduce_93,
  3, 188, :_reduce_94,
  3, 188, :_reduce_95,
  3, 188, :_reduce_96,
  2, 188, :_reduce_97,
  1, 188, :_reduce_98,
  1, 165, :_reduce_99,
  1, 165, :_reduce_100,
  4, 165, :_reduce_101,
  3, 165, :_reduce_102,
  3, 165, :_reduce_103,
  3, 165, :_reduce_104,
  3, 165, :_reduce_105,
  2, 165, :_reduce_106,
  1, 165, :_reduce_107,
  1, 192, :_reduce_108,
  1, 192, :_reduce_none,
  2, 193, :_reduce_110,
  1, 193, :_reduce_111,
  3, 193, :_reduce_112,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_116,
  1, 194, :_reduce_117,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 154, :_reduce_120,
  1, 154, :_reduce_none,
  1, 155, :_reduce_122,
  0, 200, :_reduce_123,
  4, 155, :_reduce_124,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  3, 171, :_reduce_195,
  5, 171, :_reduce_196,
  3, 171, :_reduce_197,
  5, 171, :_reduce_198,
  6, 171, :_reduce_199,
  5, 171, :_reduce_200,
  5, 171, :_reduce_201,
  5, 171, :_reduce_202,
  5, 171, :_reduce_203,
  4, 171, :_reduce_204,
  3, 171, :_reduce_205,
  3, 171, :_reduce_206,
  3, 171, :_reduce_207,
  3, 171, :_reduce_208,
  3, 171, :_reduce_209,
  3, 171, :_reduce_210,
  3, 171, :_reduce_211,
  3, 171, :_reduce_212,
  3, 171, :_reduce_213,
  4, 171, :_reduce_214,
  4, 171, :_reduce_215,
  2, 171, :_reduce_216,
  2, 171, :_reduce_217,
  3, 171, :_reduce_218,
  3, 171, :_reduce_219,
  3, 171, :_reduce_220,
  3, 171, :_reduce_221,
  3, 171, :_reduce_222,
  3, 171, :_reduce_223,
  3, 171, :_reduce_224,
  3, 171, :_reduce_225,
  3, 171, :_reduce_226,
  3, 171, :_reduce_227,
  3, 171, :_reduce_228,
  3, 171, :_reduce_229,
  3, 171, :_reduce_230,
  2, 171, :_reduce_231,
  2, 171, :_reduce_232,
  3, 171, :_reduce_233,
  3, 171, :_reduce_234,
  3, 171, :_reduce_235,
  3, 171, :_reduce_236,
  3, 171, :_reduce_237,
  6, 171, :_reduce_238,
  1, 171, :_reduce_none,
  1, 167, :_reduce_240,
  1, 202, :_reduce_none,
  2, 202, :_reduce_242,
  4, 202, :_reduce_243,
  2, 202, :_reduce_244,
  3, 206, :_reduce_245,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 162, :_reduce_248,
  1, 162, :_reduce_249,
  2, 162, :_reduce_250,
  4, 162, :_reduce_251,
  2, 162, :_reduce_252,
  1, 182, :_reduce_253,
  2, 182, :_reduce_254,
  2, 182, :_reduce_255,
  4, 182, :_reduce_256,
  1, 182, :_reduce_none,
  0, 210, :_reduce_258,
  2, 176, :_reduce_259,
  2, 209, :_reduce_260,
  2, 208, :_reduce_261,
  1, 208, :_reduce_none,
  1, 203, :_reduce_263,
  2, 203, :_reduce_264,
  3, 203, :_reduce_265,
  4, 203, :_reduce_266,
  3, 166, :_reduce_267,
  4, 166, :_reduce_268,
  2, 166, :_reduce_269,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_278,
  0, 232, :_reduce_279,
  4, 201, :_reduce_280,
  0, 233, :_reduce_281,
  4, 201, :_reduce_282,
  3, 201, :_reduce_283,
  3, 201, :_reduce_284,
  2, 201, :_reduce_285,
  3, 201, :_reduce_286,
  3, 201, :_reduce_287,
  1, 201, :_reduce_288,
  4, 201, :_reduce_289,
  3, 201, :_reduce_290,
  1, 201, :_reduce_291,
  5, 201, :_reduce_292,
  4, 201, :_reduce_293,
  3, 201, :_reduce_294,
  2, 201, :_reduce_295,
  1, 201, :_reduce_none,
  2, 201, :_reduce_297,
  2, 201, :_reduce_298,
  6, 201, :_reduce_299,
  6, 201, :_reduce_300,
  0, 234, :_reduce_301,
  0, 235, :_reduce_302,
  7, 201, :_reduce_303,
  0, 236, :_reduce_304,
  0, 237, :_reduce_305,
  7, 201, :_reduce_306,
  5, 201, :_reduce_307,
  4, 201, :_reduce_308,
  0, 238, :_reduce_309,
  0, 239, :_reduce_310,
  9, 201, :_reduce_311,
  0, 240, :_reduce_312,
  0, 241, :_reduce_313,
  7, 201, :_reduce_314,
  0, 242, :_reduce_315,
  0, 243, :_reduce_316,
  0, 244, :_reduce_317,
  9, 201, :_reduce_318,
  0, 245, :_reduce_319,
  0, 246, :_reduce_320,
  6, 201, :_reduce_321,
  0, 247, :_reduce_322,
  6, 201, :_reduce_323,
  0, 248, :_reduce_324,
  0, 249, :_reduce_325,
  9, 201, :_reduce_326,
  1, 201, :_reduce_327,
  1, 201, :_reduce_328,
  1, 201, :_reduce_329,
  1, 201, :_reduce_330,
  1, 161, :_reduce_331,
  1, 250, :_reduce_none,
  1, 251, :_reduce_none,
  1, 252, :_reduce_none,
  1, 253, :_reduce_none,
  1, 254, :_reduce_none,
  1, 255, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  2, 222, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 223, :_reduce_none,
  5, 223, :_reduce_349,
  1, 151, :_reduce_none,
  2, 151, :_reduce_351,
  1, 226, :_reduce_none,
  1, 226, :_reduce_353,
  1, 261, :_reduce_none,
  3, 261, :_reduce_355,
  1, 264, :_reduce_356,
  3, 264, :_reduce_357,
  1, 263, :_reduce_358,
  4, 263, :_reduce_359,
  6, 263, :_reduce_360,
  3, 263, :_reduce_361,
  5, 263, :_reduce_362,
  2, 263, :_reduce_363,
  4, 263, :_reduce_364,
  1, 263, :_reduce_365,
  3, 263, :_reduce_366,
  6, 265, :_reduce_367,
  8, 265, :_reduce_368,
  4, 265, :_reduce_369,
  6, 265, :_reduce_370,
  4, 265, :_reduce_371,
  2, 265, :_reduce_372,
  6, 265, :_reduce_373,
  2, 265, :_reduce_374,
  4, 265, :_reduce_375,
  6, 265, :_reduce_376,
  2, 265, :_reduce_377,
  4, 265, :_reduce_378,
  2, 265, :_reduce_379,
  4, 265, :_reduce_380,
  1, 265, :_reduce_381,
  1, 178, :_reduce_382,
  1, 178, :_reduce_none,
  3, 271, :_reduce_384,
  1, 271, :_reduce_385,
  4, 271, :_reduce_386,
  1, 272, :_reduce_none,
  2, 272, :_reduce_388,
  1, 273, :_reduce_389,
  3, 273, :_reduce_390,
  1, 274, :_reduce_391,
  1, 274, :_reduce_none,
  0, 278, :_reduce_393,
  3, 221, :_reduce_394,
  4, 276, :_reduce_395,
  1, 276, :_reduce_396,
  3, 277, :_reduce_397,
  3, 277, :_reduce_398,
  0, 281, :_reduce_399,
  0, 282, :_reduce_400,
  6, 280, :_reduce_401,
  2, 174, :_reduce_402,
  4, 174, :_reduce_403,
  4, 174, :_reduce_404,
  0, 284, :_reduce_405,
  3, 220, :_reduce_406,
  4, 220, :_reduce_407,
  4, 220, :_reduce_408,
  3, 220, :_reduce_409,
  3, 220, :_reduce_410,
  3, 220, :_reduce_411,
  2, 220, :_reduce_412,
  1, 220, :_reduce_413,
  4, 220, :_reduce_414,
  0, 285, :_reduce_415,
  0, 286, :_reduce_416,
  6, 219, :_reduce_417,
  0, 287, :_reduce_418,
  0, 288, :_reduce_419,
  6, 219, :_reduce_420,
  0, 290, :_reduce_421,
  6, 225, :_reduce_422,
  1, 289, :_reduce_none,
  1, 289, :_reduce_none,
  6, 150, :_reduce_425,
  0, 150, :_reduce_426,
  1, 291, :_reduce_427,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  2, 292, :_reduce_430,
  1, 292, :_reduce_none,
  2, 152, :_reduce_432,
  1, 152, :_reduce_none,
  1, 211, :_reduce_434,
  1, 211, :_reduce_435,
  1, 211, :_reduce_none,
  1, 212, :_reduce_437,
  1, 294, :_reduce_none,
  2, 294, :_reduce_439,
  3, 295, :_reduce_440,
  1, 295, :_reduce_441,
  3, 213, :_reduce_442,
  3, 214, :_reduce_443,
  3, 215, :_reduce_444,
  3, 215, :_reduce_445,
  1, 299, :_reduce_446,
  3, 299, :_reduce_447,
  1, 300, :_reduce_none,
  2, 300, :_reduce_449,
  3, 216, :_reduce_450,
  3, 216, :_reduce_451,
  1, 302, :_reduce_452,
  3, 302, :_reduce_453,
  1, 296, :_reduce_454,
  2, 296, :_reduce_455,
  1, 297, :_reduce_456,
  2, 297, :_reduce_457,
  1, 298, :_reduce_458,
  2, 298, :_reduce_459,
  1, 301, :_reduce_460,
  0, 304, :_reduce_461,
  3, 301, :_reduce_462,
  0, 305, :_reduce_463,
  4, 301, :_reduce_464,
  1, 303, :_reduce_465,
  1, 303, :_reduce_466,
  1, 303, :_reduce_467,
  1, 303, :_reduce_none,
  2, 198, :_reduce_469,
  1, 198, :_reduce_470,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  3, 199, :_reduce_475,
  1, 293, :_reduce_none,
  1, 293, :_reduce_none,
  2, 293, :_reduce_478,
  2, 293, :_reduce_479,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 191, :_reduce_485,
  1, 191, :_reduce_486,
  1, 191, :_reduce_487,
  1, 191, :_reduce_488,
  1, 191, :_reduce_489,
  1, 191, :_reduce_490,
  1, 191, :_reduce_491,
  1, 217, :_reduce_492,
  1, 217, :_reduce_493,
  1, 160, :_reduce_494,
  1, 160, :_reduce_495,
  1, 164, :_reduce_496,
  1, 164, :_reduce_497,
  1, 227, :_reduce_498,
  0, 307, :_reduce_499,
  4, 227, :_reduce_500,
  2, 227, :_reduce_501,
  3, 229, :_reduce_502,
  2, 229, :_reduce_503,
  6, 279, :_reduce_504,
  8, 279, :_reduce_505,
  4, 279, :_reduce_506,
  6, 279, :_reduce_507,
  4, 279, :_reduce_508,
  6, 279, :_reduce_509,
  2, 279, :_reduce_510,
  4, 279, :_reduce_511,
  6, 279, :_reduce_512,
  2, 279, :_reduce_513,
  4, 279, :_reduce_514,
  2, 279, :_reduce_515,
  4, 279, :_reduce_516,
  1, 279, :_reduce_517,
  0, 279, :_reduce_518,
  1, 275, :_reduce_519,
  1, 275, :_reduce_520,
  1, 275, :_reduce_521,
  1, 275, :_reduce_522,
  1, 262, :_reduce_none,
  1, 262, :_reduce_524,
  1, 309, :_reduce_none,
  3, 309, :_reduce_526,
  1, 266, :_reduce_527,
  3, 266, :_reduce_528,
  3, 310, :_reduce_529,
  3, 311, :_reduce_530,
  1, 267, :_reduce_531,
  3, 267, :_reduce_532,
  1, 308, :_reduce_533,
  3, 308, :_reduce_534,
  1, 312, :_reduce_none,
  1, 312, :_reduce_none,
  2, 268, :_reduce_537,
  1, 268, :_reduce_538,
  1, 313, :_reduce_none,
  1, 313, :_reduce_none,
  2, 270, :_reduce_541,
  2, 269, :_reduce_542,
  0, 269, :_reduce_543,
  1, 230, :_reduce_none,
  0, 314, :_reduce_545,
  4, 230, :_reduce_546,
  1, 218, :_reduce_547,
  2, 218, :_reduce_548,
  1, 205, :_reduce_none,
  3, 205, :_reduce_550,
  3, 315, :_reduce_551,
  2, 315, :_reduce_552,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  0, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 185, :_reduce_none,
  2, 163, :_reduce_none,
  0, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 228, :_reduce_574,
  1, 228, :_reduce_none,
  1, 145, :_reduce_none,
  2, 145, :_reduce_577,
  0, 143, :_reduce_578 ]

racc_reduce_n = 579

racc_shift_n = 990

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAST_TOKEN => 132,
  :tLAMBDA => 133,
  :tLAMBEG => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tLAMBDA",
  "tLAMBEG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_57(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary = list_append val[0], s(:splat, val[2])
                      ary.concat val[4][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      ary = s(:array, s(:splat))
                      ary.concat val[2][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_230(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~"
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0] << s(:hash, *val[2][1..-1]) # TODO: self.args
                    
    result
end

def _reduce_252(val, _values, result)
                      result = s(:hash, *val[0].values)
                    
    result
end

def _reduce_253(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_254(val, _values, result)
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_259(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_279(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_280(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_281(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_282(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_287(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_294(val, _values, result)
                      raise "no3\non#{val.inspect}"
                    
    result
end

def _reduce_295(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call nil, oper.to_sym
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 296 omitted

def _reduce_297(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_298(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_299(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_301(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_302(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_304(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_307(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_308(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_312(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_313(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_314(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_315(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_317(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_322(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_323(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_325(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_326(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_327(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_329(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_330(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_331(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_358(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_359(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_360(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_361(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_362(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_363(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_364(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_365(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_366(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_367(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_368(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_369(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_370(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_371(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
 result = 0 
    result
end

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

# reduce 387 omitted

def _reduce_388(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 392 omitted

def _reduce_393(val, _values, result)
                      # TODO: dyna_push ? hrm
                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_394(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                    
    result
end

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_399(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_400(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_401(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_402(val, _values, result)
                      # TODO:
                      # if (nd_type($1) == NODE_YIELD) {
                      #     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_404(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_405(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_406(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_407(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_409(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_410(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_411(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_415(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_416(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_417(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_418(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_419(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_420(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_421(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 423 omitted

# reduce 424 omitted

def _reduce_425(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_426(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_427(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 428 omitted

# reduce 429 omitted

def _reduce_430(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 431 omitted

def _reduce_432(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 433 omitted

def _reduce_434(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_435(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 438 omitted

def _reduce_439(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_444(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_445(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[0] << new_word_list_entry(val)
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << new_qword_list_entry(val)
                    
    result
end

def _reduce_454(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_455(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_457(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_459(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_461(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_462(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_464(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_465(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_466(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_467(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 471 omitted

# reduce 472 omitted

# reduce 473 omitted

# reduce 474 omitted

def _reduce_475(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 476 omitted

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_479(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

def _reduce_485(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_486(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_487(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_488(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_490(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_491(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_492(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_493(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_494(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_496(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_497(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_498(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_499(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_500(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_501(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_504(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_505(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_506(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_507(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_508(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_509(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_510(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_511(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_512(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_513(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_514(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_515(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_516(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_517(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_518(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_519(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_520(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_521(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_522(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 523 omitted

def _reduce_524(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 525 omitted

def _reduce_526(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_527(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_528(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_529(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_530(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_532(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_534(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 535 omitted

# reduce 536 omitted

def _reduce_537(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_538(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 539 omitted

# reduce 540 omitted

def _reduce_541(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = nil
                    
    result
end

# reduce 544 omitted

def _reduce_545(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_546(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_547(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_548(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 549 omitted

def _reduce_550(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_551(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_552(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      result = s(:array, s(:lit, label.to_sym), val[1])
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

# reduce 555 omitted

# reduce 556 omitted

# reduce 557 omitted

# reduce 558 omitted

# reduce 559 omitted

# reduce 560 omitted

# reduce 561 omitted

# reduce 562 omitted

# reduce 563 omitted

# reduce 564 omitted

# reduce 565 omitted

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

def _reduce_574(val, _values, result)
 yyerrok 
    result
end

# reduce 575 omitted

# reduce 576 omitted

def _reduce_577(val, _values, result)
 yyerrok 
    result
end

def _reduce_578(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby19Parser
