#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby18Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-503,497,261,261,197,-83,-450,-503,-503,-503,-450,-90,3,-503,-503,647',
'-503,-89,-85,-87,-86,439,538,-64,254,-503,503,-88,504,-77,-438,255,497',
'497,-84,-503,-503,-438,-503,-503,-503,-503,-503,497,198,199,-82,195',
'-75,98,-90,596,-83,626,196,567,-83,497,597,198,199,-72,709,194,-503',
'-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,626',
'626,-503,-503,-503,-499,554,537,260,260,-503,566,-500,-503,727,-77,504',
'261,-503,724,-503,294,-503,-503,-503,-503,-503,-503,-503,-75,-503,-503',
'-503,-77,102,-82,496,190,402,101,646,-81,-77,-79,-78,-503,-503,-281',
'-78,191,-503,-80,-86,-77,-281,-281,-281,-77,-76,102,-281,-281,-79,-281',
'101,102,102,496,496,294,101,101,102,218,625,-496,102,101,496,-365,192',
'101,-281,-281,-90,-281,-281,-281,-281,-281,102,485,496,193,484,101,472',
'102,102,625,625,260,101,101,526,215,198,199,237,217,216,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-438,-79,-281',
'-281,-281,526,557,-438,526,285,-281,531,-496,-281,-497,-503,-438,-89',
'-281,-79,-281,218,-281,-281,-281,-281,-281,-281,-281,526,-281,596,-281',
'526,-496,287,288,286,597,-79,528,527,526,-79,567,-281,-281,-275,-80',
'674,-281,472,-88,215,-275,-275,-275,217,216,-275,-275,-275,692,-275',
'-441,-503,528,527,524,528,527,-441,-503,-275,-275,567,-497,-499,566',
'294,-441,-503,-275,-275,548,-275,-275,-275,-275,-275,528,527,529,-81',
'528,527,533,-89,-497,-503,549,102,567,528,527,539,101,485,-85,566,487',
'-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275',
'294,-77,-275,-275,-275,-85,485,-275,693,490,-275,566,485,-275,-275,487',
'-275,-79,-275,779,-275,-87,-275,-275,-275,-275,-275,-275,-275,75,-275',
'682,-275,-441,-448,-447,-446,76,470,471,-441,-448,-447,-446,-519,-275',
'-275,-275,-275,-503,-275,-519,-519,-519,-87,-519,-519,-519,-519,-327',
'-519,833,-519,-519,-519,-84,-327,-519,-519,-519,-519,-519,-499,-76,324',
'-327,345,-84,-500,-519,-519,-519,-519,-519,-519,-519,-519,102,198,199',
'-519,-519,101,-519,-519,-519,-519,-519,348,-503,661,368,659,658,657',
'660,-503,665,664,668,667,-499,833,369,-443,-503,-444,-445,521,-519,398',
'-443,-499,-444,-445,522,-519,399,-500,-499,-519,263,-519,-503,-499,-500',
'400,-519,-499,401,-500,638,263,-519,-500,639,665,664,668,667,-449,198',
'199,403,-519,404,-499,-449,665,664,668,667,-500,466,433,-519,-449,-519',
'436,-519,467,102,-519,-499,-499,-499,101,-499,-519,465,-519,-499,-499',
'-519,439,-503,-499,444,-499,-499,-499,-499,-499,-499,-499,736,727,198',
'199,-499,-499,-499,-499,-499,-499,-499,365,218,102,102,367,366,102,101',
'101,-499,263,101,-499,-499,-499,-499,-499,-499,-499,-499,-499,-499,-63',
'-499,-499,460,-499,-499,-499,-503,668,667,461,215,736,727,-503,217,216',
'213,214,-499,462,-274,468,-503,266,294,-499,694,-274,-499,-499,263,-499',
'-499,473,474,-499,-274,-499,218,-499,-503,-499,294,489,475,506,-282',
'492,358,-499,508,476,507,-282,-499,-499,-499,-499,-499,-499,400,505',
'-282,-499,-499,-500,-500,-500,509,-500,532,536,-86,-500,-500,543,545',
'-262,-500,547,-500,-500,-500,-500,-500,-500,-500,263,218,218,218,-500',
'-500,-500,-500,-500,-500,-500,771,772,218,773,96,97,577,593,294,-500',
'598,237,-500,-500,-500,-500,-500,-500,-500,-500,-500,-500,599,-500,-500',
'600,-500,-500,-500,218,222,227,228,229,224,226,234,235,230,231,643,-520',
'-520,-282,-72,232,233,641,-500,557,-282,-500,-500,601,-500,-500,642',
'478,-500,-282,-500,215,-500,221,-500,217,216,213,214,225,223,219,-500',
'220,614,615,294,-500,-500,-500,-500,-500,-500,621,-283,504,-500,-500',
'65,66,67,-283,54,629,676,-88,59,60,678,444,-283,63,444,61,62,64,26,27',
'68,69,695,706,439,439,25,31,30,91,90,92,93,246,711,20,713,717,718,723',
'544,263,44,263,218,95,94,85,53,87,86,88,89,96,97,218,83,84,727,41,42',
'40,218,222,227,228,229,224,226,234,235,230,231,-281,211,212,-449,732',
'232,233,-281,203,727,-449,207,-500,740,55,56,-281,741,57,-449,745,215',
'759,221,43,217,216,213,214,225,223,219,21,220,761,764,765,81,75,77,78',
'79,80,766,767,-263,76,82,102,236,780,-218,-281,101,65,66,67,10,54,-281',
'788,577,59,60,-500,577,577,63,-281,61,62,64,26,27,68,69,800,263,263',
'237,25,31,30,91,90,92,93,805,-262,20,104,105,106,107,108,9,44,11,12',
'95,94,85,53,87,86,88,89,96,97,809,83,84,812,41,42,40,218,222,227,228',
'229,224,226,234,235,230,231,843,-520,-520,-274,814,232,233,844,39,817',
'-274,33,821,825,55,56,842,826,57,-274,35,215,294,221,43,217,216,213',
'214,225,223,219,21,220,837,838,845,81,75,77,78,79,80,846,-282,847,76',
'82,65,66,67,-282,54,358,848,-283,59,60,852,855,-282,63,-283,61,62,64',
'249,250,68,69,857,-283,858,859,248,278,282,91,90,92,93,864,218,104,105',
'106,107,108,865,869,279,872,873,95,94,85,53,87,86,88,89,96,97,764,83',
'84,764,765,661,283,659,658,657,660,215,-281,886,889,217,216,213,214',
'-281,577,577,905,906,-500,907,783,911,-281,207,614,915,55,56,916,764',
'57,104,105,106,107,108,661,651,659,658,657,660,918,919,577,665,664,668',
'667,81,75,77,78,79,80,577,577,,76,82,65,66,67,786,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,665,664,668,667,248,278,282,91,90,92,93,,,,',
',,,544,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,218,222,227',
'228,229,224,226,234,235,230,231,,211,212,,,232,233,,783,,,207,,,55,56',
',,57,,,215,,221,,217,216,213,214,225,223,219,,220,,,,81,75,77,78,79',
'80,,,,76,82,,236,,880,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57',
',35,,,,43,661,,659,658,657,660,,21,,,,,81,75,77,78,79,80,,,,76,82,8',
'65,66,67,10,54,,,,59,60,,,,63,651,61,62,64,26,27,68,69,665,664,668,667',
'25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,218,-520,-520,-520,-520,224,226,,,-520,-520,,,,',
',232,233,,39,,,268,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225',
'223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,,,,,,,,',
',,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214',
',,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44',
'11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,,,,,,,,,,,',
',,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,,',
'219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,',
',,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,,,,,,,,,,,,,,',
',232,233,,39,,,268,,,55,56,,,57,,35,215,,221,43,217,216,213,214,,,219',
'21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12',
'95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,,,,,,,,,,,,,,,,232',
'233,,39,,,268,,,55,56,,,57,,35,215,,221,43,217,216,213,214,,,219,21',
'220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61',
'62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,-520,-520,-520,-520,224',
'226,,,-520,-520,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217',
'216,213,214,225,223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66',
'67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,218,-520,-520,-520,-520,224,226,,,-520,-520,,,,,,232,233,,39,,,33',
',,55,56,,,57,,35,215,,221,43,217,216,213,214,225,223,219,21,220,,,,81',
'75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87',
'86,88,89,96,97,,83,84,,41,42,40,218,-520,-520,-520,-520,224,226,,,-520',
'-520,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213',
'214,225,223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,-520',
'-520,-520,-520,224,226,,,-520,-520,,,,,,232,233,,39,,,33,,,55,56,,,57',
',35,215,,221,43,217,216,213,214,225,223,219,21,220,,,,81,75,77,78,79',
'80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,',
',,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,218,-520,-520,-520,-520,224,226,,,-520,-520,',
',,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225',
'223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,222,227',
'228,229,224,226,,,230,231,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215',
',221,43,217,216,213,214,225,223,219,21,220,,,,81,75,77,78,79,80,,,,76',
'82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,218,222,227,228,229,224,226,234,,230,231,,,,,,232,233,,39',
',,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225,223,219,21,220',
',,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,218,,,,,,,,,,,,,,,,232,233,,39',
',,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,218,,,,,,,,,,,,,,,,232,233,,39,,,33,,,55,56',
',,57,,35,215,,221,43,217,216,213,214,,,,21,,,,,81,75,77,78,79,80,,,',
'76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31',
'30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,218,,,,,,,,,,,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215',
',,43,217,216,213,214,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57',
',35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,',
',,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,',
',63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55',
'56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57',
',35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,10,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44',
'11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,',
',,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,',
',,76,82,156,167,157,180,153,173,163,162,183,184,178,161,160,155,181',
'185,186,165,154,168,172,174,166,159,,,175,182,177,176,169,179,164,152',
'171,170,,,,,,151,158,149,150,147,148,112,114,111,,113,,,,,,,,142,143',
',140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137',
'136,,123,141,139,138,134,135,130,128,121,,122,,,146,81,,,,,,,,,,82,156',
'167,157,180,153,173,163,162,183,184,178,161,160,155,181,185,186,165',
'154,168,172,174,166,159,,,175,182,177,176,169,179,164,152,171,170,,',
',,,151,158,149,150,147,148,112,114,,,113,,,,,,,,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,,,146,81,,,65,66,67,,54,,,82,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,',
',95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203',
',,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,244,',
'246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,',
'44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,',
',,,203,,,207,,,55,56,,,57,,244,,246,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,244,,246,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,-252,-252,-252,,-252,,,,-252',
'-252,,,,-252,,-252,-252,-252,-252,-252,-252,-252,,,,,-252,-252,-252',
'-252,-252,-252,-252,,,,,,,,,,-252,,,-252,-252,-252,-252,-252,-252,-252',
'-252,-252,-252,,-252,-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252,,',
'-252,263,,-252,-252,,,-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252,-252',
'-252,-252,-252,-252,,,,-252,-252,-252,-252,-252,,-252,,,,-252,-252,',
',,-252,,-252,-252,-252,-252,-252,-252,-252,,,,,-252,-252,-252,-252,-252',
'-252,-252,,,,,,,,,,-252,,,-252,-252,-252,-252,-252,-252,-252,-252,-252',
'-252,,-252,-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252,,,-252,266,',
'-252,-252,,,-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252,-252,-252,-252',
'-252,-252,,,,-252,-252,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,273,,,55,56,,,57,,272',
',,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,',
'63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,276',
',,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301',
',,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,',
',,,318,,,33,,,55,56,,,57,,35,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76',
'82,-496,-496,-496,,-496,,,,-496,-496,,,,-496,,-496,-496,-496,-496,-496',
'-496,-496,,-496,,,-496,-496,-496,-496,-496,-496,-496,,,,,,,,,,-496,',
',-496,-496,-496,-496,-496,-496,-496,-496,-496,-496,,-496,-496,,-496',
'-496,-496,,,,,,,,,,,,,,,,,,,,-496,,,-496,-496,,-496,-496,,,-496,,-496',
',-496,,-496,,,,,,,,-496,,-496,,,-496,-496,-496,-496,-496,-496,,,,-496',
'-496,-497,-497,-497,,-497,,,,-497,-497,,,,-497,,-497,-497,-497,-497',
'-497,-497,-497,,-497,,,-497,-497,-497,-497,-497,-497,-497,,,,,,,,,,-497',
',,-497,-497,-497,-497,-497,-497,-497,-497,-497,-497,,-497,-497,,-497',
'-497,-497,,,,,,,,,,,,,,,,,,,,-497,,,-497,-497,,-497,-497,,,-497,,-497',
',-497,,-497,,,,,,,,-497,,-497,,,-497,-497,-497,-497,-497,-497,,,,-497',
'-497,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41',
'42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,',
',,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,',
'59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31',
'30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55',
'56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,',
',,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,',
',,,,,,,,,,203,,,207,,,55,56,,,57,,376,,,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,376,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,',
',55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,',
',,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,',
',,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,203,,,207,,,448,56,,,57,,244,,246,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,244,,246',
',43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,458,55,56,,,57,,244,,246,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,207,,,55,56,,,57,,,,,,,,,,,,',
',,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62',
'64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,478',
',55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,',
',95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203',
',,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,279,,,95,94,510,53,87,86,511,89,96,97,,83,84,,',
',283,,,,,,,,,,,,,,,,,,,,512,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,510,53,87,86',
'511,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,512,,,207,,,55,56,,,57',
',,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173',
'163,162,183,184,178,161,160,155,181,185,186,165,154,168,172,174,166',
'159,,,175,182,177,176,169,179,164,152,171,170,,,,,,151,158,149,150,147',
'148,112,114,,,113,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,',
',144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,,,146,81,,,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,-252,-252,-252,,-252',
',,,-252,-252,,,,-252,,-252,-252,-252,-252,-252,-252,-252,,,,,-252,-252',
'-252,-252,-252,-252,-252,,,,,,,,,,-252,,,-252,-252,-252,-252,-252,-252',
'-252,-252,-252,-252,,-252,-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252',
',,-252,263,,-252,-252,,,-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252',
'-252,-252,-252,-252,-252,,,,-252,-252,-501,-501,-501,,-501,,,,-501,-501',
',,,-501,,-501,-501,-501,-501,-501,-501,-501,,,,,-501,-501,-501,-501',
'-501,-501,-501,,,,,,,,,,-501,,,-501,-501,-501,-501,-501,-501,-501,-501',
'-501,-501,,-501,-501,,-501,-501,-501,,,,,,,,,,,,,,,,,,,,-501,,,-501',
'-501,,-501,-501,,,-501,,-501,,-501,,-501,,,,,,,,-501,,,,,-501,-501,-501',
'-501,-501,-501,,,,-501,-501,-502,-502,-502,,-502,,,,-502,-502,,,,-502',
',-502,-502,-502,-502,-502,-502,-502,,,,,-502,-502,-502,-502,-502,-502',
'-502,,,,,,,,,,-502,,,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502',
',-502,-502,,-502,-502,-502,,,,,,,,,,,,,,,,,,,,-502,,,-502,-502,,-502',
'-502,,,-502,,-502,,-502,,-502,,,,,,,,-502,,,,,-502,-502,-502,-502,-502',
'-502,,,,-502,-502,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,569,,246,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,573,',
'246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31',
'30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,587,,246,,43,,',
',,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,',
'61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31',
'30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55',
'56,,,57,,617,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,',
',,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173',
'163,162,183,184,178,161,160,155,181,185,186,165,154,168,172,174,166',
'159,,,175,182,177,176,169,179,164,152,171,170,,,,,,151,158,149,150,147',
'148,112,114,,,113,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,',
',144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,,,146,81,,,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,681,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,',
',44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,',
',,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,',
',,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,',
',,,,,,,,,,,,,,,,276,,,273,,,55,56,,,57,,699,,700,,,,,,,,,701,,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,',
',,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,',
',55,56,,,57,,569,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,376,,,,43,,,,,,,,210,',
',,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55',
'56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,',
'54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,203,,,207,,,55,56,,,57,,744,,,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,',
',,,,,,,783,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,',
',76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278',
'282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,791,,246,,43,,,',
',,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,',
'61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,796,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,',
'76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278',
'282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,798,,246,,43,,,',
',,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,',
'61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87',
'86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,273,,,55,56,,',
'57,,841,,840,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,',
',,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,',
',,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,',
',,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283',
',,,,,,,,,,,,,,,,,,,783,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,866,',
',,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,783',
',,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,783,,,207,,,55,56,,,57,,,,,,',
',,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,',
'61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,890,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,',
'76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278',
'282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,893,,246,,43,,,',
',,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,',
'61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283',
',,,,,,,,,,,,,,,,,,,783,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283',
',,,,,,,,,,,,,,,,,,,783,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,922,',
'246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,',
',,,783,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162,183,184,178',
'161,160,155,181,185,186,165,154,168,172,174,166,159,,,175,182,177,332',
'331,333,330,152,171,170,,,,,,151,158,149,150,328,329,326,114,87,86,327',
'89,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133',
',,,,,338,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,,',
'146,156,167,157,180,153,173,163,162,183,184,178,161,160,155,181,185',
'186,165,154,168,172,174,166,159,,,175,182,177,176,169,179,164,152,171',
'170,,,,,,151,158,149,150,147,148,112,114,355,354,113,356,,,,,,,142,143',
',140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137',
'136,,123,141,139,138,134,135,130,128,121,,122,,,146,156,167,157,180',
'153,173,163,162,183,184,178,161,160,155,181,185,186,165,154,168,172',
'174,166,159,,,175,182,177,176,169,179,164,152,171,170,,,,,,151,158,149',
'150,147,148,112,114,,,113,,,,,,,,142,143,,140,124,125,126,,129,131,',
',127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135',
'130,128,121,,122,383,386,146,,384,,,,,,,,142,143,,140,124,125,126,,129',
'131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138',
'134,135,130,128,121,,122,388,392,146,,390,,,,,,,,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,441,386,146,,442,,,,,,,,142,143,,140',
'124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136',
',123,141,139,138,134,135,130,128,121,,122,441,386,146,,442,,,,,,,,142',
'143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,',
',137,136,,123,141,139,138,134,135,130,128,121,,122,558,386,146,,559',
',,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,',
',,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,560,392',
'146,,561,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145',
'132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122',
'603,386,146,,604,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,',
'144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,606,392,146,,607,,,,,,,,142,143,,140,124,125,126,,129,131,',
',127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135',
'130,128,121,,122,558,386,146,,559,,,,,,,,142,143,,140,124,125,126,,129',
'131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138',
'134,135,130,128,121,,122,560,392,146,,561,,,,,,,,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,633,386,146,,634,,,,,,,,142,143,,140',
'124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136',
',123,141,139,138,134,135,130,128,121,,122,635,392,146,,636,,,,,,,,142',
'143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,',
',137,136,,123,141,139,138,134,135,130,128,121,,122,,,146,218,222,227',
'228,229,224,226,234,235,230,231,,211,212,,,232,233,,,,-218,,,,,,,,,',
',215,,221,,217,216,213,214,225,223,219,,220,,,,,,,441,386,,,442,,,,',
'236,,-218,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133',
',,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,441,386',
'146,,442,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145',
'132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122',
'747,392,146,,748,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,',
'144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,441,386,146,,442,,,,,,,,142,143,,140,124,125,126,,129,131,',
',127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135',
'130,128,121,,122,882,386,146,,883,,,,,,,,142,143,,140,124,125,126,,129',
'131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138',
'134,135,130,128,121,,122,884,392,146,,885,,,,,,,,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,,,146,218,222,227,228,229,224,226,234',
'235,230,231,,211,212,,,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214',
'225,223,219,,220,,,,,,,,,,,,,,,,236,,577,218,222,227,228,229,224,226',
'234,235,230,231,,211,212,,,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213',
'214,225,223,219,,220,,218,222,227,228,229,224,226,234,235,230,231,,211',
'212,236,564,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223',
'219,,220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236,232',
'233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222',
'227,228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,',
',,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228,229,224',
'226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217',
'216,213,214,225,223,219,,220,218,222,227,228,229,224,226,234,235,230',
'231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225',
'223,219,,220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236',
'232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218',
'222,227,228,229,224,226,234,235,230,231,,211,212,294,236,232,233,,,',
',,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228',
'229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215',
',221,,217,216,213,214,225,223,219,,220,218,222,227,228,229,224,226,234',
'235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213',
'214,225,223,219,,220,218,222,227,228,229,224,226,234,235,230,231,,211',
'212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219',
',220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236,232,233',
',,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227',
'228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,',
'215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228,229,224,226',
'234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216',
'213,214,225,223,219,,220,218,222,227,228,229,224,226,234,235,230,231',
',211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223',
'219,,220,218,222,227,228,229,224,226,234,235,230,231,,211,212,294,236',
'232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,,,',
',,,,,,,,,,,,236' ]
        racc_action_table = arr = ::Array.new(25044, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'388,309,58,280,17,316,38,388,388,388,202,319,1,388,388,516,388,508,633',
'634,635,585,349,600,28,388,314,636,314,603,326,28,310,743,745,388,388',
'326,388,388,388,388,388,808,612,612,17,16,38,3,17,454,38,499,16,431',
'202,813,454,671,671,600,585,16,388,388,388,388,388,388,388,388,388,388',
'388,388,388,388,500,746,388,388,388,635,388,349,58,280,388,431,636,388',
'867,603,867,29,388,612,388,454,388,388,388,388,388,388,388,316,388,388',
'388,603,309,319,309,12,204,309,516,508,633,634,635,388,388,390,388,13',
'388,636,388,603,390,390,390,603,745,516,390,390,604,390,516,310,743',
'310,743,671,310,743,499,407,499,510,808,499,808,29,14,808,390,390,204',
'390,390,390,390,390,813,299,813,15,299,813,401,500,746,500,746,29,500',
'746,534,407,18,18,23,407,407,390,390,390,390,390,390,390,390,390,390',
'390,390,390,390,510,604,390,390,390,340,390,510,344,37,390,344,510,390',
'511,606,510,401,390,604,390,408,390,390,390,390,390,390,390,342,390',
'721,390,346,510,40,40,39,721,604,534,534,351,604,450,390,390,53,390',
'534,390,286,390,408,53,53,53,408,408,53,53,53,558,53,511,606,340,340',
'340,344,344,511,606,53,53,451,511,606,450,721,511,606,53,53,383,53,53',
'53,53,53,342,342,342,286,346,346,346,286,511,606,384,5,583,351,351,351',
'5,300,558,451,300,53,53,53,53,53,53,53,53,53,53,53,53,53,53,44,383,53',
'53,53,383,303,53,559,303,53,583,306,53,53,306,53,384,53,695,53,384,53',
'53,53,53,53,53,53,73,53,547,53,327,328,329,330,73,283,283,327,328,329',
'330,440,53,53,53,53,747,53,440,440,440,559,443,440,440,440,45,440,761',
'443,443,443,695,45,443,443,443,440,443,882,547,65,45,79,547,883,440',
'440,443,440,440,440,440,440,313,296,296,443,443,313,443,443,443,443',
'443,80,747,651,187,651,651,651,651,747,761,761,761,761,747,873,189,331',
'747,332,333,335,440,201,331,882,332,333,335,440,201,883,882,443,440',
'440,747,882,883,201,443,882,203,883,512,443,443,883,512,651,651,651',
'651,274,308,308,205,440,206,882,274,873,873,873,873,883,275,242,443',
'274,440,243,440,275,647,440,560,560,560,647,560,443,275,443,560,560',
'443,247,884,560,256,560,560,560,560,560,560,560,620,620,648,648,560',
'560,560,560,560,560,560,111,426,652,754,111,111,823,652,754,560,259',
'823,560,560,560,560,560,560,560,560,560,560,267,560,560,269,560,560',
'560,884,764,764,270,426,896,896,884,426,426,426,426,884,271,277,276',
'884,278,279,560,560,277,560,560,282,560,560,287,288,560,277,560,291',
'560,884,560,298,302,289,317,468,304,315,560,318,289,317,468,560,560',
'560,560,560,560,289,317,468,560,560,561,561,561,320,561,345,348,560',
'561,561,370,375,378,561,382,561,561,561,561,561,561,561,389,409,410',
'411,561,561,561,561,561,561,561,672,672,412,672,672,672,437,452,453',
'561,455,456,561,561,561,561,561,561,561,561,561,561,457,561,561,459',
'561,561,561,405,405,405,405,405,405,405,405,405,405,405,514,405,405',
'639,460,405,405,514,561,561,639,561,561,464,561,561,514,469,561,639',
'561,405,561,405,561,405,405,405,405,405,405,405,561,405,479,480,481',
'561,561,561,561,561,561,495,723,501,561,561,63,63,63,723,63,502,538',
'561,63,63,542,550,723,63,555,63,63,63,63,63,63,63,562,570,572,575,63',
'63,63,63,63,63,63,577,586,63,589,594,595,602,373,605,63,608,610,63,63',
'63,63,63,63,63,63,63,63,611,63,63,613,63,63,63,373,373,373,373,373,373',
'373,373,373,373,373,607,373,373,781,616,373,373,607,63,622,781,63,607',
'628,63,63,607,630,63,781,632,373,653,373,63,373,373,373,373,373,373',
'373,63,373,654,655,661,63,63,63,63,63,63,666,669,680,63,63,63,373,698',
'373,748,63,100,100,100,100,100,748,702,704,100,100,748,707,712,100,748',
'100,100,100,100,100,100,100,714,719,720,722,100,100,100,100,100,100',
'100,725,728,100,7,7,7,7,7,100,100,100,100,100,100,100,100,100,100,100',
'100,100,100,729,100,100,734,100,100,100,406,406,406,406,406,406,406',
'406,406,406,406,782,406,406,784,737,406,406,782,100,742,784,100,750',
'755,100,100,782,756,100,784,100,406,757,406,100,406,406,406,406,406',
'406,406,100,406,769,775,783,100,100,100,100,100,100,785,845,786,100',
'100,699,699,699,845,699,100,789,907,699,699,794,797,845,699,907,699',
'699,699,699,699,699,699,801,907,802,803,699,699,699,699,699,699,699',
'815,427,109,109,109,109,109,816,822,699,827,828,699,699,699,699,699',
'699,699,699,699,699,829,699,699,832,833,519,699,519,519,519,519,427',
'885,846,850,427,427,427,427,885,853,856,879,880,885,881,699,891,885',
'699,895,901,699,699,902,903,699,357,357,357,357,357,759,519,759,759',
'759,759,904,905,909,519,519,519,519,699,699,699,699,699,699,912,925',
',699,699,841,841,841,699,841,,,,841,841,,,,841,,841,841,841,841,841',
'841,841,759,759,759,759,841,841,841,841,841,841,841,,,,,,,,563,,841',
',,841,841,841,841,841,841,841,841,841,841,,841,841,,,,841,563,563,563',
'563,563,563,563,563,563,563,563,,563,563,,,563,563,,841,,,841,,,841',
'841,,,841,,,563,,563,,563,563,563,563,563,563,563,,563,,,,841,841,841',
'841,841,841,,,,841,841,,563,,841,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2',
'2,2,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,,2,2',
'2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,,2,,2,,,,2,836,,836,836,836,836,,2',
',,,,2,2,2,2,2,2,,,,2,2,33,33,33,33,33,33,,,,33,33,,,,33,836,33,33,33',
'33,33,33,33,836,836,836,836,33,33,33,33,33,33,33,,,33,,,,,,33,33,33',
'33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,416,416,416,416,416',
'416,416,,,416,416,,,,,,416,416,,33,,,33,,,33,33,,,33,,33,416,,416,33',
'416,416,416,416,416,416,416,33,416,,,,33,33,33,33,33,33,,,,33,33,190',
'190,190,190,190,190,,,,190,190,,,,190,,190,190,190,190,190,190,190,',
',,,190,190,190,190,190,190,190,,,190,,,,,,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,,190,190,,190,190,190,417,,,,,,,,,,,,,,',
',417,417,,190,,,190,,,190,190,,,190,,190,417,,417,190,417,417,417,417',
',,417,190,417,,,,190,190,190,190,190,190,,,,190,190,207,207,207,207',
'207,207,,,,207,207,,,,207,,207,207,207,207,207,207,207,,,,,207,207,207',
'207,207,207,207,,,207,,,,,,207,207,207,207,207,207,207,207,207,207,207',
'207,207,207,,207,207,,207,207,207,418,,,,,,,,,,,,,,,,418,418,,207,,',
'207,,,207,207,,,207,,207,418,,418,207,418,418,418,418,,,418,207,418',
',,,207,207,207,207,207,207,,,,207,207,268,268,268,268,268,268,,,,268',
'268,,,,268,,268,268,268,268,268,268,268,,,,,268,268,268,268,268,268',
'268,,,268,,,,,,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
',268,268,,268,268,268,419,,,,,,,,,,,,,,,,419,419,,268,,,268,,,268,268',
',,268,,268,419,,419,268,419,419,419,419,,,419,268,419,,,,268,268,268',
'268,268,268,,,,268,268,273,273,273,273,273,273,,,,273,273,,,,273,,273',
'273,273,273,273,273,273,,,,,273,273,273,273,273,273,273,,,273,,,,,,273',
'273,273,273,273,273,273,273,273,273,273,273,273,273,,273,273,,273,273',
'273,420,,,,,,,,,,,,,,,,420,420,,273,,,273,,,273,273,,,273,,273,420,',
'420,273,420,420,420,420,,,420,273,420,,,,273,273,273,273,273,273,,,',
'273,273,295,295,295,295,295,295,,,,295,295,,,,295,,295,295,295,295,295',
'295,295,,,,,295,295,295,295,295,295,295,,,295,,,,,,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,,295,295,,295,295,295,421,421,421',
'421,421,421,421,,,421,421,,,,,,421,421,,295,,,295,,,295,295,,,295,,295',
'421,,421,295,421,421,421,421,421,421,421,295,421,,,,295,295,295,295',
'295,295,,,,295,295,369,369,369,369,369,369,,,,369,369,,,,369,,369,369',
'369,369,369,369,369,,,,,369,369,369,369,369,369,369,,,369,,,,,,369,369',
'369,369,369,369,369,369,369,369,369,369,369,369,,369,369,,369,369,369',
'422,422,422,422,422,422,422,,,422,422,,,,,,422,422,,369,,,369,,,369',
'369,,,369,,369,422,,422,369,422,422,422,422,422,422,422,369,422,,,,369',
'369,369,369,369,369,,,,369,369,494,494,494,494,494,494,,,,494,494,,',
',494,,494,494,494,494,494,494,494,,,,,494,494,494,494,494,494,494,,',
'494,,,,,,494,494,494,494,494,494,494,494,494,494,494,494,494,494,,494',
'494,,494,494,494,423,423,423,423,423,423,423,,,423,423,,,,,,423,423',
',494,,,494,,,494,494,,,494,,494,423,,423,494,423,423,423,423,423,423',
'423,494,423,,,,494,494,494,494,494,494,,,,494,494,498,498,498,498,498',
'498,,,,498,498,,,,498,,498,498,498,498,498,498,498,,,,,498,498,498,498',
'498,498,498,,,498,,,,,,498,498,498,498,498,498,498,498,498,498,498,498',
'498,498,,498,498,,498,498,498,424,424,424,424,424,424,424,,,424,424',
',,,,,424,424,,498,,,498,,,498,498,,,498,,498,424,,424,498,424,424,424',
'424,424,424,424,498,424,,,,498,498,498,498,498,498,,,,498,498,503,503',
'503,503,503,503,,,,503,503,,,,503,,503,503,503,503,503,503,503,,,,,503',
'503,503,503,503,503,503,,,503,,,,,,503,503,503,503,503,503,503,503,503',
'503,503,503,503,503,,503,503,,503,503,503,425,425,425,425,425,425,425',
',,425,425,,,,,,425,425,,503,,,503,,,503,503,,,503,,503,425,,425,503',
'425,425,425,425,425,425,425,503,425,,,,503,503,503,503,503,503,,,,503',
'503,649,649,649,649,649,649,,,,649,649,,,,649,,649,649,649,649,649,649',
'649,,,,,649,649,649,649,649,649,649,,,649,,,,,,649,649,649,649,649,649',
'649,649,649,649,649,649,649,649,,649,649,,649,649,649,428,428,428,428',
'428,428,428,,,428,428,,,,,,428,428,,649,,,649,,,649,649,,,649,,649,428',
',428,649,428,428,428,428,428,428,428,649,428,,,,649,649,649,649,649',
'649,,,,649,649,650,650,650,650,650,650,,,,650,650,,,,650,,650,650,650',
'650,650,650,650,,,,,650,650,650,650,650,650,650,,,650,,,,,,650,650,650',
'650,650,650,650,650,650,650,650,650,650,650,,650,650,,650,650,650,429',
'429,429,429,429,429,429,429,,429,429,,,,,,429,429,,650,,,650,,,650,650',
',,650,,650,429,,429,650,429,429,429,429,429,429,429,650,429,,,,650,650',
'650,650,650,650,,,,650,650,673,673,673,673,673,673,,,,673,673,,,,673',
',673,673,673,673,673,673,673,,,,,673,673,673,673,673,673,673,,,673,',
',,,,673,673,673,673,673,673,673,673,673,673,673,673,673,673,,673,673',
',673,673,673,413,,,,,,,,,,,,,,,,413,413,,673,,,673,,,673,673,,,673,',
'673,413,,413,673,413,413,413,413,,,,673,,,,,673,673,673,673,673,673',
',,,673,673,703,703,703,703,703,703,,,,703,703,,,,703,,703,703,703,703',
'703,703,703,,,,,703,703,703,703,703,703,703,,,703,,,,,,703,703,703,703',
'703,703,703,703,703,703,703,703,703,703,,703,703,,703,703,703,414,,',
',,,,,,,,,,,,,414,414,,703,,,703,,,703,703,,,703,,703,414,,414,703,414',
'414,414,414,,,,703,,,,,703,703,703,703,703,703,,,,703,703,715,715,715',
'715,715,715,,,,715,715,,,,715,,715,715,715,715,715,715,715,,,,,715,715',
'715,715,715,715,715,,,715,,,,,,715,715,715,715,715,715,715,715,715,715',
'715,715,715,715,,715,715,,715,715,715,415,,,,,,,,,,,,,,,,415,415,,715',
',,715,,,715,715,,,715,,715,415,,,715,415,415,415,415,,,,715,,,,,715',
'715,715,715,715,715,,,,715,715,716,716,716,716,716,716,,,,716,716,,',
',716,,716,716,716,716,716,716,716,,,,,716,716,716,716,716,716,716,,',
'716,,,,,,716,716,716,716,716,716,716,716,716,716,716,716,716,716,,716',
'716,,716,716,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716,716,,,716,,716,',
',,716,,,,,,,,716,,,,,716,716,716,716,716,716,,,,716,716,727,727,727',
'727,727,727,,,,727,727,,,,727,,727,727,727,727,727,727,727,,,,,727,727',
'727,727,727,727,727,,,727,,,,,,727,727,727,727,727,727,727,727,727,727',
'727,727,727,727,,727,727,,727,727,727,,,,,,,,,,,,,,,,,,,,727,,,727,',
',727,727,,,727,,727,,,,727,,,,,,,,727,,,,,727,727,727,727,727,727,,',
',727,727,738,738,738,738,738,738,,,,738,738,,,,738,,738,738,738,738',
'738,738,738,,,,,738,738,738,738,738,738,738,,,738,,,,,,738,738,738,738',
'738,738,738,738,738,738,738,738,738,738,,738,738,,738,738,738,,,,,,',
',,,,,,,,,,,,,738,,,738,,,738,738,,,738,,738,,,,738,,,,,,,,738,,,,,738',
'738,738,738,738,738,,,,738,738,739,739,739,739,739,739,,,,739,739,,',
',739,,739,739,739,739,739,739,739,,,,,739,739,739,739,739,739,739,,',
'739,,,,,,739,739,739,739,739,739,739,739,739,739,739,739,739,739,,739',
'739,,739,739,739,,,,,,,,,,,,,,,,,,,,739,,,739,,,739,739,,,739,,739,',
',,739,,,,,,,,739,,,,,739,739,739,739,739,739,,,,739,739,751,751,751',
'751,751,751,,,,751,751,,,,751,,751,751,751,751,751,751,751,,,,,751,751',
'751,751,751,751,751,,,751,,,,,,751,751,751,751,751,751,751,751,751,751',
'751,751,751,751,,751,751,,751,751,751,,,,,,,,,,,,,,,,,,,,751,,,751,',
',751,751,,,751,,751,,,,751,,,,,,,,751,,,,,751,751,751,751,751,751,,',
',751,751,793,793,793,793,793,793,,,,793,793,,,,793,,793,793,793,793',
'793,793,793,,,,,793,793,793,793,793,793,793,,,793,,,,,,793,793,793,793',
'793,793,793,793,793,793,793,793,793,793,,793,793,,793,793,793,,,,,,',
',,,,,,,,,,,,,793,,,793,,,793,793,,,793,,793,,,,793,,,,,,,,793,,,,,793',
'793,793,793,793,793,,,,793,793,805,805,805,805,805,805,,,,805,805,,',
',805,,805,805,805,805,805,805,805,,,,,805,805,805,805,805,805,805,,',
'805,,,,,,805,805,805,805,805,805,805,805,805,805,805,805,805,805,,805',
'805,,805,805,805,,,,,,,,,,,,,,,,,,,,805,,,805,,,805,805,,,805,,805,',
',,805,,,,,,,,805,,,,,805,805,805,805,805,805,,,,805,805,818,818,818',
'818,818,818,,,,818,818,,,,818,,818,818,818,818,818,818,818,,,,,818,818',
'818,818,818,818,818,,,818,,,,,,818,818,818,818,818,818,818,818,818,818',
'818,818,818,818,,818,818,,818,818,818,,,,,,,,,,,,,,,,,,,,818,,,818,',
',818,818,,,818,,818,,,,818,,,,,,,,818,,,,,818,818,818,818,818,818,,',
',818,818,861,861,861,861,861,861,,,,861,861,,,,861,,861,861,861,861',
'861,861,861,,,,,861,861,861,861,861,861,861,,,861,,,,,,861,861,861,861',
'861,861,861,861,861,861,861,861,861,861,,861,861,,861,861,861,,,,,,',
',,,,,,,,,,,,,861,,,861,,,861,861,,,861,,861,,,,861,,,,,,,,861,,,,,861',
'861,861,861,861,861,,,,861,861,863,863,863,863,863,863,,,,863,863,,',
',863,,863,863,863,863,863,863,863,,,,,863,863,863,863,863,863,863,,',
'863,,,,,,863,863,863,863,863,863,863,863,863,863,863,863,863,863,,863',
'863,,863,863,863,,,,,,,,,,,,,,,,,,,,863,,,863,,,863,863,,,863,,863,',
',,863,,,,,,,,863,,,,,863,863,863,863,863,863,,,,863,863,868,868,868',
'868,868,868,,,,868,868,,,,868,,868,868,868,868,868,868,868,,,,,868,868',
'868,868,868,868,868,,,868,,,,,,868,868,868,868,868,868,868,868,868,868',
'868,868,868,868,,868,868,,868,868,868,,,,,,,,,,,,,,,,,,,,868,,,868,',
',868,868,,,868,,868,,,,868,,,,,,,,868,,,,,868,868,868,868,868,868,,',
',868,868,871,871,871,871,871,871,,,,871,871,,,,871,,871,871,871,871',
'871,871,871,,,,,871,871,871,871,871,871,871,,,871,,,,,,871,871,871,871',
'871,871,871,871,871,871,871,871,871,871,,871,871,,871,871,871,,,,,,',
',,,,,,,,,,,,,871,,,871,,,871,871,,,871,,871,,,,871,,,,,,,,871,,,,,871',
'871,871,871,871,871,,,,871,871,877,877,877,877,877,877,,,,877,877,,',
',877,,877,877,877,877,877,877,877,,,,,877,877,877,877,877,877,877,,',
'877,,,,,,877,877,877,877,877,877,877,877,877,877,877,877,877,877,,877',
'877,,877,877,877,,,,,,,,,,,,,,,,,,,,877,,,877,,,877,877,,,877,,877,',
',,877,,,,,,,,877,,,,,877,877,877,877,877,877,,,,877,877,8,8,8,8,8,,',
',8,8,,,,8,,8,8,8,8,8,8,8,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8',
'8,8,8,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,',
',,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,9,,,,,,,,9,9',
',9,9,9,9,,9,9,,,9,,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,,9',
',,9,9,,,,,,,,,,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10',
'10,10,10,10,10,10,10,,,10,10,10,10,10,10,10,10,10,10,,,,,,10,10,10,10',
'10,10,10,10,,,10,,,,,,,,10,10,,10,10,10,10,,10,10,,,10,,,,,10,10,10',
'10,,,,,,,,,,,,,,10,10,,10,10,10,10,10,10,10,10,10,,10,,,10,10,,,20,20',
'20,,20,,,10,20,20,,,,20,,20,20,20,20,20,20,20,,,,,20,20,20,20,20,20',
'20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,20,20,,20,20,,20,20,20,,',
',,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,20,,,,,20,20,20',
'20,20,20,,,,20,20,21,21,21,,21,,,,21,21,,,,21,,21,21,21,21,21,21,21',
',,,,21,21,21,21,21,21,21,,,,,,,,,,21,,,21,21,21,21,21,21,21,21,21,21',
',21,21,,21,21,21,,,,,,,,,,,,,,,,,,,,21,,,21,,,21,21,,,21,,,,,,21,,,',
',,,,21,,,,,21,21,21,21,21,21,,,,21,21,25,25,25,,25,,,,25,25,,,,25,,25',
'25,25,25,25,25,25,,,,,25,25,25,25,25,25,25,,,,,,,,,,25,,,25,25,25,25',
'25,25,25,25,25,25,,25,25,,25,25,25,,,,,,,,,,,,,,,,,,,,25,,,25,,,25,25',
',,25,,25,,25,,25,,,,,,,,25,,,,,25,25,25,25,25,25,,,,25,25,26,26,26,',
'26,,,,26,26,,,,26,,26,26,26,26,26,26,26,,,,,26,26,26,26,26,26,26,,,',
',,,,,,26,,,26,26,26,26,26,26,26,26,26,26,,26,26,,26,26,26,,,,,,,,,,',
',,,,,,,,,26,,,26,,,26,26,,,26,,26,,26,,26,,,,,,,,26,,,,,26,26,26,26',
'26,26,,,,26,26,27,27,27,,27,,,,27,27,,,,27,,27,27,27,27,27,27,27,,,',
',27,27,27,27,27,27,27,,,,,,,,,,27,,,27,27,27,27,27,27,27,27,27,27,,27',
'27,,27,27,27,,,,,,,,,,,,,,,,,,,,27,,,27,,,27,27,,,27,,27,,27,,27,,,',
',,,,27,,,,,27,27,27,27,27,27,,,,27,27,30,30,30,,30,,,,30,30,,,,30,,30',
'30,30,30,30,30,30,,,,,30,30,30,30,30,30,30,,,,,,,,,,30,,,30,30,30,30',
'30,30,30,30,30,30,,30,30,,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,30,,30',
'30,,,30,,30,,30,,30,,,,,,,,30,,,,,30,30,30,30,30,30,,,,30,30,31,31,31',
',31,,,,31,31,,,,31,,31,31,31,31,31,31,31,,,,,31,31,31,31,31,31,31,,',
',,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31,,,,,,,,,',
',,,,,,,,,,31,,,31,31,,31,31,,,31,,31,,31,,31,,,,,,,,31,,,,,31,31,31',
'31,31,31,,,,31,31,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34',
',,,,34,34,34,34,34,34,34,,,,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34',
',34,34,,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,',
',,,,,34,34,34,34,34,34,,,,34,34,35,35,35,,35,,,,35,35,,,,35,,35,35,35',
'35,35,35,35,,,,,35,35,35,35,35,35,35,,,,,,,,,,35,,,35,35,35,35,35,35',
'35,35,35,35,,35,35,,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,',
',,,,,,,,,,,,,,,35,35,35,35,35,35,,,,35,35,41,41,41,,41,,,,41,41,,,,41',
',41,41,41,41,41,41,41,,,,,41,41,41,41,41,41,41,,,,,,,,,,41,,,41,41,41',
'41,41,41,41,41,41,41,,41,41,,41,41,41,,,,,,,,,,,,,,,,,,,,41,,,41,,,41',
'41,,,41,,,,,,41,,,,,,,,41,,,,,41,41,41,41,41,41,,,,41,41,42,42,42,,42',
',,,42,42,,,,42,,42,42,42,42,42,42,42,,,,,42,42,42,42,42,42,42,,,,,,',
',,,42,,,42,42,42,42,42,42,42,42,42,42,,42,42,,42,42,42,,,,,,,,,,,,,',
',,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,42,,,,,42,42,42,42,42,42,',
',,42,42,43,43,43,,43,,,,43,43,,,,43,,43,43,43,43,43,43,43,,,,,43,43',
'43,43,43,43,43,,,,,,,,,,43,,,43,43,43,43,43,43,43,43,43,43,,43,43,,43',
'43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,43,,,,',
'43,43,43,43,43,43,,,,43,43,55,55,55,,55,,,,55,55,,,,55,,55,55,55,55',
'55,55,55,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55',
'55,55,55,55,,55,55,,55,55,55,,,,,,,,,,,,,,,,,,,,55,,,55,,,55,55,,,55',
',,,,,55,,,,,,,,55,,,,,55,55,55,55,55,55,,,,55,55,56,56,56,,56,,,,56',
'56,,,,56,,56,56,56,56,56,56,56,,,,,56,56,56,56,56,56,56,,,,,,,,,,56',
',,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56,56,,,,,,,,,,,,,,,,,,,',
'56,,,56,,,56,56,,,56,,56,,,,56,,,,,,,,56,,,,,56,56,56,56,56,56,,,,56',
'56,57,57,57,,57,,,,57,57,,,,57,,57,57,57,57,57,57,57,,,,,57,57,57,57',
'57,57,57,,,,,,,,,,57,,,57,57,57,57,57,57,57,57,57,57,,57,57,,57,57,57',
',,,,,,,,,,,,,,,,,,,57,,,57,,,57,57,,,57,,,,,,57,,,,,,,,57,,,,,57,57',
'57,57,57,57,,,,57,57,59,59,59,,59,,,,59,59,,,,59,,59,59,59,59,59,59',
'59,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59',
'59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,,,,',
'59,,,,,,,,59,,,,,59,59,59,59,59,59,,,,59,59,60,60,60,,60,,,,60,60,,',
',60,,60,60,60,60,60,60,60,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60',
'60,60,60,60,60,60,60,60,60,,60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60,,',
'60,,,60,60,,,60,,,,,,60,,,,,,,,60,,,,,60,60,60,60,60,60,,,,60,60,64',
'64,64,,64,,,,64,64,,,,64,,64,64,64,64,64,64,64,,,,,64,64,64,64,64,64',
'64,,,,,,,,,,64,,,64,64,64,64,64,64,64,64,64,64,,64,64,,,,64,,,,,,,,',
',,,,,,,,,,,64,,,64,,,64,64,,,64,,64,,,,,,,,,,,,,,,,,64,64,64,64,64,64',
',,,64,64,85,85,85,,85,,,,85,85,,,,85,,85,85,85,85,85,85,85,,85,,,85',
'85,85,85,85,85,85,,,,,,,,,,85,,,85,85,85,85,85,85,85,85,85,85,,85,85',
',85,85,85,,,,,,,,,,,,,,,,,,,,85,,,85,85,,85,85,,,85,,85,,85,,85,,,,',
',,,85,,85,,,85,85,85,85,85,85,,,,85,85,88,88,88,,88,,,,88,88,,,,88,',
'88,88,88,88,88,88,88,,88,,,88,88,88,88,88,88,88,,,,,,,,,,88,,,88,88',
'88,88,88,88,88,88,88,88,,88,88,,88,88,88,,,,,,,,,,,,,,,,,,,,88,,,88',
'88,,88,88,,,88,,88,,88,,88,,,,,,,,88,,88,,,88,88,88,88,88,88,,,,88,88',
'104,104,104,,104,,,,104,104,,,,104,,104,104,104,104,104,104,104,,,,',
'104,104,104,104,104,104,104,,,104,,,,,,,104,,,104,104,104,104,104,104',
'104,104,104,104,,104,104,,104,104,104,,,,,,,,,,,,,,,,,,,,104,,,104,',
',104,104,,,104,,,,,,104,,,,,,,,104,,,,,104,104,104,104,104,104,,,,104',
'104,105,105,105,,105,,,,105,105,,,,105,,105,105,105,105,105,105,105',
',,,,105,105,105,105,105,105,105,,,105,,,,,,,105,,,105,105,105,105,105',
'105,105,105,105,105,,105,105,,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105',
',,105,105,,,105,,,,,,105,,,,,,,,105,,,,,105,105,105,105,105,105,,,,105',
'105,106,106,106,,106,,,,106,106,,,,106,,106,106,106,106,106,106,106',
',,,,106,106,106,106,106,106,106,,,106,,,,,,,106,,,106,106,106,106,106',
'106,106,106,106,106,,106,106,,106,106,106,,,,,,,,,,,,,,,,,,,,106,,,106',
',,106,106,,,106,,,,,,106,,,,,,,,106,,,,,106,106,106,106,106,106,,,,106',
'106,107,107,107,,107,,,,107,107,,,,107,,107,107,107,107,107,107,107',
',,,,107,107,107,107,107,107,107,,,107,,,,,,,107,,,107,107,107,107,107',
'107,107,107,107,107,,107,107,,107,107,107,,,,,,,,,,,,,,,,,,,,107,,,107',
',,107,107,,,107,,,,,,107,,,,,,,,107,,,,,107,107,107,107,107,107,,,,107',
'107,108,108,108,108,108,,,,108,108,,,,108,,108,108,108,108,108,108,108',
',,,,108,108,108,108,108,108,108,,,108,,,,,,108,108,108,108,108,108,108',
'108,108,108,108,108,108,108,,108,108,,108,108,108,,,,,,,,,,,,,,,,,,',
',108,,,108,,,108,108,,,108,,108,,,,108,,,,,,,,108,,,,,108,108,108,108',
'108,108,,,,108,108,191,191,191,,191,,,,191,191,,,,191,,191,191,191,191',
'191,191,191,,,,,191,191,191,191,191,191,191,,,,,,,,,,191,,,191,191,191',
'191,191,191,191,191,191,191,,191,191,,191,191,191,,,,,,,,,,,,,,,,,,',
',191,,,191,,,191,191,,,191,,191,,,,191,,,,,,,,191,,,,,191,191,191,191',
'191,191,,,,191,191,192,192,192,,192,,,,192,192,,,,192,,192,192,192,192',
'192,192,192,,,,,192,192,192,192,192,192,192,,,,,,,,,,192,,,192,192,192',
'192,192,192,192,192,192,192,,192,192,,192,192,192,,,,,,,,,,,,,,,,,,',
',192,,,192,,,192,192,,,192,,192,,,,192,,,,,,,,192,,,,,192,192,192,192',
'192,192,,,,192,192,193,193,193,,193,,,,193,193,,,,193,,193,193,193,193',
'193,193,193,,,,,193,193,193,193,193,193,193,,,,,,,,,,193,,,193,193,193',
'193,193,193,193,193,193,193,,193,193,,193,193,193,,,,,,,,,,,,,,,,,,',
',193,,,193,,,193,193,,,193,,,,,,193,,,,,,,,193,,,,,193,193,193,193,193',
'193,,,,193,193,194,194,194,,194,,,,194,194,,,,194,,194,194,194,194,194',
'194,194,,,,,194,194,194,194,194,194,194,,,,,,,,,,194,,,194,194,194,194',
'194,194,194,194,194,194,,194,194,,194,194,194,,,,,,,,,,,,,,,,,,,,194',
',,194,,,194,194,,,194,,194,,,,194,,,,,,,,194,,,,,194,194,194,194,194',
'194,,,,194,194,197,197,197,,197,,,,197,197,,,,197,,197,197,197,197,197',
'197,197,,,,,197,197,197,197,197,197,197,,,,,,,,,,197,,,197,197,197,197',
'197,197,197,197,197,197,,197,197,,197,197,197,,,,,,,,,,,,,,,,,,,,197',
',,197,,,197,197,,,197,,,,,,197,,,,,,,,197,,,,,197,197,197,197,197,197',
',,,197,197,198,198,198,,198,,,,198,198,,,,198,,198,198,198,198,198,198',
'198,,,,,198,198,198,198,198,198,198,,,198,,,,,,,198,,,198,198,198,198',
'198,198,198,198,198,198,,198,198,,198,198,198,,,,,,,,,,,,,,,,,,,,198',
',,198,,,198,198,,,198,,,,,,198,,,,,,,,198,,,,,198,198,198,198,198,198',
',,,198,198,199,199,199,,199,,,,199,199,,,,199,,199,199,199,199,199,199',
'199,,,,,199,199,199,199,199,199,199,,,199,,,,,,,199,,,199,199,199,199',
'199,199,199,199,199,199,,199,199,,199,199,199,,,,,,,,,,,,,,,,,,,,199',
',,199,,,199,199,,,199,,,,,,199,,,,,,,,199,,,,,199,199,199,199,199,199',
',,,199,199,210,210,210,,210,,,,210,210,,,,210,,210,210,210,210,210,210',
'210,,,,,210,210,210,210,210,210,210,,,,,,,,,,210,,,210,210,210,210,210',
'210,210,210,210,210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210',
',,210,210,,,210,,,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210',
'210,211,211,211,,211,,,,211,211,,,,211,,211,211,211,211,211,211,211',
',,,,211,211,211,211,211,211,211,,,,,,,,,,211,,,211,211,211,211,211,211',
'211,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,',
',211,211,,,211,,,,,,211,,,,,,,,211,,,,,211,211,211,211,211,211,,,,211',
'211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212,212,212',
',,,,212,212,212,212,212,212,212,,,,,,,,,,212,,,212,212,212,212,212,212',
'212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,',
',212,212,,,212,,,,,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212',
'212,213,213,213,,213,,,,213,213,,,,213,,213,213,213,213,213,213,213',
',,,,213,213,213,213,213,213,213,,,,,,,,,,213,,,213,213,213,213,213,213',
'213,213,213,213,,213,213,,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,',
',213,213,,,213,,,,,,213,,,,,,,,213,,,,,213,213,213,213,213,213,,,,213',
'213,214,214,214,,214,,,,214,214,,,,214,,214,214,214,214,214,214,214',
',,,,214,214,214,214,214,214,214,,,,,,,,,,214,,,214,214,214,214,214,214',
'214,214,214,214,,214,214,,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,',
',214,214,,,214,,,,,,214,,,,,,,,214,,,,,214,214,214,214,214,214,,,,214',
'214,215,215,215,,215,,,,215,215,,,,215,,215,215,215,215,215,215,215',
',,,,215,215,215,215,215,215,215,,,,,,,,,,215,,,215,215,215,215,215,215',
'215,215,215,215,,215,215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,',
',215,215,,,215,,,,,,215,,,,,,,,215,,,,,215,215,215,215,215,215,,,,215',
'215,216,216,216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216',
',,,,216,216,216,216,216,216,216,,,,,,,,,,216,,,216,216,216,216,216,216',
'216,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,',
',216,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216',
'216,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217,217,217,217',
',,,,217,217,217,217,217,217,217,,,,,,,,,,217,,,217,217,217,217,217,217',
'217,217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,',
',217,217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217',
'217,218,218,218,,218,,,,218,218,,,,218,,218,218,218,218,218,218,218',
',,,,218,218,218,218,218,218,218,,,,,,,,,,218,,,218,218,218,218,218,218',
'218,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,',
',218,218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218',
'218,219,219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219,219',
',,,,219,219,219,219,219,219,219,,,,,,,,,,219,,,219,219,219,219,219,219',
'219,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,',
',219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219',
'219,220,220,220,,220,,,,220,220,,,,220,,220,220,220,220,220,220,220',
',,,,220,220,220,220,220,220,220,,,,,,,,,,220,,,220,220,220,220,220,220',
'220,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,',
',220,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220',
'220,221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221,221,221',
',,,,221,221,221,221,221,221,221,,,,,,,,,,221,,,221,221,221,221,221,221',
'221,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,',
',221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221',
'221,222,222,222,,222,,,,222,222,,,,222,,222,222,222,222,222,222,222',
',,,,222,222,222,222,222,222,222,,,,,,,,,,222,,,222,222,222,222,222,222',
'222,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,',
',222,222,,,222,,,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222,,,,222',
'222,223,223,223,,223,,,,223,223,,,,223,,223,223,223,223,223,223,223',
',,,,223,223,223,223,223,223,223,,,,,,,,,,223,,,223,223,223,223,223,223',
'223,223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,',
',223,223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223',
'223,224,224,224,,224,,,,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,224,224,224,224,224,224,224,,,,,,,,,,224,,,224,224,224,224,224,224',
'224,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,',
',224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224',
'224,225,225,225,,225,,,,225,225,,,,225,,225,225,225,225,225,225,225',
',,,,225,225,225,225,225,225,225,,,,,,,,,,225,,,225,225,225,225,225,225',
'225,225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,',
',225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225',
'225,226,226,226,,226,,,,226,226,,,,226,,226,226,226,226,226,226,226',
',,,,226,226,226,226,226,226,226,,,,,,,,,,226,,,226,226,226,226,226,226',
'226,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,',
',226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226',
'226,227,227,227,,227,,,,227,227,,,,227,,227,227,227,227,227,227,227',
',,,,227,227,227,227,227,227,227,,,,,,,,,,227,,,227,227,227,227,227,227',
'227,227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,',
',227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227',
'227,228,228,228,,228,,,,228,228,,,,228,,228,228,228,228,228,228,228',
',,,,228,228,228,228,228,228,228,,,,,,,,,,228,,,228,228,228,228,228,228',
'228,228,228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,',
',228,228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228',
'228,229,229,229,,229,,,,229,229,,,,229,,229,229,229,229,229,229,229',
',,,,229,229,229,229,229,229,229,,,,,,,,,,229,,,229,229,229,229,229,229',
'229,229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,',
',229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229',
'229,230,230,230,,230,,,,230,230,,,,230,,230,230,230,230,230,230,230',
',,,,230,230,230,230,230,230,230,,,,,,,,,,230,,,230,230,230,230,230,230',
'230,230,230,230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,',
',230,230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230',
'230,231,231,231,,231,,,,231,231,,,,231,,231,231,231,231,231,231,231',
',,,,231,231,231,231,231,231,231,,,,,,,,,,231,,,231,231,231,231,231,231',
'231,231,231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,',
',231,231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231',
'231,232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232',
',,,,232,232,232,232,232,232,232,,,,,,,,,,232,,,232,232,232,232,232,232',
'232,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,',
',232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232',
'232,233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233,233',
',,,,233,233,233,233,233,233,233,,,,,,,,,,233,,,233,233,233,233,233,233',
'233,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,',
',233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233',
'233,234,234,234,,234,,,,234,234,,,,234,,234,234,234,234,234,234,234',
',,,,234,234,234,234,234,234,234,,,,,,,,,,234,,,234,234,234,234,234,234',
'234,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,',
',234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234',
'234,235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235',
',,,,235,235,235,235,235,235,235,,,,,,,,,,235,,,235,235,235,235,235,235',
'235,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,',
',235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235',
'235,236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236',
',,,,236,236,236,236,236,236,236,,,,,,,,,,236,,,236,236,236,236,236,236',
'236,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,',
',236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236',
'236,244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,244,244,244,244,244,244,244,,,,,,,,,,244,,,244,244,244,244,244,244',
'244,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,',
',244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244',
'244,246,246,246,,246,,,,246,246,,,,246,,246,246,246,246,246,246,246',
',,,,246,246,246,246,246,246,246,,,,,,,,,,246,,,246,246,246,246,246,246',
'246,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,',
',246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246',
'246,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257',
',,,,257,257,257,257,257,257,257,,,,,,,,,,257,,,257,257,257,257,257,257',
'257,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,',
',257,257,,,257,,257,,257,,257,,,,,,,,257,,,,,257,257,257,257,257,257',
',,,257,257,263,263,263,,263,,,,263,263,,,,263,,263,263,263,263,263,263',
'263,,,,,263,263,263,263,263,263,263,,,,,,,,,,263,,,263,263,263,263,263',
'263,263,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263',
',,263,263,,,263,,263,,263,,263,,,,,,,,263,,,,,263,263,263,263,263,263',
',,,263,263,266,266,266,,266,,,,266,266,,,,266,,266,266,266,266,266,266',
'266,,,,,266,266,266,266,266,266,266,,,,,,,,,,266,,,266,266,266,266,266',
'266,266,266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266',
',266,266,266,,,266,,266,,266,,266,,,,,,,,266,,,,,266,266,266,266,266',
'266,,,,266,266,272,272,272,,272,,,,272,272,,,,272,,272,272,272,272,272',
'272,272,,,,,272,272,272,272,272,272,272,,,,,,,,,,272,,,272,272,272,272',
'272,272,272,272,272,272,,272,272,,,,272,,,,,,,,,,,,,,,,,,,,272,,,272',
',,272,272,,,272,,,,,,,,,,,,,,,,,,,272,272,272,272,272,272,,,,272,272',
'293,293,293,,293,,,,293,293,,,,293,,293,293,293,293,293,293,293,,,,',
'293,293,293,293,293,293,293,,,,,,,,,,293,,,293,293,293,293,293,293,293',
'293,293,293,,293,293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,293,',
'293,293,,,293,,,,,,293,,,,,,,,293,,,,,293,293,293,293,293,293,,,,293',
'293,301,301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301,301',
',,,,301,301,301,301,301,301,301,,,,,,,,,,301,,,301,301,301,301,301,301',
'301,301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,',
',301,301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301',
'301,311,311,311,,311,,,,311,311,,,,311,,311,311,311,311,311,311,311',
',,,,311,311,311,311,311,311,311,,,311,,,,,,,311,,,311,311,311,311,311',
'311,311,311,311,311,,311,311,,311,311,311,,,,,,,,,,,,,,,,,,,,311,,,311',
',,311,311,,,311,,,,,,311,,,,,,,,311,,,,,311,311,311,311,311,311,,,,311',
'311,312,312,312,,312,,,,312,312,,,,312,,312,312,312,312,312,312,312',
',,,,312,312,312,312,312,312,312,,,312,,,,,,,312,,,312,312,312,312,312',
'312,312,312,312,312,,312,312,,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312',
',,312,312,,,312,,,,,,312,,,,,,,,312,,,,,312,312,312,312,312,312,,,,312',
'312,323,323,323,,323,,,,323,323,,,,323,,323,323,323,323,323,323,323',
',,,,323,323,323,323,323,323,323,,,,,,,,,,323,,,323,323,323,323,323,323',
'323,323,323,323,,323,323,,,,323,,,,,,,,,,,,,,,,,,,,323,,,323,,,323,323',
',,323,,,,,,,,,,,,,,,,,,,323,323,323,323,323,323,,,,323,323,325,325,325',
',325,,,,325,325,,,,325,,325,325,325,325,325,325,325,,,,,325,325,325',
'325,325,325,325,,,,,,,,,,325,,,325,325,325,325,325,325,325,325,325,325',
',325,325,,,,325,,,,,,,,,,,,,,,,,,,,325,,,325,,,325,325,,,325,,,,,,,',
',,,,,,,,,,,325,325,325,325,325,325,,,,325,325,364,364,364,364,364,364',
'364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364,364',
'364,,,364,364,364,364,364,364,364,364,364,364,,,,,,364,364,364,364,364',
'364,364,364,,,364,,,,,,,,364,364,,364,364,364,364,,364,364,,,364,,,',
',364,364,364,364,,,,,,,,,,,,,,364,364,,364,364,364,364,364,364,364,364',
'364,,364,,,364,364,,,376,376,376,,376,,,364,376,376,,,,376,,376,376',
'376,376,376,376,376,,,,,376,376,376,376,376,376,376,,,,,,,,,,376,,,376',
'376,376,376,376,376,376,376,376,376,,376,376,,376,376,376,,,,,,,,,,',
',,,,,,,,,376,,,376,,,376,376,,,376,,,,,,376,,,,,,,,376,,,,,376,376,376',
'376,376,376,,,,376,376,385,385,385,,385,,,,385,385,,,,385,,385,385,385',
'385,385,385,385,,,,,385,385,385,385,385,385,385,,,,,,,,,,385,,,385,385',
'385,385,385,385,385,385,385,385,,385,385,,385,385,385,,,,,,,,,,,,,,',
',,,,,385,,,385,385,,385,385,,,385,,385,,385,,385,,,,,,,,385,,,,,385',
'385,385,385,385,385,,,,385,385,392,392,392,,392,,,,392,392,,,,392,,392',
'392,392,392,392,392,392,,,,,392,392,392,392,392,392,392,,,,,,,,,,392',
',,392,392,392,392,392,392,392,392,392,392,,392,392,,392,392,392,,,,',
',,,,,,,,,,,,,,,392,,,392,392,,392,392,,,392,,392,,392,,392,,,,,,,,392',
',,,,392,392,392,392,392,392,,,,392,392,393,393,393,,393,,,,393,393,',
',,393,,393,393,393,393,393,393,393,,,,,393,393,393,393,393,393,393,',
',,,,,,,,393,,,393,393,393,393,393,393,393,393,393,393,,393,393,,393',
'393,393,,,,,,,,,,,,,,,,,,,,393,,,393,393,,393,393,,,393,,393,,393,,393',
',,,,,,,393,,,,,393,393,393,393,393,393,,,,393,393,400,400,400,,400,',
',,400,400,,,,400,,400,400,400,400,400,400,400,,,,,400,400,400,400,400',
'400,400,,,,,,,,,,400,,,400,400,400,400,400,400,400,400,400,400,,400',
'400,,400,400,400,,,,,,,,,,,,,,,,,,,,400,,,400,,,400,400,,,400,,400,',
',,400,,,,,,,,400,,,,,400,400,400,400,400,400,,,,400,400,402,402,402',
',402,,,,402,402,,,,402,,402,402,402,402,402,402,402,,,,,402,402,402',
'402,402,402,402,,,,,,,,,,402,,,402,402,402,402,402,402,402,402,402,402',
',402,402,,402,402,402,,,,,,,,,,,,,,,,,,,,402,,,402,,,402,402,,,402,',
',,,,402,,,,,,,,402,,,,,402,402,402,402,402,402,,,,402,402,403,403,403',
',403,,,,403,403,,,,403,,403,403,403,403,403,403,403,,,,,403,403,403',
'403,403,403,403,,,,,,,,,,403,,,403,403,403,403,403,403,403,403,403,403',
',403,403,,403,403,403,,,,,,,,,,,,,,,,,,,,403,,,403,,,403,403,,,403,',
',,,,403,,,,,,,,403,,,,,403,403,403,403,403,403,,,,403,403,404,404,404',
',404,,,,404,404,,,,404,,404,404,404,404,404,404,404,,,,,404,404,404',
'404,404,404,404,,,,,,,,,,404,,,404,404,404,404,404,404,404,404,404,404',
',404,404,,404,404,404,,,,,,,,,,,,,,,,,,,,404,,,404,,,404,404,,,404,',
',,,,404,,,,,,,,404,,,,,404,404,404,404,404,404,,,,404,404,433,433,433',
',433,,,,433,433,,,,433,,433,433,433,433,433,433,433,,,,,433,433,433',
'433,433,433,433,,,,,,,,,,433,,,433,433,433,433,433,433,433,433,433,433',
',433,433,,433,433,433,,,,,,,,,,,,,,,,,,,,433,,,433,,,433,433,,,433,',
'433,,433,,433,,,,,,,,433,,,,,433,433,433,433,433,433,,,,433,433,436',
'436,436,,436,,,,436,436,,,,436,,436,436,436,436,436,436,436,,,,,436',
'436,436,436,436,436,436,,,,,,,,,,436,,,436,436,436,436,436,436,436,436',
'436,436,,436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436,436',
',,436,,436,,436,,436,,,,,,,,436,,,,,436,436,436,436,436,436,,,,436,436',
'439,439,439,,439,,,,439,439,,,,439,,439,439,439,439,439,439,439,,,,',
'439,439,439,439,439,439,439,,,,,,,,,,439,,,439,439,439,439,439,439,439',
'439,439,439,,439,439,,439,439,439,,,,,,,,,,,,,,,,,,,,439,,,439,,,439',
'439,,,439,,,,,,439,,,,,,,,439,,,,,439,439,439,439,439,439,,,,439,439',
'448,448,448,,448,,,,448,448,,,,448,,448,448,448,448,448,448,448,,,,',
'448,448,448,448,448,448,448,,,448,,,,,,,448,,,448,448,448,448,448,448',
'448,448,448,448,,448,448,,448,448,448,,,,,,,,,,,,,,,,,,,,448,,,448,',
',448,448,,,448,,448,,448,,448,,,,,,,,448,,,,,448,448,448,448,448,448',
',,,448,448,465,465,465,,465,,,,465,465,,,,465,,465,465,465,465,465,465',
'465,,,,,465,465,465,465,465,465,465,,,,,,,,,,465,,,465,465,465,465,465',
'465,465,465,465,465,,465,465,,465,465,465,,,,,,,,,,,,,,,,,,,,465,,,465',
',,465,465,,,465,,465,,,,465,,,,,,,,465,,,,,465,465,465,465,465,465,',
',,465,465,472,472,472,,472,,,,472,472,,,,472,,472,472,472,472,472,472',
'472,,,,,472,472,472,472,472,472,472,,,,,,,,,,472,,,472,472,472,472,472',
'472,472,472,472,472,,472,472,,472,472,472,,,,,,,,,,,,,,,,,,,,472,,,472',
',,472,472,,,472,,,,,,472,,,,,,,,472,,,,,472,472,472,472,472,472,,,,472',
'472,473,473,473,,473,,,,473,473,,,,473,,473,473,473,473,473,473,473',
',,,,473,473,473,473,473,473,473,,,,,,,,,,473,,,473,473,473,473,473,473',
'473,473,473,473,,473,473,,473,473,473,,,,,,,,,,,,,,,,,,,,473,,,473,',
',473,473,,,473,,,,,,473,,,,,,,,473,,,,,473,473,473,473,473,473,,,,473',
'473,474,474,474,,474,,,,474,474,,,,474,,474,474,474,474,474,474,474',
',,,,474,474,474,474,474,474,474,,,,,,,,,,474,,,474,474,474,474,474,474',
'474,474,474,474,,474,474,,474,474,474,,,,,,,,,,,,,,,,,,,,474,,,474,',
',474,474,,,474,,,,,,474,,,,,,,,474,,,,,474,474,474,474,474,474,,,,474',
'474,478,478,478,,478,,,,478,478,,,,478,,478,478,478,478,478,478,478',
',,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478,478,478,478,478',
'478,478,478,478,478,,478,478,,478,478,478,,,,,,,,,,,,,,,,,,,,478,,,478',
',,478,478,,,478,,,,,,478,,,,,,,,478,,,,,478,478,478,478,478,478,,,,478',
'478,484,484,484,,484,,,,484,484,,,,484,,484,484,484,484,484,484,484',
',,,,484,484,484,484,484,484,484,,,,,,,,,,484,,,484,484,484,484,484,484',
'484,484,484,484,,484,484,,484,484,484,,,,,,,,,,,,,,,,,,,,484,,,484,',
',484,484,,,484,,484,,,,484,,,,,,,,484,,,,,484,484,484,484,484,484,,',
',484,484,487,487,487,,487,,,,487,487,,,,487,,487,487,487,487,487,487',
'487,,,,,487,487,487,487,487,487,487,,,,,,,,,,487,,,487,487,487,487,487',
'487,487,487,487,487,,487,487,,487,487,487,,,,,,,,,,,,,,,,,,,,487,,,487',
',,487,487,,,487,,,,,,487,,,,,,,,487,,,,,487,487,487,487,487,487,,,,487',
'487,490,490,490,,490,,,,490,490,,,,490,,490,490,490,490,490,490,490',
',,,,490,490,490,490,490,490,490,,,,,,,,,,490,,,490,490,490,490,490,490',
'490,490,490,490,,490,490,,490,490,490,,,,,,,,,,,,,,,,,,,,490,,,490,',
',490,490,,,490,,,,,,490,,,,,,,,490,,,,,490,490,490,490,490,490,,,,490',
'490,505,505,505,,505,,,,505,505,,,,505,,505,505,505,505,505,505,505',
',,,,505,505,505,505,505,505,505,,,,,,,,,,505,,,505,505,505,505,505,505',
'505,505,505,505,,505,505,,505,505,505,,,,,,,,,,,,,,,,,,,,505,,,505,',
',505,505,,,505,,505,,,,505,,,,,,,,505,,,,,505,505,505,505,505,505,,',
',505,505,517,517,517,,517,,,,517,517,,,,517,,517,517,517,517,517,517',
'517,,,,,517,517,517,517,517,517,517,,,517,,,,,,,517,,,517,517,517,517',
'517,517,517,517,517,517,,517,517,,517,517,517,,,,,,,,,,,,,,,,,,,,517',
',,517,,,517,517,,,517,,,,,,517,,,,,,,,517,,,,,517,517,517,517,517,517',
',,,517,517,523,523,523,,523,,,,523,523,,,,523,,523,523,523,523,523,523',
'523,,,,,523,523,523,523,523,523,523,,,523,,,,,,,523,,,523,523,523,523',
'523,523,523,523,523,523,,523,523,,523,523,523,,,,,,,,,,,,,,,,,,,,523',
',,523,,,523,523,,,523,,,,,,523,,,,,,,,523,,,,,523,523,523,523,523,523',
',,,523,523,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541',
'541,541,541,541,541,541,541,541,541,,,541,541,541,541,541,541,541,541',
'541,541,,,,,,541,541,541,541,541,541,541,541,,,541,,,,,,,,541,541,,541',
'541,541,541,,541,541,,,541,,,,,541,541,541,541,,,,,,,,,,,,,,541,541',
',541,541,541,541,541,541,541,541,541,,541,,,541,541,,,544,544,544,,544',
',,541,544,544,,,,544,,544,544,544,544,544,544,544,,,,,544,544,544,544',
'544,544,544,,,,,,,,,,544,,,544,544,544,544,544,544,544,544,544,544,',
'544,544,,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,,544,,',
',,,544,,,,,,,,544,,,,,544,544,544,544,544,544,,,,544,544,545,545,545',
',545,,,,545,545,,,,545,,545,545,545,545,545,545,545,,,,,545,545,545',
'545,545,545,545,,,,,,,,,,545,,,545,545,545,545,545,545,545,545,545,545',
',545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545,',
'545,,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545,545,548,548',
'548,,548,,,,548,548,,,,548,,548,548,548,548,548,548,548,,,,,548,548',
'548,548,548,548,548,,,,,,,,,,548,,,548,548,548,548,548,548,548,548,548',
'548,,548,548,,548,548,548,,,,,,,,,,,,,,,,,,,,548,,,548,,,548,548,,,548',
',,,,,548,,,,,,,,548,,,,,548,548,548,548,548,548,,,,548,548,549,549,549',
',549,,,,549,549,,,,549,,549,549,549,549,549,549,549,,,,,549,549,549',
'549,549,549,549,,,,,,,,,,549,,,549,549,549,549,549,549,549,549,549,549',
',549,549,,549,549,549,,,,,,,,,,,,,,,,,,,,549,,,549,,,549,549,,,549,',
',,,,549,,,,,,,,549,,,,,549,549,549,549,549,549,,,,549,549,554,554,554',
',554,,,,554,554,,,,554,,554,554,554,554,554,554,554,,,,,554,554,554',
'554,554,554,554,,,,,,,,,,554,,,554,554,554,554,554,554,554,554,554,554',
',554,554,,554,554,554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,,554,',
',,,,554,,,,,,,,554,,,,,554,554,554,554,554,554,,,,554,554,557,557,557',
',557,,,,557,557,,,,557,,557,557,557,557,557,557,557,,,,,557,557,557',
'557,557,557,557,,,,,,,,,,557,,,557,557,557,557,557,557,557,557,557,557',
',557,557,,557,557,557,,,,,,,,,,,,,,,,,,,,557,,,557,,,557,557,,,557,',
',,,,557,,,,,,,,557,,,,,557,557,557,557,557,557,,,,557,557,564,564,564',
',564,,,,564,564,,,,564,,564,564,564,564,564,564,564,,,,,564,564,564',
'564,564,564,564,,,,,,,,,,564,,,564,564,564,564,564,564,564,564,564,564',
',564,564,,564,564,564,,,,,,,,,,,,,,,,,,,,564,,,564,,,564,564,,,564,',
',,,,564,,,,,,,,564,,,,,564,564,564,564,564,564,,,,564,564,566,566,566',
',566,,,,566,566,,,,566,,566,566,566,566,566,566,566,,,,,566,566,566',
'566,566,566,566,,,,,,,,,,566,,,566,566,566,566,566,566,566,566,566,566',
',566,566,,,,566,,,,,,,,,,,,,,,,,,,,566,,,566,,,566,566,,,566,,566,,566',
',,,,,,,,566,,,,,,566,566,566,566,566,566,,,,566,566,569,569,569,,569',
',,,569,569,,,,569,,569,569,569,569,569,569,569,,,,,569,569,569,569,569',
'569,569,,,,,,,,,,569,,,569,569,569,569,569,569,569,569,569,569,,569',
'569,,569,569,569,,,,,,,,,,,,,,,,,,,,569,,,569,,,569,569,,,569,,,,,,569',
',,,,,,,569,,,,,569,569,569,569,569,569,,,,569,569,573,573,573,,573,',
',,573,573,,,,573,,573,573,573,573,573,573,573,,,,,573,573,573,573,573',
'573,573,,,,,,,,,,573,,,573,573,573,573,573,573,573,573,573,573,,573',
'573,,573,573,573,,,,,,,,,,,,,,,,,,,,573,,,573,,,573,573,,,573,,,,,,573',
',,,,,,,573,,,,,573,573,573,573,573,573,,,,573,573,587,587,587,,587,',
',,587,587,,,,587,,587,587,587,587,587,587,587,,,,,587,587,587,587,587',
'587,587,,,,,,,,,,587,,,587,587,587,587,587,587,587,587,587,587,,587',
'587,,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587,,,,,,587',
',,,,,,,587,,,,,587,587,587,587,587,587,,,,587,587,598,598,598,,598,',
',,598,598,,,,598,,598,598,598,598,598,598,598,,,,,598,598,598,598,598',
'598,598,,,,,,,,,,598,,,598,598,598,598,598,598,598,598,598,598,,598',
'598,,598,598,598,,,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,,598,,598,',
'598,,598,,,,,,,,598,,,,,598,598,598,598,598,598,,,,598,598,614,614,614',
',614,,,,614,614,,,,614,,614,614,614,614,614,614,614,,,,,614,614,614',
'614,614,614,614,,,,,,,,,,614,,,614,614,614,614,614,614,614,614,614,614',
',614,614,,614,614,614,,,,,,,,,,,,,,,,,,,,614,,,614,,,614,614,,,614,',
'614,,,,614,,,,,,,,614,,,,,614,614,614,614,614,614,,,,614,614,617,617',
'617,,617,,,,617,617,,,,617,,617,617,617,617,617,617,617,,,,,617,617',
'617,617,617,617,617,,,,,,,,,,617,,,617,617,617,617,617,617,617,617,617',
'617,,617,617,,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617',
',,,,,617,,,,,,,,617,,,,,617,617,617,617,617,617,,,,617,617,631,631,631',
',631,,,,631,631,,,,631,,631,631,631,631,631,631,631,,,,,631,631,631',
'631,631,631,631,,,,,,,,,,631,,,631,631,631,631,631,631,631,631,631,631',
',631,631,,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,',
'631,,,,631,,,,,,,,631,,,,,631,631,631,631,631,631,,,,631,631,637,637',
'637,,637,,,,637,637,,,,637,,637,637,637,637,637,637,637,,,,,637,637',
'637,637,637,637,637,,,637,,,,,,,637,,,637,637,637,637,637,637,637,637',
'637,637,,637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637',
',,637,,,,,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,642',
'642,642,,642,,,,642,642,,,,642,,642,642,642,642,642,642,642,,,,,642',
'642,642,642,642,642,642,,,,,,,,,,642,,,642,642,642,642,642,642,642,642',
'642,642,,642,642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642',
',,642,,642,,,,642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642,642',
'681,681,681,,681,,,,681,681,,,,681,,681,681,681,681,681,681,681,,,,',
'681,681,681,681,681,681,681,,,,,,,,,,681,,,681,681,681,681,681,681,681',
'681,681,681,,681,681,,681,681,681,,,,,,,,,,,,,,,,,,,,681,,,681,,,681',
'681,,,681,,,,,,681,,,,,,,,681,,,,,681,681,681,681,681,681,,,,681,681',
'682,682,682,,682,,,,682,682,,,,682,,682,682,682,682,682,682,682,,,,',
'682,682,682,682,682,682,682,,,,,,,,,,682,,,682,682,682,682,682,682,682',
'682,682,682,,682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682',
'682,,,682,,,,,,682,,,,,,,,682,,,,,682,682,682,682,682,682,,,,682,682',
'692,692,692,,692,,,,692,692,,,,692,,692,692,692,692,692,692,692,,,,',
'692,692,692,692,692,692,692,,,,,,,,,,692,,,692,692,692,692,692,692,692',
'692,692,692,,692,692,,692,692,692,,,,,,,,,,,,,,,,,,,,692,,,692,,,692',
'692,,,692,,,,,,692,,,,,,,,692,,,,,692,692,692,692,692,692,,,,692,692',
'693,693,693,,693,,,,693,693,,,,693,,693,693,693,693,693,693,693,,,,',
'693,693,693,693,693,693,693,,,,,,,,,,693,,,693,693,693,693,693,693,693',
'693,693,693,,693,693,,693,693,693,,,,,,,,,,,,,,,,,,,,693,,,693,,,693',
'693,,,693,,,,,,693,,,,,,,,693,,,,,693,693,693,693,693,693,,,,693,693',
'694,694,694,,694,,,,694,694,,,,694,,694,694,694,694,694,694,694,,,,',
'694,694,694,694,694,694,694,,,,,,,,,,694,,,694,694,694,694,694,694,694',
'694,694,694,,694,694,,694,694,694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694',
'694,,,694,,,,,,694,,,,,,,,694,,,,,694,694,694,694,694,694,,,,694,694',
'700,700,700,,700,,,,700,700,,,,700,,700,700,700,700,700,700,700,,,,',
'700,700,700,700,700,700,700,,,,,,,,,,700,,,700,700,700,700,700,700,700',
'700,700,700,,700,700,,,,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700,700,',
',700,,,,,,,,,,,,,,,,,,,700,700,700,700,700,700,,,,700,700,706,706,706',
',706,,,,706,706,,,,706,,706,706,706,706,706,706,706,,,,,706,706,706',
'706,706,706,706,,,,,,,,,,706,,,706,706,706,706,706,706,706,706,706,706',
',706,706,,706,706,706,,,,,,,,,,,,,,,,,,,,706,,,706,,,706,706,,,706,',
'706,,706,,706,,,,,,,,706,,,,,706,706,706,706,706,706,,,,706,706,709',
'709,709,,709,,,,709,709,,,,709,,709,709,709,709,709,709,709,,,,,709',
'709,709,709,709,709,709,,,,,,,,,,709,,,709,709,709,709,709,709,709,709',
'709,709,,709,709,,709,709,709,,,,,,,,,,,,,,,,,,,,709,,,709,,,709,709',
',,709,,709,,709,,709,,,,,,,,709,,,,,709,709,709,709,709,709,,,,709,709',
'711,711,711,,711,,,,711,711,,,,711,,711,711,711,711,711,711,711,,,,',
'711,711,711,711,711,711,711,,,,,,,,,,711,,,711,711,711,711,711,711,711',
'711,711,711,,711,711,,711,711,711,,,,,,,,,,,,,,,,,,,,711,,,711,,,711',
'711,,,711,,711,,711,,711,,,,,,,,711,,,,,711,711,711,711,711,711,,,,711',
'711,736,736,736,,736,,,,736,736,,,,736,,736,736,736,736,736,736,736',
',,,,736,736,736,736,736,736,736,,,736,,,,,,,736,,,736,736,736,736,736',
'736,736,736,736,736,,736,736,,736,736,736,,,,,,,,,,,,,,,,,,,,736,,,736',
',,736,736,,,736,,,,,,736,,,,,,,,736,,,,,736,736,736,736,736,736,,,,736',
'736,744,744,744,,744,,,,744,744,,,,744,,744,744,744,744,744,744,744',
',,,,744,744,744,744,744,744,744,,,,,,,,,,744,,,744,744,744,744,744,744',
'744,744,744,744,,744,744,,744,744,744,,,,,,,,,,,,,,,,,,,,744,,,744,',
',744,744,,,744,,,,,,744,,,,,,,,744,,,,,744,744,744,744,744,744,,,,744',
'744,752,752,752,,752,,,,752,752,,,,752,,752,752,752,752,752,752,752',
',,,,752,752,752,752,752,752,752,,,752,,,,,,,752,,,752,752,752,752,752',
'752,752,752,752,752,,752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752',
',,752,752,,,752,,,,,,752,,,,,,,,752,,,,,752,752,752,752,752,752,,,,752',
'752,765,765,765,,765,,,,765,765,,,,765,,765,765,765,765,765,765,765',
',,,,765,765,765,765,765,765,765,,,,,,,,,,765,,,765,765,765,765,765,765',
'765,765,765,765,,765,765,,765,765,765,,,,,,,,,,,,,,,,,,,,765,,,765,',
',765,765,,,765,,,,,,765,,,,,,,,765,,,,,765,765,765,765,765,765,,,,765',
'765,779,779,779,,779,,,,779,779,,,,779,,779,779,779,779,779,779,779',
',,,,779,779,779,779,779,779,779,,,,,,,,,,779,,,779,779,779,779,779,779',
'779,779,779,779,,779,779,,779,779,779,,,,,,,,,,,,,,,,,,,,779,,,779,',
',779,779,,,779,,,,,,779,,,,,,,,779,,,,,779,779,779,779,779,779,,,,779',
'779,780,780,780,,780,,,,780,780,,,,780,,780,780,780,780,780,780,780',
',,,,780,780,780,780,780,780,780,,,,,,,,,,780,,,780,780,780,780,780,780',
'780,780,780,780,,780,780,,,,780,,,,,,,,,,,,,,,,,,,,780,,,780,,,780,780',
',,780,,780,,780,,,,,,,,,,,,,,,780,780,780,780,780,780,,,,780,780,791',
'791,791,,791,,,,791,791,,,,791,,791,791,791,791,791,791,791,,,,,791',
'791,791,791,791,791,791,,,,,,,,,,791,,,791,791,791,791,791,791,791,791',
'791,791,,791,791,,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791',
',,791,,,,,,791,,,,,,,,791,,,,,791,791,791,791,791,791,,,,791,791,796',
'796,796,,796,,,,796,796,,,,796,,796,796,796,796,796,796,796,,,,,796',
'796,796,796,796,796,796,,,,,,,,,,796,,,796,796,796,796,796,796,796,796',
'796,796,,796,796,,796,796,796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,796',
',,796,,,,,,796,,,,,,,,796,,,,,796,796,796,796,796,796,,,,796,796,798',
'798,798,,798,,,,798,798,,,,798,,798,798,798,798,798,798,798,,,,,798',
'798,798,798,798,798,798,,,,,,,,,,798,,,798,798,798,798,798,798,798,798',
'798,798,,798,798,,798,798,798,,,,,,,,,,,,,,,,,,,,798,,,798,,,798,798',
',,798,,,,,,798,,,,,,,,798,,,,,798,798,798,798,798,798,,,,798,798,809',
'809,809,,809,,,,809,809,,,,809,,809,809,809,809,809,809,809,,,,,809',
'809,809,809,809,809,809,,,,,,,,,,809,,,809,809,809,809,809,809,809,809',
'809,809,,809,809,,,,809,,,,,,,,,,,,,,,,,,,,809,,,809,,,809,809,,,809',
',,,,,,,,,,,,,,,,,,809,809,809,809,809,809,,,,809,809,817,817,817,,817',
',,,817,817,,,,817,,817,817,817,817,817,817,817,,,,,817,817,817,817,817',
'817,817,,,,,,,,,,817,,,817,817,817,817,817,817,817,817,817,817,,817',
'817,,817,817,817,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,817,,,817,,817,',
',,817,,,,,,,,817,,,,,817,817,817,817,817,817,,,,817,817,840,840,840',
',840,,,,840,840,,,,840,,840,840,840,840,840,840,840,,,,,840,840,840',
'840,840,840,840,,,,,,,,,,840,,,840,840,840,840,840,840,840,840,840,840',
',840,840,,,,840,,,,,,,,,,,,,,,,,,,,840,,,840,,,840,840,,,840,,,,,,,',
',,,,,,,,,,,840,840,840,840,840,840,,,,840,840,842,842,842,,842,,,,842',
'842,,,,842,,842,842,842,842,842,842,842,,,,,842,842,842,842,842,842',
'842,,,,,,,,,,842,,,842,842,842,842,842,842,842,842,842,842,,842,842',
',842,842,842,,,,,,,,,,,,,,,,,,,,842,,,842,,,842,842,,,842,,842,,,,842',
',,,,,,,842,,,,,842,842,842,842,842,842,,,,842,842,847,847,847,,847,',
',,847,847,,,,847,,847,847,847,847,847,847,847,,,,,847,847,847,847,847',
'847,847,,,,,,,,,,847,,,847,847,847,847,847,847,847,847,847,847,,847',
'847,,,,847,,,,,,,,,,,,,,,,,,,,847,,,847,,,847,847,,,847,,,,,,,,,,,,',
',,,,,,847,847,847,847,847,847,,,,847,847,852,852,852,,852,,,,852,852',
',,,852,,852,852,852,852,852,852,852,,,,,852,852,852,852,852,852,852',
',,,,,,,,,852,,,852,852,852,852,852,852,852,852,852,852,,852,852,,852',
'852,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852,,,852,,852,,852,,852',
',,,,,,,852,,,,,852,852,852,852,852,852,,,,852,852,855,855,855,,855,',
',,855,855,,,,855,,855,855,855,855,855,855,855,,,,,855,855,855,855,855',
'855,855,,,,,,,,,,855,,,855,855,855,855,855,855,855,855,855,855,,855',
'855,,855,855,855,,,,,,,,,,,,,,,,,,,,855,,,855,,,855,855,,,855,,855,',
'855,,855,,,,,,,,855,,,,,855,855,855,855,855,855,,,,855,855,866,866,866',
',866,,,,866,866,,,,866,,866,866,866,866,866,866,866,,,,,866,866,866',
'866,866,866,866,,,,,,,,,,866,,,866,866,866,866,866,866,866,866,866,866',
',866,866,,866,866,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866,866,,,866,',
',,,,866,,,,,,,,866,,,,,866,866,866,866,866,866,,,,866,866,886,886,886',
',886,,,,886,886,,,,886,,886,886,886,886,886,886,886,,,,,886,886,886',
'886,886,886,886,,,,,,,,,,886,,,886,886,886,886,886,886,886,886,886,886',
',886,886,,,,886,,,,,,,,,,,,,,,,,,,,886,,,886,,,886,886,,,886,,,,,,,',
',,,,,,,,,,,886,886,886,886,886,886,,,,886,886,890,890,890,,890,,,,890',
'890,,,,890,,890,890,890,890,890,890,890,,,,,890,890,890,890,890,890',
'890,,,,,,,,,,890,,,890,890,890,890,890,890,890,890,890,890,,890,890',
',890,890,890,,,,,,,,,,,,,,,,,,,,890,,,890,,,890,890,,,890,,,,,,890,',
',,,,,,890,,,,,890,890,890,890,890,890,,,,890,890,893,893,893,,893,,',
',893,893,,,,893,,893,893,893,893,893,893,893,,,,,893,893,893,893,893',
'893,893,,,,,,,,,,893,,,893,893,893,893,893,893,893,893,893,893,,893',
'893,,893,893,893,,,,,,,,,,,,,,,,,,,,893,,,893,,,893,893,,,893,,,,,,893',
',,,,,,,893,,,,,893,893,893,893,893,893,,,,893,893,906,906,906,,906,',
',,906,906,,,,906,,906,906,906,906,906,906,906,,,,,906,906,906,906,906',
'906,906,,,,,,,,,,906,,,906,906,906,906,906,906,906,906,906,906,,906',
'906,,,,906,,,,,,,,,,,,,,,,,,,,906,,,906,,,906,906,,,906,,,,,,,,,,,,',
',,,,,,906,906,906,906,906,906,,,,906,906,911,911,911,,911,,,,911,911',
',,,911,,911,911,911,911,911,911,911,,,,,911,911,911,911,911,911,911',
',,,,,,,,,911,,,911,911,911,911,911,911,911,911,911,911,,911,911,,911',
'911,911,,,,,,,,,,,,,,,,,,,,911,,,911,,,911,911,,,911,,911,,911,,911',
',,,,,,,911,,,,,911,911,911,911,911,911,,,,911,911,919,919,919,,919,',
',,919,919,,,,919,,919,919,919,919,919,919,919,,,,,919,919,919,919,919',
'919,919,,,,,,,,,,919,,,919,919,919,919,919,919,919,919,919,919,,919',
'919,,,,919,,,,,,,,,,,,,,,,,,,,919,,,919,,,919,919,,,919,,,,,,,,,,,,',
',,,,,,919,919,919,919,919,919,,,,919,919,922,922,922,,922,,,,922,922',
',,,922,,922,922,922,922,922,922,922,,,,,922,922,922,922,922,922,922',
',,,,,,,,,922,,,922,922,922,922,922,922,922,922,922,922,,922,922,,922',
'922,922,,,,,,,,,,,,,,,,,,,,922,,,922,,,922,922,,,922,,,,,,922,,,,,,',
',922,,,,,922,922,922,922,922,922,,,,922,922,67,67,67,67,67,67,67,67',
'67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,,,67,67,67,67,67,67',
'67,67,67,67,,,,,,67,67,67,67,67,67,67,67,67,67,67,67,,,,,,,67,67,,67',
'67,67,67,,67,67,,,67,,,,,67,67,67,67,,,,,,67,,,,,,,,67,67,,67,67,67',
'67,67,67,67,67,67,,67,,,67,81,81,81,81,81,81,81,81,81,81,81,81,81,81',
'81,81,81,81,81,81,81,81,81,81,,,81,81,81,81,81,81,81,81,81,81,,,,,,81',
'81,81,81,81,81,81,81,81,81,81,81,,,,,,,81,81,,81,81,81,81,,81,81,,,81',
',,,,81,81,81,81,,,,,,,,,,,,,,81,81,,81,81,81,81,81,81,81,81,81,,81,',
',81,670,670,670,670,670,670,670,670,670,670,670,670,670,670,670,670',
'670,670,670,670,670,670,670,670,,,670,670,670,670,670,670,670,670,670',
'670,,,,,,670,670,670,670,670,670,670,670,,,670,,,,,,,,670,670,,670,670',
'670,670,,670,670,,,670,,,,,670,670,670,670,,,,,,,,,,,,,,670,670,,670',
'670,670,670,670,670,670,670,670,,670,195,195,670,,195,,,,,,,,195,195',
',195,195,195,195,,195,195,,,195,,,,,195,195,195,195,,,,,,,,,,,,,,195',
'195,,195,195,195,195,195,195,195,195,195,,195,196,196,195,,196,,,,,',
',,196,196,,196,196,196,196,,196,196,,,196,,,,,196,196,196,196,,,,,,',
',,,,,,,196,196,,196,196,196,196,196,196,196,196,196,,196,254,254,196',
',254,,,,,,,,254,254,,254,254,254,254,,254,254,,,254,,,,,254,254,254',
'254,,,,,,,,,,,,,,254,254,,254,254,254,254,254,254,254,254,254,,254,255',
'255,254,,255,,,,,,,,255,255,,255,255,255,255,,255,255,,,255,,,,,255',
'255,255,255,,,,,,,,,,,,,,255,255,,255,255,255,255,255,255,255,255,255',
',255,398,398,255,,398,,,,,,,,398,398,,398,398,398,398,,398,398,,,398',
',,,,398,398,398,398,,,,,,,,,,,,,,398,398,,398,398,398,398,398,398,398',
'398,398,,398,399,399,398,,399,,,,,,,,399,399,,399,399,399,399,,399,399',
',,399,,,,,399,399,399,399,,,,,,,,,,,,,,399,399,,399,399,399,399,399',
'399,399,399,399,,399,466,466,399,,466,,,,,,,,466,466,,466,466,466,466',
',466,466,,,466,,,,,466,466,466,466,,,,,,,,,,,,,,466,466,,466,466,466',
'466,466,466,466,466,466,,466,467,467,466,,467,,,,,,,,467,467,,467,467',
'467,467,,467,467,,,467,,,,,467,467,467,467,,,,,,,,,,,,,,467,467,,467',
'467,467,467,467,467,467,467,467,,467,475,475,467,,475,,,,,,,,475,475',
',475,475,475,475,,475,475,,,475,,,,,475,475,475,475,,,,,,,,,,,,,,475',
'475,,475,475,475,475,475,475,475,475,475,,475,476,476,475,,476,,,,,',
',,476,476,,476,476,476,476,,476,476,,,476,,,,,476,476,476,476,,,,,,',
',,,,,,,476,476,,476,476,476,476,476,476,476,476,476,,476,506,506,476',
',506,,,,,,,,506,506,,506,506,506,506,,506,506,,,506,,,,,506,506,506',
'506,,,,,,,,,,,,,,506,506,,506,506,506,506,506,506,506,506,506,,506,507',
'507,506,,507,,,,,,,,507,507,,507,507,507,507,,507,507,,,507,,,,,507',
'507,507,507,,,,,,,,,,,,,,507,507,,507,507,507,507,507,507,507,507,507',
',507,,,507,584,584,584,584,584,584,584,584,584,584,584,,584,584,,,584',
'584,,,,584,,,,,,,,,,,584,,584,,584,584,584,584,584,584,584,,584,,,,',
',,596,596,,,596,,,,,584,,584,596,596,,596,596,596,596,,596,596,,,596',
',,,,596,596,596,596,,,,,,,,,,,,,,596,596,,596,596,596,596,596,596,596',
'596,596,,596,597,597,596,,597,,,,,,,,597,597,,597,597,597,597,,597,597',
',,597,,,,,597,597,597,597,,,,,,,,,,,,,,597,597,,597,597,597,597,597',
'597,597,597,597,,597,641,641,597,,641,,,,,,,,641,641,,641,641,641,641',
',641,641,,,641,,,,,641,641,641,641,,,,,,,,,,,,,,641,641,,641,641,641',
'641,641,641,641,641,641,,641,643,643,641,,643,,,,,,,,643,643,,643,643',
'643,643,,643,643,,,643,,,,,643,643,643,643,,,,,,,,,,,,,,643,643,,643',
'643,643,643,643,643,643,643,643,,643,843,843,643,,843,,,,,,,,843,843',
',843,843,843,843,,843,843,,,843,,,,,843,843,843,843,,,,,,,,,,,,,,843',
'843,,843,843,843,843,843,843,843,843,843,,843,844,844,843,,844,,,,,',
',,844,844,,844,844,844,844,,844,844,,,844,,,,,844,844,844,844,,,,,,',
',,,,,,,844,844,,844,844,844,844,844,844,844,844,844,,844,,,844,849,849',
'849,849,849,849,849,849,849,849,849,,849,849,,,849,849,,,,,,,,,,,,,',
',849,,849,,849,849,849,849,849,849,849,,849,,,,,,,,,,,,,,,,849,,849',
'430,430,430,430,430,430,430,430,430,430,430,,430,430,,,430,430,,,,,',
',,,,,,,,,430,,430,,430,430,430,430,430,430,430,,430,,22,22,22,22,22',
'22,22,22,22,22,22,,22,22,430,430,22,22,,,,,,,,,,,,,,,22,,22,,22,22,22',
'22,22,22,22,,22,240,240,240,240,240,240,240,240,240,240,240,,240,240',
',22,240,240,,,,,,,,,,,,,,,240,,240,,240,240,240,240,240,240,240,,240',
'381,381,381,381,381,381,381,381,381,381,381,,381,381,,240,381,381,,',
',,,,,,,,,,,,381,,381,,381,381,381,381,381,381,381,,381,395,395,395,395',
'395,395,395,395,395,395,395,,395,395,,381,395,395,,,,,,,,,,,,,,,395',
',395,,395,395,395,395,395,395,395,,395,477,477,477,477,477,477,477,477',
'477,477,477,,477,477,,395,477,477,,,,,,,,,,,,,,,477,,477,,477,477,477',
'477,477,477,477,,477,488,488,488,488,488,488,488,488,488,488,488,,488',
'488,,477,488,488,,,,,,,,,,,,,,,488,,488,,488,488,488,488,488,488,488',
',488,609,609,609,609,609,609,609,609,609,609,609,,609,609,488,488,609',
'609,,,,,,,,,,,,,,,609,,609,,609,609,609,609,609,609,609,,609,679,679',
'679,679,679,679,679,679,679,679,679,,679,679,,609,679,679,,,,,,,,,,',
',,,,679,,679,,679,679,679,679,679,679,679,,679,684,684,684,684,684,684',
'684,684,684,684,684,,684,684,,679,684,684,,,,,,,,,,,,,,,684,,684,,684',
'684,684,684,684,684,684,,684,686,686,686,686,686,686,686,686,686,686',
'686,,686,686,,684,686,686,,,,,,,,,,,,,,,686,,686,,686,686,686,686,686',
'686,686,,686,689,689,689,689,689,689,689,689,689,689,689,,689,689,,686',
'689,689,,,,,,,,,,,,,,,689,,689,,689,689,689,689,689,689,689,,689,691',
'691,691,691,691,691,691,691,691,691,691,,691,691,,689,691,691,,,,,,',
',,,,,,,,691,,691,,691,691,691,691,691,691,691,,691,696,696,696,696,696',
'696,696,696,696,696,696,,696,696,,691,696,696,,,,,,,,,,,,,,,696,,696',
',696,696,696,696,696,696,696,,696,733,733,733,733,733,733,733,733,733',
'733,733,,733,733,,696,733,733,,,,,,,,,,,,,,,733,,733,,733,733,733,733',
'733,733,733,,733,778,778,778,778,778,778,778,778,778,778,778,,778,778',
'733,733,778,778,,,,,,,,,,,,,,,778,,778,,778,778,778,778,778,778,778',
',778,,,,,,,,,,,,,,,,778' ]
        racc_action_check = arr = ::Array.new(25044, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    12,  1236,    49,   nil,   181,   nil,   868,  4773,  4894,
  5015,   nil,     6,    -3,    28,    87,   -28,   -80,   149,   nil,
  5128,  5249, 24289,   159,   nil,  5370,  5491,  5612,   -51,    70,
  5733,  5854,   nil,  1358,  5975,  6096,   nil,    86,   -78,   187,
   180,  6217,  6338,  6459,   205,   312,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   250,   nil,  6580,  6701,  6822,   -23,  6943,
  7064,   nil,   nil,   741,  7185,   322,   nil, 22778,   nil,   nil,
   nil,   nil,   nil,   244,   nil,   nil,   nil,   nil,   nil,   277,
   299, 22888,   nil,   nil,   nil,  7306,   nil,   nil,  7427,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   868,   nil,   nil,   nil,  7548,  7669,  7790,  7911,  8032,   988,
   nil,   483,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   303,   nil,   332,
  1480,  8153,  8274,  8395,  8516, 23058, 23118,  8637,  8758,  8879,
   nil,   373,   -74,   414,    32,   351,   399,  1602,   nil,   nil,
  9000,  9121,  9242,  9363,  9484,  9605,  9726,  9847,  9968, 10089,
 10210, 10331, 10452, 10573, 10694, 10815, 10936, 11057, 11178, 11299,
 11420, 11541, 11662, 11783, 11904, 12025, 12146,   nil,   nil,   nil,
 24334,   nil,   366,   370, 12267,   nil, 12388,   427,   nil,   nil,
   nil,   nil,   nil,   nil, 23178, 23238,   421, 12509,   nil,   457,
   nil,   nil,   nil, 12630,   nil,   nil, 12751,   468,  1724,   471,
   478,   450, 12872,  1846,   403,   416,   525,   502,   493,   458,
   -22,   nil,   500,   308,   nil,   nil,   170,   526,   527,   526,
   nil,   531,   nil, 12993,   nil,  1968,   381,   nil,   476,    46,
   187, 13114,   508,   211,   494,   nil,   217,   nil,   444,   -11,
    20, 13235, 13356,   292,    12,   477,   -19,   527,   554,   -13,
   601,   nil,   nil, 13477,   nil, 13598,   -45,   286,   287,   288,
   289,   367,   369,   370,   nil,   371,   nil,   nil,   nil,   nil,
   151,   nil,   175,   nil,   154,   507,   179,   nil,   508,   -35,
   nil,   188,   nil,   nil,   nil,   nil,   nil,  1045,   nil,   nil,
   nil,   nil,   nil,   nil, 13719,   nil,   nil,   nil,   nil,  2090,
   522,   nil,   nil,   741,   nil,   507, 13832,   nil,   508,   nil,
   nil, 24379,   544,   203,   219, 13953,   nil,   nil,     0,   557,
   125,   nil, 14074, 14195,   nil, 24424,   nil,   nil, 23298, 23358,
 14316,    90, 14437, 14558, 14679,   620,   868,    87,   160,   581,
   582,   583,   593,  2822,  2944,  3066,  1358,  1480,  1602,  1724,
  1846,  1968,  2090,  2212,  2334,  2456,   471,   961,  2578,  2700,
 24243,   -17,   nil, 14800,   nil,   nil, 14921,   535,   nil, 15042,
   372,   nil,   nil,   383,   nil,   nil,   nil,   nil, 15163,   nil,
   175,   206,   574,   540,   -24,   539,   639,   589,   nil,   592,
   573,   nil,   nil,   nil,   620, 15284, 23418, 23478,   528,   625,
   nil,   nil, 15405, 15526, 15647, 23538, 23598, 24469, 15768,   722,
   721,   608,   nil,   nil, 15889,   nil,   nil, 16010, 24514,   nil,
 16131,   nil,   nil,   nil,  2212,   726,   nil,   nil,  2334,    27,
    52,   724,   739,  2456,   nil, 16252, 23658, 23718,    -7,   nil,
   128,   192,   420,   nil,   620,   nil,    14, 16373,   nil,  1002,
   nil,   nil,   nil, 16494,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   125,   nil,   nil,   nil,   622,   nil,
   nil, 16615,   643,   nil, 16728, 16849,   nil,   275, 16970, 17091,
   660,   nil,   nil,   nil, 17212,   663,   nil, 17333,   181,   252,
   499,   620,   673,  1110, 17454,   nil, 17575,   nil,   nil, 17696,
   640,   nil,   682, 17817,   nil,   683,   nil,   679,   nil,   nil,
   nil,   nil,   nil,   233, 23766,   -64,   651, 17938,   nil,   691,
   nil,   nil,   nil,   nil,   692,   693, 23832, 23892, 18059,   nil,
   -65,   nil,   690,     5,   116,   697,   193,   741,   699, 24559,
   723,   734,     9,   787, 18180,   nil,   732, 18301,   nil,   nil,
   510,   nil,   811,   nil,   nil,   nil,   nil,   nil,   820,   nil,
   824, 18422,   744,    -6,    -5,    -4,     3, 18543,   nil,   623,
   nil, 23952, 18664, 24012,   nil,   nil,   nil,   376,   490,  2578,
  2700,   379,   413,   712,   724,   725,   nil,   nil,   nil,   nil,
   nil,   722,   nil,   nil,   nil,   nil,   810,   nil,   nil,   811,
 22998,    24,   604,  2822,   nil,   nil,   nil,   nil,   nil, 24604,
   735, 18785, 18906,   nil, 24649,   nil, 24694,   nil,   nil, 24739,
   nil, 24784, 19027, 19148, 19269,   263, 24829,   nil,   740,   989,
 19390,   nil,   770,  2944,   751,   nil, 19511,   755,   nil, 19632,
   nil, 19753,   756,   nil,   804,  3066,  3188,   nil,   nil,   806,
   807,   159,   868,   664,   nil,   895,   nil,  3310,   778,   840,
   nil,   nil,   nil, 24874,   919,   nil, 19874,   938,  3432,  3554,
   nil,   nil,   826,    21, 19995,    10,    53,   352,   793,   nil,
   863,  3676, 20116,   nil,   414,   947,   951,   842,   nil,  1039,
   nil,   340,   nil,   nil,   467, 20237,   nil,   nil,   nil,   889,
   nil,   nil,   nil,   nil,   nil,   868,   nil,   nil, 24919, 20358,
 20479,   744,   868,   926,   871,   860,   891,   nil,   nil,   988,
   nil, 20600,   nil,  3798,   875,   nil, 20721,   876, 20842,   nil,
   nil,   903,  1006,   928,   nil,  3920,   nil,   nil,    31, 20963,
   nil,   nil,   nil,    45,   nil,  1015,  1022, 21084,  4042,   nil,
   nil,   nil,  1023,   417,   nil,   nil,   nil,   946,   909,   920,
   nil,   nil,   923,   920,   nil,   nil,  1287,   nil,   nil,   nil,
 21205,  1110, 21326, 24072, 24132,   912,   962, 21447,   nil, 24180,
   950,   nil, 21568,   940,   nil, 21689,   941,   nil,   nil,   nil,
   nil,  4164,   nil,  4286,   nil,   nil, 21810,    78,  4408,   nil,
   nil,  4530,   nil,   391,   nil,   nil,   nil,  4652,   nil,   942,
   972,   979,   375,   381,   488,   983, 21931,   nil,   nil,   nil,
 22052,   947,   nil, 22173,   nil,  1069,   555,   nil,   nil,   nil,
   nil,  1068,  1071,   955,  1085,   998, 22294,   923,   nil,   970,
   nil, 22415,   981,   nil,   nil,   nil,   nil,   nil,   nil, 22536,
   nil,   nil, 22657,   nil,   nil,   982,   nil ]

racc_action_default = [
    -1,  -520,  -519,  -520,    -2,  -508,    -5,    -6,  -520,  -520,
  -520,   -20,  -520,  -520,  -520,  -520,  -520,  -274,   -34,   -35,
  -520,  -520,   -40,   -42,   -43,  -286,  -323,  -324,   -47,  -252,
  -371,  -289,   -61,  -519,   -65,   -70,   -71,  -520,  -449,  -520,
  -520,  -520,  -520,  -520,  -510,  -217,  -267,  -268,  -269,  -270,
  -271,  -272,  -273,  -498,  -276,  -520,  -519,  -519,  -292,  -520,
  -520,  -296,  -299,  -508,  -520,  -308,  -315,  -520,  -325,  -326,
  -394,  -395,  -396,  -397,  -398,  -519,  -401,  -519,  -519,  -519,
  -519,  -519,  -428,  -434,  -435,  -438,  -439,  -440,  -441,  -442,
  -443,  -444,  -445,  -446,  -447,  -448,  -451,  -452,   927,    -4,
  -509,  -515,  -516,  -517,  -520,  -520,  -520,  -520,  -520,    -8,
    -9,  -520,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,
  -104,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,  -171,  -172,  -173,   -14,  -105,  -520,
  -519,  -520,  -520,  -520,  -519,  -520,  -520,  -520,  -520,  -520,
   -38,  -520,  -449,  -520,  -274,  -520,  -520,  -519,   -39,  -209,
  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,
  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -520,
  -520,  -520,  -520,  -520,  -520,  -520,  -520,  -359,  -362,   -44,
  -218,  -231,  -519,  -519,  -520,  -239,  -520,  -262,  -286,  -323,
  -324,  -493,   -45,   -46,  -520,  -520,   -53,  -520,  -291,  -520,
  -372,  -375,   -59,  -519,  -370,   -60,  -520,   -61,  -519,  -520,
  -520,   -66,   -68,  -519,   -75,  -520,  -520,   -82,  -289,  -510,
  -365,  -327,  -371,  -520,   -69,   -73,  -282,  -436,  -437,  -520,
  -194,  -195,  -210,  -520,  -511,  -519,  -278,  -219,  -510,  -512,
  -512,  -520,  -520,  -512,  -520,  -490,  -512,  -293,   -41,  -520,
  -520,  -520,  -520,  -508,  -520,  -509,  -449,  -520,  -520,  -274,
  -520,  -339,  -340,  -520,  -311,  -520,   -96,   -97,  -134,  -135,
  -151,  -156,  -163,  -166,  -318,  -520,  -449,  -487,  -488,  -399,
  -520,  -414,  -520,  -416,  -520,  -520,  -520,  -406,  -520,  -520,
  -412,  -520,  -427,  -429,  -430,  -431,  -432,    -7,  -518,   -15,
   -16,   -17,   -18,   -19,  -520,   -11,   -12,   -13,  -106,  -519,
  -520,   -23,   -31,  -174,  -262,  -520,  -520,   -24,   -32,   -33,
   -25,  -176,  -520,  -499,  -500,  -519,  -501,  -502,  -499,  -252,
  -500,  -369,  -504,  -505,   -30,  -183,   -36,   -37,  -520,  -520,
  -519,  -282,  -520,  -520,  -520,  -184,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -196,  -197,  -198,  -199,  -200,  -201,  -202,
  -203,  -204,  -205,  -206,  -207,  -208,  -211,  -212,  -213,  -214,
  -520,  -519,  -232,  -520,  -261,  -234,  -520,  -519,  -259,  -520,
  -252,  -499,  -500,  -252,   -50,   -54,  -253,  -254,  -255,  -366,
  -519,  -519,  -520,  -510,  -510,  -519,  -231,  -520,  -288,  -520,
   -62,  -280,   -74,   -67,  -520,  -519,  -520,  -520,   -81,  -520,
  -436,  -437,  -520,  -520,  -520,  -520,  -520,  -215,  -520,  -386,
  -520,  -510,  -220,  -221,  -514,  -513,  -223,  -514,  -510,  -284,
  -514,  -492,  -285,  -491,  -519,  -328,  -329,  -330,  -519,  -520,
  -520,  -520,  -520,  -519,  -378,  -519,  -520,  -520,  -282,  -305,
   -91,   -92,  -520,   -94,  -520,  -274,  -520,  -520,  -316,  -467,
  -320,  -506,  -507,  -520,  -400,  -415,  -418,  -419,  -421,  -402,
  -417,  -403,  -404,  -405,  -520,  -408,  -410,  -411,  -520,  -433,
   -10,  -520,  -520,   -22,  -520,  -520,  -266,  -283,  -520,  -520,
   -55,  -229,  -230,  -367,  -520,   -57,  -368,  -520,  -499,  -500,
  -503,  -281,  -520,  -174,  -520,  -355,  -520,  -357,  -360,  -520,
  -519,  -260,  -263,  -520,  -494,  -520,  -238,  -520,  -495,   -48,
  -363,   -49,  -364,  -519,   -40,  -520,  -519,  -520,  -251,  -520,
  -257,  -373,  -376,  -225,  -520,  -520,  -520,  -520,  -520,  -287,
   -62,   -72,  -520,  -499,  -500,  -519,   -78,   -80,  -520,  -182,
  -192,  -193,  -520,  -519,  -519,  -277,  -520,  -520,  -263,  -224,
  -519,  -331,  -519,  -297,  -332,  -333,  -334,  -300,  -520,  -303,
  -520,  -520,  -520,  -499,  -500,  -503,  -281,  -520,   -91,   -92,
   -93,  -520,  -519,  -520,  -309,  -453,  -454,  -520,  -312,  -519,
  -519,  -467,  -520,  -486,  -486,  -486,  -466,  -468,  -469,  -470,
  -471,  -472,  -473,  -476,  -478,  -479,  -481,  -482,  -483,  -520,
  -520,  -510,  -520,  -519,  -407,  -409,  -413,  -107,   -21,  -175,
  -264,  -520,  -520,   -27,  -178,   -28,  -179,   -56,   -29,  -180,
   -58,  -181,  -520,  -520,  -520,  -283,  -216,  -341,  -343,  -353,
  -520,  -356,  -520,  -519,  -519,  -236,  -520,  -519,   -51,  -520,
  -244,  -520,  -519,  -256,  -520,  -519,  -519,  -226,  -227,  -519,
  -519,  -510,  -520,   -76,  -290,  -519,  -337,  -519,  -387,  -519,
  -388,  -389,  -279,  -510,  -520,  -335,  -520,  -520,  -519,  -519,
  -302,  -304,  -380,  -520,  -520,  -283,  -520,   -91,   -92,   -95,
  -520,  -519,  -520,  -456,  -520,  -520,  -520,  -510,  -458,  -520,
  -462,  -520,  -464,  -465,  -520,  -520,  -480,  -484,  -321,  -520,
  -420,  -423,  -424,  -425,  -426,  -520,  -265,   -26,  -177,  -520,
  -344,   -83,  -520,  -520,   -90,  -352,  -520,  -354,  -358,  -520,
  -233,  -520,  -235,  -519,  -519,  -241,  -520,  -519,  -520,  -250,
  -258,  -520,  -520,  -520,    -3,  -519,  -393,  -338,  -520,  -520,
  -391,  -222,  -294,  -520,  -295,  -520,  -520,  -520,  -519,  -382,
  -306,  -283,  -520,  -520,  -313,  -317,  -319,  -520,  -486,  -486,
  -474,  -485,  -486,  -520,  -477,  -475,  -467,  -489,  -422,  -342,
  -520,  -349,  -519,  -520,  -520,   -89,  -520,  -520,  -361,  -519,
  -520,  -240,  -520,  -519,  -246,  -520,  -519,  -374,  -377,  -228,
  -392,  -519,  -390,  -519,  -298,  -301,  -520,  -519,  -519,  -310,
  -455,  -519,  -457,  -520,  -460,  -461,  -463,  -519,  -345,  -348,
  -520,  -520,   -85,   -87,   -86,   -88,  -520,  -351,  -237,   -52,
  -520,  -519,  -242,  -520,  -245,  -386,  -519,  -381,  -379,  -383,
  -384,  -520,  -520,  -486,  -520,  -520,  -520,   -84,  -350,  -519,
  -247,  -520,  -519,  -385,  -336,  -307,  -314,  -459,  -322,  -520,
  -347,  -243,  -520,  -248,  -346,  -519,  -249 ]

clist = [
'13,208,613,243,243,243,13,271,115,115,435,334,302,103,480,241,241,241',
'284,293,502,99,309,310,454,353,313,372,379,264,650,13,656,445,4,306',
'623,627,110,188,118,118,120,120,494,498,298,734,725,267,242,242,242',
'834,245,245,245,737,640,109,580,574,321,582,269,270,115,359,360,361',
'362,103,829,516,832,518,256,262,265,314,115,568,303,200,525,1,2,239',
'252,253,535,804,100,760,762,763,187,322,13,364,591,592,189,483,486,583',
'13,491,793,541,493,590,574,342,344,446,589,351,296,281,281,16,308,308',
'714,337,308,16,304,307,320,385,389,644,335,520,295,481,311,201,201,738',
'312,739,201,201,201,637,868,281,382,357,16,275,275,323,751,517,754,363',
'871,325,649,519,656,834,670,308,308,308,308,371,377,380,201,201,836',
'394,201,201,698,702,201,317,298,431,903,749,13,703,440,443,450,715,451',
'393,716,743,898,631,729,808,339,340,576,13,346,628,534,349,770,672,673',
'352,752,757,375,375,828,16,830,523,370,201,201,201,201,16,,,,,17,708',
',243,,,17,270,,243,,,243,,,241,,,,,,456,469,463,241,,449,,,396,397,17',
'277,277,13,,874,875,,13,876,482,499,500,,,675,,,264,242,820,267,,245',
',455,267,,242,245,13,319,245,,,,459,270,,899,,464,270,,,,16,201,201',
'201,201,,,201,201,201,447,,103,,914,,453,16,687,457,501,17,574,690,',
'385,389,574,705,17,580,582,,,917,,,,877,,656,,,,710,,,562,281,,721,',
',,115,,,,13,755,756,,,,,308,308,201,,,,,,201,,,201,,16,556,,298,275',
'16,540,,118,,120,393,,,542,,608,,,,,281,,281,570,608,,16,,,,913,,17',
'602,,,,,586,,594,595,201,201,550,,,,555,17,,,,,514,608,514,,,,,,730',
',,,,298,616,,,,,632,,619,,,393,,,,822,790,,,792,393,,588,818,799,574',
',,,,,,579,16,,581,,13,,,298,13,,17,,,13,277,17,,,393,624,624,,,296,',
',,,,,,201,,,,,645,17,620,,683,685,622,,719,720,688,630,574,,,697,115',
'612,,861,,,,,863,,,,,515,,515,,,,,,851,,,854,,,201,,,677,,118,900,120',
',570,608,,,648,,,,201,,671,,722,,902,,,,,,904,201,750,17,746,,,,,,,556',
',,,,,16,768,,888,16,,,892,38,16,894,201,,,38,,,,,298,,,,201,,,375,393',
',201,,,,769,13,13,,,281,38,274,274,753,742,,910,,758,,777,,,,,201,201',
'115,,13,,201,,,921,,,923,,,,316,,275,336,797,,,,,926,,,,803,785,787',
'813,308,13,,,,775,,,811,,,,,13,13,823,,201,,38,,,,,17,13,,38,17,,,,827',
'17,794,789,13,13,795,,,,,,,,,801,802,13,,,,839,624,,201,,,807,,201,824',
',,,,,16,16,815,816,,,,,,,,,608,,,,281,281,,,,,,13,16,,,,277,,881,308',
',201,,13,,,,862,,38,,,,,,308,13,,782,782,,,16,,,850,38,,,,891,870,298',
',16,16,,860,878,879,,,,393,,887,16,,,,867,,,,,201,,16,16,13,,13,,,,281',
'13,,,13,16,201,,,,13,,,,17,17,,,,908,,,38,,,,274,38,895,281,896,,,,275',
'901,,774,17,920,,,,,,,,16,,38,,,924,,,,,,,16,281,281,,782,784,784,,281',
'17,,,,16,,,,,336,,336,17,17,,,,,,,,,,,17,,782,782,201,,,,,782,,17,17',
',281,,,,,,,,,16,17,16,,,,,16,38,,16,281,,,,,16,,,,,,,,281,782,,,,,277',
',,,,,,,,,,,,17,,782,,,,,,,,,,17,,,782,784,209,,,,240,240,240,,17,,,',
',,,,,,,,290,291,292,,,,,,,,784,784,,,,240,240,784,,,,,,,,,,,,15,,17',
',17,,15,,,17,,,17,,,,,,17,,,,,,38,,,784,38,,,15,,38,,,,,,,,,,,,,,784',
',,,,,,,,,,,,784,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,274,,15,,,,,,,,15',
',,,,,,,,,,,,,,373,240,381,240,,,395,,,,,,,,,,,,,209,405,406,407,408',
'409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425',
'426,427,428,429,430,,,,,,,,240,,240,,,38,38,,,,,,,240,15,,,,,240,,,240',
',,,,,,38,,15,,,,,,,,,,,,,,,,,,477,,,,,,781,781,488,,38,,,,,,,,,,,,38',
'38,,,,,,,,,,,38,,,,,,,,,15,,38,38,,15,,,,,,,,,,38,,,,,,,,,,,,15,,,,',
',,,,,,,,240,,,,274,,,,,,,,,,,,,38,,,,,,,240,,395,563,381,38,,,,781,',
',,,,,,,38,,,,,,,,,,,,,,,240,,,240,15,,240,781,781,,,,,,781,584,,,,,',
',,,,,,,38,,38,,240,,,38,,,38,609,610,611,,,38,,29,,,,,240,29,781,240',
',,240,,,,,,,29,29,,,,29,29,29,240,781,,,,29,,,,,,,,,781,,,,,,374,378',
',,,,,29,29,,,29,29,,,29,,,,679,240,,,684,686,,,,,689,,,691,,,,,15,,696',
',15,,,240,,15,,240,,,,29,437,,438,29,29,29,29,29,,240,,,,,,,,,,,240',
',,,,,,,,,,,,,,,240,297,305,733,,,,,,,,,,,,,,240,,,341,,343,343,347,350',
'343,,240,,,,,,,,,,,,,,,,,,,,,,,,,29,29,29,29,29,,,29,29,29,,,,,240,778',
',29,,,,,,,,684,686,689,,,,,,,,,,,,240,,,240,546,240,,,,,,15,15,,,,,',
',,,,,,,,,,29,,,,,,29,15,,29,240,29,,,,,29,,,297,,,,,,,,,,,,240,,572',
',,575,15,29,578,,,,,,778,,,585,15,15,,,,29,29,,849,,,,15,240,,240,,',
'434,434,,,,15,15,,,,,,,,,,240,618,15,,575,452,,618,,,,,,,,,,,,,,,,,',
'240,,,,29,,,,,,240,,,240,,,,,,15,,,,,240,,,,,,,15,,,,29,,680,,,,,,,15',
',,,240,,,240,,,,,,,,,,704,,,,707,,,,240,,,,,,,,,,712,240,,,29,,,,15',
',15,572,,,,15,,,15,,,29,,551,15,,,728,,,,,,,29,,,,297,,,,,,374,,,,,',
'29,,,,29,,,,,29,,29,,,,,,,,565,,,,29,,434,,,551,29,,551,,,,,,,565,565',
',,,434,776,,,,,,,,,297,29,29,,,,,29,,,,,,,,,575,,,,,575,,,,,,,,,,,,',
',,,,,,297,,,,,,,,,,,29,,,819,,,,,,,,,,,,,,,,,,,,,835,,,,,,,,,,,,,,,29',
',,,,29,,,,,,,29,29,,434,853,,856,,,,,,,,,,565,,,434,,,,,29,618,,,,,',
',,29,,,,,551,,,,,,,,726,731,,,,,,726,29,726,,,,,572,,,575,,,29,29,,',
',,,,897,297,,,29,,,,,,,,,29,,29,29,,,,,,,,909,,,912,29,29,,,,,,,,,,',
',,,,,575,,,,,,,,,,,925,,,,,,,434,,,434,,,,29,434,,,,,,,551,551,,,29',
',806,,,,810,,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,29',
',29,,,,,29,,,29,,,,,434,29,,434,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,297,,,,,,,434,,,,434,,,434,,,,,,,,,,,726,,,,,,,,,,,,,,,,,,,',
',,,,434,,,,,726,,,,,,,,,,,,,434,,,434,,,,,,,,,,,,,434' ]
        racc_goto_table = arr = ::Array.new(2504, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'16,17,5,59,59,59,16,43,49,49,62,48,21,85,3,29,29,29,44,55,82,9,15,15',
'32,48,15,23,23,60,86,16,142,35,2,59,81,81,13,13,52,52,53,53,79,79,29',
'80,6,40,57,57,57,144,63,63,63,6,46,11,61,148,16,61,41,2,49,15,15,15',
'15,85,140,47,140,47,34,34,34,9,49,36,57,25,130,1,4,31,31,31,130,7,12',
'141,141,141,14,18,16,26,36,36,27,58,58,37,16,58,38,54,58,64,148,127',
'127,65,67,127,25,56,56,20,25,25,68,75,25,20,76,77,83,33,33,84,87,88',
'89,90,91,20,20,92,93,94,20,20,20,95,96,56,21,11,20,20,20,97,98,99,100',
'11,101,102,103,104,142,144,105,25,25,25,25,17,17,17,20,20,106,17,20',
'20,107,108,20,20,29,110,140,46,16,111,33,33,114,115,116,49,117,118,119',
'120,121,122,125,126,62,16,128,82,129,131,132,133,134,135,136,137,57',
'57,139,20,143,147,2,20,20,20,20,20,,,,,22,36,,59,,,22,2,,59,,,59,,,29',
',,,,,29,55,44,29,,60,,,25,25,22,22,22,16,,141,141,,16,141,55,15,15,',
',130,,,60,57,81,40,,63,,57,40,,57,63,16,22,63,,,,41,2,,6,,41,2,,,,20',
'20,20,20,20,,,20,20,20,31,,85,,80,,31,20,35,31,9,22,148,35,,33,33,148',
'62,22,61,61,,,141,,,,86,,142,,,,62,,,21,56,,32,,,,49,,,,16,3,3,,,,,25',
'25,20,,,,,,20,,,20,,20,60,,29,20,20,13,,52,,53,49,,,2,,33,,,,,56,,56',
'59,33,,20,,,,5,,22,21,,,,,59,,55,55,20,20,34,,,,34,22,,,,,20,33,20,',
',,,,23,,,,,29,55,,,,,21,,55,,,49,,,,3,62,,,62,49,,63,79,62,148,,,,,',
',34,20,,34,,16,,,29,16,,22,,,16,22,22,,,49,85,85,,,25,,,,,,,,20,,,,',
'85,22,2,,17,17,2,,33,33,17,2,148,,,43,49,25,,79,,,,,79,,,,,22,,22,,',
',,,62,,,62,,,20,,,13,,52,82,53,,59,33,,,25,,,,20,,25,,29,,3,,,,,,3,20',
'21,22,15,,,,,,,60,,,,,,20,48,,62,20,,,62,45,20,62,20,,,45,,,,,29,,,',
'20,,,57,49,,20,,,,55,16,16,,,56,45,45,45,85,57,,62,,85,,17,,,,,20,20',
'49,,16,,20,,,62,,,62,,,,45,,20,45,59,,,,,62,,,,55,16,16,15,25,16,,,',
'2,,,55,,,,,16,16,15,,20,,45,,,,,22,16,,45,22,,,,55,22,57,2,16,16,63',
',,,,,,,,2,2,16,,,,43,85,,20,,,2,,20,85,,,,,,20,20,2,2,,,,,,,,,33,,,',
'56,56,,,,,,16,20,,,,22,,21,25,,20,,16,,,,16,,45,,,,,,25,16,,20,20,,',
'20,,,2,45,,,,59,85,29,,20,20,,2,16,16,,,,49,,16,20,,,,2,,,,,20,,20,20',
'16,,16,,,,56,16,,,16,20,20,,,,16,,,,22,22,,,,16,,,45,,,,45,45,2,56,2',
',,,20,2,,22,22,16,,,,,,,,20,,45,,,16,,,,,,,20,56,56,,20,22,22,,56,22',
',,,20,,,,,45,,45,22,22,,,,,,,,,,,22,,20,20,20,,,,,20,,22,22,,56,,,,',
',,,,20,22,20,,,,,20,45,,20,56,,,,,20,,,,,,,,56,20,,,,,22,,,,,,,,,,,',
',22,,20,,,,,,,,,,22,,,20,22,28,,,,28,28,28,,22,,,,,,,,,,,,28,28,28,',
',,,,,,22,22,,,,28,28,22,,,,,,,,,,,,19,,22,,22,,19,,,22,,,22,,,,,,22',
',,,,,45,,,22,45,,,19,,45,,,,,,,,,,,,,,22,,,,,,,,,,,,,22,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,45,,19,,,,,,,,19,,,,,,,,,,,,,,,28,28,28,28,,',
'28,,,,,,,,,,,,,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,,,,,,,,28,,28,,,45,45,,,,,,,28,19,,,,,28',
',,28,,,,,,,45,,19,,,,,,,,,,,,,,,,,,28,,,,,,45,45,28,,45,,,,,,,,,,,,45',
'45,,,,,,,,,,,45,,,,,,,,,19,,45,45,,19,,,,,,,,,,45,,,,,,,,,,,,19,,,,',
',,,,,,,,28,,,,45,,,,,,,,,,,,,45,,,,,,,28,,28,28,28,45,,,,45,,,,,,,,',
'45,,,,,,,,,,,,,,,28,,,28,19,,28,45,45,,,,,,45,28,,,,,,,,,,,,,45,,45',
',28,,,45,,,45,28,28,28,,,45,,39,,,,,28,39,45,28,,,28,,,,,,,39,39,,,',
'39,39,39,28,45,,,,39,,,,,,,,,45,,,,,,24,24,,,,,,39,39,,,39,39,,,39,',
',,28,28,,,28,28,,,,,28,,,28,,,,,19,,28,,19,,,28,,19,,28,,,,39,24,,24',
'39,39,39,39,39,,28,,,,,,,,,,,28,,,,,,,,,,,,,,,,28,10,10,28,,,,,,,,,',
',,,,28,,,10,,10,10,10,10,10,,28,,,,,,,,,,,,,,,,,,,,,,,,,39,39,39,39',
'39,,,39,39,39,,,,,28,28,,39,,,,,,,,28,28,28,,,,,,,,,,,,28,,,28,24,28',
',,,,,19,19,,,,,,,,,,,,,,,,39,,,,,,39,19,,39,28,39,,,,,39,,,10,,,,,,',
',,,,,28,,24,,,24,19,39,24,,,,,,28,,,24,19,19,,,,39,39,,28,,,,19,28,',
'28,,,10,10,,,,19,19,,,,,,,,,,28,24,19,,24,10,,24,,,,,,,,,,,,,,,,,,28',
',,,39,,,,,,28,,,28,,,,,,19,,,,,28,,,,,,,19,,,,39,,24,,,,,,,19,,,,28',
',,28,,,,,,,,,,24,,,,24,,,,28,,,,,,,,,,24,28,,,39,,,,19,,19,24,,,,19',
',,19,,,39,,10,19,,,24,,,,,,,39,,,,10,,,,,,24,,,,,,39,,,,39,,,,,39,,39',
',,,,,,,10,,,,39,,10,,,10,39,,10,,,,,,,10,10,,,,10,24,,,,,,,,,10,39,39',
',,,,39,,,,,,,,,24,,,,,24,,,,,,,,,,,,,,,,,,,10,,,,,,,,,,,39,,,24,,,,',
',,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,39,,,,,39,,,,,,,39,39,,10,24,,24,,',
',,,,,,,10,,,10,,,,,39,24,,,,,,,,39,,,,,10,,,,,,,,10,10,,,,,,10,39,10',
',,,,24,,,24,,,39,39,,,,,,,24,10,,,39,,,,,,,,,39,,39,39,,,,,,,,24,,,24',
'39,39,,,,,,,,,,,,,,,,24,,,,,,,,,,,24,,,,,,,10,,,10,,,,39,10,,,,,,,10',
'10,,,39,,10,,,,10,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,',
',,,39,,39,,,,,39,,,39,,,,,10,39,,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,10,,,,,,,10,,,,10,,,10,,,,,,,,,,,10,,,,,,,,,,,,,,,,,,,,',
',,,10,,,,,10,,,,,,,,,,,,,10,,,10,,,,,,,,,,,,,10' ]
        racc_goto_check = arr = ::Array.new(2504, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,    85,    32,  -281,    86,  -477,  -565,  -634,   nil,    16,
  1578,    51,    87,    29,    86,   -37,    -2,   -20,    33,  1087,
   119,   -44,   230,  -164,  1353,    63,   -11,    91,  1019,   -10,
   nil,    62,  -239,   -64,    47,  -223,  -350,  -339,  -600,  1496,
    16,    31,   nil,   -27,   -17,   619,  -454,  -250,   -56,    -1,
   nil,   nil,    31,    33,  -259,   -25,    85,    25,  -196,   -22,
    -1,  -380,  -233,    29,  -337,  -142,   nil,  -332,  -466,   nil,
   nil,   nil,   nil,   nil,   nil,    58,    71,    71,   nil,  -265,
  -573,  -463,  -294,    66,  -383,     8,  -489,    67,  -200,    82,
  -159,    77,  -482,    80,  -484,  -362,  -672,    90,  -488,  -167,
  -490,  -664,    95,  -356,  -171,  -354,  -592,  -386,  -385,   nil,
   -52,  -379,   nil,   nil,   -68,  -398,   -67,  -396,  -434,  -669,
  -305,  -414,  -528,   nil,   nil,   129,   128,    36,   127,  -138,
  -256,   129,  -462,  -316,  -316,   132,  -432,  -436,   nil,  -541,
  -687,  -560,  -487,  -539,  -708,   nil,   nil,  -117,  -375 ]

racc_goto_default = [
   nil,   nil,   479,   nil,   nil,   nil,   735,   nil,     5,   nil,
     6,     7,   315,   nil,   nil,   nil,   205,    19,    14,   206,
   289,   nil,   204,   nil,   247,    18,   nil,   nil,    22,    23,
    24,   nil,    28,   605,   nil,   nil,   nil,   nil,   nil,   280,
    32,   nil,    34,    37,    36,   202,   513,   nil,   117,   387,
   116,   119,    71,    72,   nil,   nil,    45,   299,   nil,   300,
   552,   553,   432,   571,   nil,   nil,   257,   nil,   nil,    46,
    47,    48,    49,    50,    51,    52,   nil,   258,    58,   nil,
   nil,   nil,   nil,   nil,   nil,   495,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   238,
   nil,   nil,   391,   259,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    70,    73,    74,   nil,   nil,   nil,   nil,
   530,   nil,   nil,   nil,   nil,   nil,   nil,   652,   653,   654,
   655,   nil,   831,   662,   663,   666,   669,   nil,   251 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 172, :_reduce_70,
  1, 175, :_reduce_none,
  3, 175, :_reduce_72,
  2, 174, :_reduce_73,
  3, 174, :_reduce_74,
  1, 176, :_reduce_75,
  4, 176, :_reduce_76,
  3, 176, :_reduce_77,
  3, 176, :_reduce_78,
  3, 176, :_reduce_79,
  3, 176, :_reduce_80,
  2, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 148, :_reduce_83,
  4, 148, :_reduce_84,
  3, 148, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  2, 148, :_reduce_89,
  1, 148, :_reduce_90,
  1, 178, :_reduce_91,
  1, 178, :_reduce_none,
  2, 179, :_reduce_93,
  1, 179, :_reduce_94,
  3, 179, :_reduce_95,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_99,
  1, 180, :_reduce_100,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 145, :_reduce_103,
  1, 145, :_reduce_none,
  1, 146, :_reduce_105,
  0, 186, :_reduce_106,
  4, 146, :_reduce_107,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_174,
  5, 160, :_reduce_175,
  3, 160, :_reduce_176,
  6, 160, :_reduce_177,
  5, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  5, 160, :_reduce_181,
  4, 160, :_reduce_182,
  3, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  3, 160, :_reduce_191,
  4, 160, :_reduce_192,
  4, 160, :_reduce_193,
  2, 160, :_reduce_194,
  2, 160, :_reduce_195,
  3, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  3, 160, :_reduce_208,
  2, 160, :_reduce_209,
  2, 160, :_reduce_210,
  3, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  3, 160, :_reduce_215,
  5, 160, :_reduce_216,
  1, 160, :_reduce_none,
  1, 156, :_reduce_218,
  1, 153, :_reduce_none,
  2, 153, :_reduce_220,
  2, 153, :_reduce_221,
  5, 153, :_reduce_222,
  2, 153, :_reduce_223,
  3, 153, :_reduce_224,
  3, 192, :_reduce_225,
  4, 192, :_reduce_226,
  4, 192, :_reduce_227,
  6, 192, :_reduce_228,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 163, :_reduce_231,
  2, 163, :_reduce_232,
  5, 163, :_reduce_233,
  2, 163, :_reduce_234,
  5, 163, :_reduce_235,
  4, 163, :_reduce_236,
  7, 163, :_reduce_237,
  3, 163, :_reduce_238,
  1, 163, :_reduce_none,
  4, 196, :_reduce_240,
  3, 196, :_reduce_241,
  5, 196, :_reduce_242,
  7, 196, :_reduce_243,
  2, 196, :_reduce_244,
  5, 196, :_reduce_245,
  4, 196, :_reduce_246,
  6, 196, :_reduce_247,
  7, 196, :_reduce_248,
  9, 196, :_reduce_249,
  3, 196, :_reduce_250,
  1, 196, :_reduce_none,
  0, 198, :_reduce_252,
  2, 166, :_reduce_253,
  1, 197, :_reduce_none,
  0, 199, :_reduce_255,
  3, 197, :_reduce_256,
  0, 200, :_reduce_257,
  4, 197, :_reduce_258,
  2, 195, :_reduce_259,
  2, 194, :_reduce_260,
  1, 194, :_reduce_none,
  1, 189, :_reduce_262,
  3, 189, :_reduce_263,
  3, 155, :_reduce_264,
  4, 155, :_reduce_265,
  2, 155, :_reduce_266,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_275,
  0, 221, :_reduce_276,
  4, 188, :_reduce_277,
  0, 222, :_reduce_278,
  5, 188, :_reduce_279,
  3, 188, :_reduce_280,
  3, 188, :_reduce_281,
  2, 188, :_reduce_282,
  4, 188, :_reduce_283,
  3, 188, :_reduce_284,
  3, 188, :_reduce_285,
  1, 188, :_reduce_286,
  4, 188, :_reduce_287,
  3, 188, :_reduce_288,
  1, 188, :_reduce_289,
  5, 188, :_reduce_290,
  2, 188, :_reduce_291,
  1, 188, :_reduce_none,
  2, 188, :_reduce_293,
  6, 188, :_reduce_294,
  6, 188, :_reduce_295,
  0, 223, :_reduce_296,
  0, 224, :_reduce_297,
  7, 188, :_reduce_298,
  0, 225, :_reduce_299,
  0, 226, :_reduce_300,
  7, 188, :_reduce_301,
  5, 188, :_reduce_302,
  4, 188, :_reduce_303,
  5, 188, :_reduce_304,
  0, 227, :_reduce_305,
  0, 228, :_reduce_306,
  9, 188, :_reduce_307,
  0, 229, :_reduce_308,
  0, 230, :_reduce_309,
  7, 188, :_reduce_310,
  0, 231, :_reduce_311,
  0, 232, :_reduce_312,
  0, 233, :_reduce_313,
  9, 188, :_reduce_314,
  0, 234, :_reduce_315,
  0, 235, :_reduce_316,
  6, 188, :_reduce_317,
  0, 236, :_reduce_318,
  6, 188, :_reduce_319,
  0, 237, :_reduce_320,
  0, 238, :_reduce_321,
  9, 188, :_reduce_322,
  1, 188, :_reduce_323,
  1, 188, :_reduce_324,
  1, 188, :_reduce_325,
  1, 188, :_reduce_326,
  1, 152, :_reduce_327,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  2, 211, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 212, :_reduce_none,
  5, 212, :_reduce_336,
  1, 138, :_reduce_none,
  2, 138, :_reduce_338,
  1, 215, :_reduce_none,
  1, 215, :_reduce_340,
  1, 239, :_reduce_341,
  3, 239, :_reduce_342,
  1, 240, :_reduce_343,
  2, 240, :_reduce_344,
  4, 240, :_reduce_345,
  7, 240, :_reduce_346,
  6, 240, :_reduce_347,
  4, 240, :_reduce_348,
  3, 240, :_reduce_349,
  5, 240, :_reduce_350,
  4, 240, :_reduce_351,
  2, 240, :_reduce_352,
  1, 240, :_reduce_353,
  2, 240, :_reduce_354,
  1, 168, :_reduce_355,
  2, 168, :_reduce_356,
  1, 168, :_reduce_357,
  3, 168, :_reduce_358,
  0, 242, :_reduce_359,
  0, 243, :_reduce_360,
  6, 241, :_reduce_361,
  2, 164, :_reduce_362,
  4, 164, :_reduce_363,
  4, 164, :_reduce_364,
  0, 245, :_reduce_365,
  3, 210, :_reduce_366,
  4, 210, :_reduce_367,
  4, 210, :_reduce_368,
  3, 210, :_reduce_369,
  2, 210, :_reduce_370,
  1, 210, :_reduce_371,
  0, 246, :_reduce_372,
  0, 247, :_reduce_373,
  6, 209, :_reduce_374,
  0, 248, :_reduce_375,
  0, 249, :_reduce_376,
  6, 209, :_reduce_377,
  0, 252, :_reduce_378,
  6, 214, :_reduce_379,
  1, 250, :_reduce_none,
  4, 250, :_reduce_381,
  2, 250, :_reduce_382,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  6, 137, :_reduce_385,
  0, 137, :_reduce_386,
  1, 253, :_reduce_387,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  2, 254, :_reduce_390,
  1, 254, :_reduce_none,
  2, 139, :_reduce_392,
  1, 139, :_reduce_none,
  1, 201, :_reduce_394,
  1, 201, :_reduce_395,
  1, 201, :_reduce_none,
  1, 202, :_reduce_397,
  1, 256, :_reduce_none,
  2, 256, :_reduce_399,
  3, 257, :_reduce_400,
  1, 257, :_reduce_401,
  3, 203, :_reduce_402,
  3, 204, :_reduce_403,
  3, 205, :_reduce_404,
  3, 205, :_reduce_405,
  1, 260, :_reduce_406,
  3, 260, :_reduce_407,
  1, 261, :_reduce_none,
  2, 261, :_reduce_409,
  3, 206, :_reduce_410,
  3, 206, :_reduce_411,
  1, 263, :_reduce_412,
  3, 263, :_reduce_413,
  1, 258, :_reduce_414,
  2, 258, :_reduce_415,
  1, 259, :_reduce_416,
  2, 259, :_reduce_417,
  1, 262, :_reduce_418,
  0, 265, :_reduce_419,
  3, 262, :_reduce_420,
  0, 266, :_reduce_421,
  4, 262, :_reduce_422,
  1, 264, :_reduce_423,
  1, 264, :_reduce_424,
  1, 264, :_reduce_425,
  1, 264, :_reduce_none,
  2, 184, :_reduce_427,
  1, 184, :_reduce_428,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  3, 185, :_reduce_433,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  2, 255, :_reduce_436,
  2, 255, :_reduce_437,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_443,
  1, 177, :_reduce_444,
  1, 177, :_reduce_445,
  1, 177, :_reduce_446,
  1, 177, :_reduce_447,
  1, 177, :_reduce_448,
  1, 207, :_reduce_449,
  1, 151, :_reduce_450,
  1, 154, :_reduce_451,
  1, 154, :_reduce_452,
  1, 216, :_reduce_453,
  0, 268, :_reduce_454,
  4, 216, :_reduce_455,
  2, 216, :_reduce_456,
  4, 218, :_reduce_457,
  2, 218, :_reduce_458,
  6, 269, :_reduce_459,
  4, 269, :_reduce_460,
  4, 269, :_reduce_461,
  2, 269, :_reduce_462,
  4, 269, :_reduce_463,
  2, 269, :_reduce_464,
  2, 269, :_reduce_465,
  1, 269, :_reduce_466,
  0, 269, :_reduce_467,
  1, 275, :_reduce_468,
  1, 275, :_reduce_469,
  1, 275, :_reduce_470,
  1, 275, :_reduce_471,
  1, 275, :_reduce_472,
  1, 270, :_reduce_473,
  3, 270, :_reduce_474,
  3, 276, :_reduce_475,
  1, 271, :_reduce_476,
  3, 271, :_reduce_477,
  1, 277, :_reduce_none,
  1, 277, :_reduce_none,
  2, 272, :_reduce_480,
  1, 272, :_reduce_481,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  2, 274, :_reduce_484,
  2, 273, :_reduce_485,
  0, 273, :_reduce_486,
  1, 219, :_reduce_none,
  0, 279, :_reduce_488,
  5, 219, :_reduce_489,
  1, 208, :_reduce_490,
  2, 208, :_reduce_491,
  2, 208, :_reduce_492,
  1, 191, :_reduce_none,
  3, 191, :_reduce_494,
  3, 280, :_reduce_495,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  0, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 217, :_reduce_515,
  1, 217, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_518,
  0, 142, :_reduce_519 ]

racc_reduce_n = 520

racc_shift_n = 927

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tLBRACK2 => 91,
  :tRBRACK => 92,
  :tLBRACE => 93,
  :tLBRACE_ARG => 94,
  :tSTAR => 95,
  :tSTAR2 => 96,
  :tAMPER => 97,
  :tAMPER2 => 98,
  :tTILDE => 99,
  :tPERCENT => 100,
  :tDIVIDE => 101,
  :tPLUS => 102,
  :tMINUS => 103,
  :tLT => 104,
  :tGT => 105,
  :tPIPE => 106,
  :tBANG => 107,
  :tCARET => 108,
  :tLCURLY => 109,
  :tRCURLY => 110,
  :tBACK_REF2 => 111,
  :tSYMBEG => 112,
  :tSTRING_BEG => 113,
  :tXSTRING_BEG => 114,
  :tREGEXP_BEG => 115,
  :tWORDS_BEG => 116,
  :tQWORDS_BEG => 117,
  :tSTRING_DBEG => 118,
  :tSTRING_DVAR => 119,
  :tSTRING_END => 120,
  :tSTRING => 121,
  :tSYMBOL => 122,
  :tNL => 123,
  :tEH => 124,
  :tCOLON => 125,
  :tCOMMA => 126,
  :tSPACE => 127,
  :tSEMI => 128,
  :tLAST_TOKEN => 129,
  :tEQL => 130,
  :tLOWEST => 131 }

racc_nt_base = 132

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "block_par",
  "block_var",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "when_args",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = block_append val[0], val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_9(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_10(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_13(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_16(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_18(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_22(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_28(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_29(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_30(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_33(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_37(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_45(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_46(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_49(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_50(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_51(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_52(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      self.env.unextend
                    
    result
end

def _reduce_53(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]

                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      raise "no2"

                      if val[4] then
                        block_dup_check result, val[4]

                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      raise "no3"

                      if val[4] then
                        block_dup_check result, val[4]

                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_68(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_69(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_70(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_75(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = aryset val[0], val[2]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_80(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_82(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = aryset val[0], val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_88(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_89(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_90(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 101 omitted

# reduce 102 omitted

def _reduce_103(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 104 omitted

def _reduce_105(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_106(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_107(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

def _reduce_174(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_175(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                      # result.line = val[0].line
                    
    result
end

def _reduce_176(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_177(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2][0] = :arglist if val[2]
                    
    result
end

def _reduce_178(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_179(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_180(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_181(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_182(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_183(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_184(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_185(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_186(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_190(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_193(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_194(val, _values, result)
                      if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@"
                      end
                    
    result
end

def _reduce_195(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      val[0] = value_expr val[0] # TODO: port call_op and clean these
                      val[2] = value_expr val[2]
                      result = s(:not, new_call(val[0], :"==", argl(val[2])))
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_208(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_209(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_210(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~"
                    
    result
end

def _reduce_211(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_214(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_215(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = s(:if, val[0], val[2], val[4])
                    
    result
end

# reduce 217 omitted

def _reduce_218(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 219 omitted

def _reduce_220(val, _values, result)
                      warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_222(val, _values, result)
                      result = arg_concat val[0], val[3]
                    
    result
end

def _reduce_223(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_224(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_225(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_226(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_227(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
                    
    result
end

def _reduce_228(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
                    
    result
end

# reduce 229 omitted

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = arg_concat val[0], val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_234(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = arg_blk_pass result, val[1]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = arg_blk_pass result, val[3]
                    
    result
end

def _reduce_237(val, _values, result)
                      val[0] << s(:hash, *val[2].values)
                      result = arg_concat val[0], val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      args = list_prepend val[0], val[2]
                      result = arg_blk_pass args, val[3]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = arg_blk_pass val[0], val[2]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = arg_concat s(:array, val[0]), val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = arg_blk_pass result, val[1]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = arg_blk_pass result, val[3]
                    
    result
end

def _reduce_247(val, _values, result)
                      arg_value, _, args, _, assocs, opt_block = val
                      result = s(:array, arg_value).add_all(args)
                      result.add(s(:hash, *assocs.sexp_body))
                      result = arg_blk_pass result, opt_block
                    
    result
end

def _reduce_248(val, _values, result)
                      result = arg_concat s(:array, val[0]).add(s(:hash, *val[2].sexp_body)), val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = arg_blk_pass result, val[8]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_253(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_256(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = nil
                    
    result
end

def _reduce_257(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_258(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = arg_concat val[0], val[3]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

def _reduce_275(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_276(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_277(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_278(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_279(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_280(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_282(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_283(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_284(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_287(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_291(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 292 omitted

def _reduce_293(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter

                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_296(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_297(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_298(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_299(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_301(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_302(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_303(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_304(val, _values, result)
                      (_, line), _, _, elsebody, _ = val
                      result = new_case nil, elsebody, line
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_308(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_309(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (in_def || in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_311(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_312(val, _values, result)
                      result = in_def
                      self.in_def = false
                    
    result
end

def _reduce_313(val, _values, result)
                      result = in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_314(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_315(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_316(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        in_def or in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.in_def

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                    
    result
end

def _reduce_319(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_321(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_defs val

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_326(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 339 omitted

def _reduce_340(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

def _reduce_341(val, _values, result)
                      result = s(:array, clean_mlhs(val[0]))
                    
    result
end

def _reduce_342(val, _values, result)
                      result = list_append val[0], clean_mlhs(val[2])
                    
    result
end

def _reduce_343(val, _values, result)
                      result = block_var18 val[0], nil, nil
                    
    result
end

def _reduce_344(val, _values, result)
                      result = block_var18 val[0], nil, nil
                    
    result
end

def _reduce_345(val, _values, result)
                      result = block_var18 val[0], nil, val[3]
                    
    result
end

def _reduce_346(val, _values, result)
                      result = block_var18 val[0], val[3], val[6]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = block_var18 val[0], s(:splat), val[5]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = block_var18 val[0], val[3], nil
                    
    result
end

def _reduce_349(val, _values, result)
                      result = block_var18 val[0], s(:splat), nil
                    
    result
end

def _reduce_350(val, _values, result)
                      result = block_var18 nil, val[1], val[4]
                    
    result
end

def _reduce_351(val, _values, result)
                      result = block_var18 nil, s(:splat), val[3]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = block_var18 nil, val[1], nil
                    
    result
end

def _reduce_353(val, _values, result)
                      result = block_var18 nil, s(:splat), nil
                    
    result
end

def _reduce_354(val, _values, result)
                      result = block_var18 nil, nil, val[1]
                    
    result
end

def _reduce_355(val, _values, result)
 result = 0 
    result
end

def _reduce_356(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_357(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[1]
                      self.lexer.command_start = true
                    
    result
end

def _reduce_359(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_360(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_361(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_362(val, _values, result)
                      block_dup_check val[0], val[1]

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_366(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_367(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_368(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_370(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_371(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_372(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_373(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_374(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_375(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_376(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_377(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_379(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 380 omitted

def _reduce_381(val, _values, result)
                      result = list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

# reduce 383 omitted

# reduce 384 omitted

def _reduce_385(val, _values, result)
                      klasses, var, body, rest = val[1], val[2], val[4], val[5]

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_386(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_387(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 388 omitted

# reduce 389 omitted

def _reduce_390(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 391 omitted

def _reduce_392(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_395(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 398 omitted

def _reduce_399(val, _values, result)
                      result = literal_concat val[0], val[1]
                    
    result
end

def _reduce_400(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_401(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_405(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_406(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[0] << new_word_list_entry(val)
                    
    result
end

# reduce 408 omitted

def _reduce_409(val, _values, result)
                      result = literal_concat val[0], val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_411(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_413(val, _values, result)
                      result = val[0] << new_qword_list_entry(val)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_415(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_416(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_417(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_419(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_420(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_422(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_423(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_424(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_425(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 426 omitted

def _reduce_427(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_428(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 429 omitted

# reduce 430 omitted

# reduce 431 omitted

# reduce 432 omitted

def _reduce_433(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_437(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 438 omitted

# reduce 439 omitted

# reduce 440 omitted

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_444(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_445(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_446(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_447(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_448(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_449(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_450(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_451(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_452(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_453(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_454(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_456(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_460(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_461(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_462(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_463(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_464(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_465(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_466(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_467(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_468(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_469(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_470(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_471(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

def _reduce_472(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = s(:args)
                      result << val[0].to_sym
                    
    result
end

def _reduce_474(val, _values, result)
                      val[0] << val[2].to_sym
                      result = val[0]
                    
    result
end

def _reduce_475(val, _values, result)
                      result = assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = block_append val[0], val[2]
                    
    result
end

# reduce 478 omitted

# reduce 479 omitted

def _reduce_480(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_481(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 482 omitted

# reduce 483 omitted

def _reduce_484(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_486(val, _values, result)
                      result = nil
                    
    result
end

# reduce 487 omitted

def _reduce_488(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_489(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_490(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_491(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_492(val, _values, result)
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
                    
    result
end

# reduce 493 omitted

def _reduce_494(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_495(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

def _reduce_515(val, _values, result)
 yyerrok 
    result
end

# reduce 516 omitted

# reduce 517 omitted

def _reduce_518(val, _values, result)
 yyerrok 
    result
end

def _reduce_519(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby18Parser
