#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby21Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-502,580,580,622,580,580,271,-502,-502,-502,661,580,-502,-502,-502,271',
'-502,242,661,625,218,219,218,219,-502,242,-502,-502,-502,-98,-99,-106',
'748,-101,3,-103,-502,-502,-84,-502,-502,-502,-502,-502,660,700,-105',
'-100,-101,239,-103,-70,660,241,240,237,238,239,-100,-516,221,241,240',
'237,238,-102,621,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502',
'-502,-502,-502,728,624,-502,-502,-502,112,-502,-502,728,728,-502,209',
'270,-502,-502,222,-502,210,-502,271,-502,270,-502,-502,-502,-502,-502',
'-502,-502,222,-502,222,-502,-98,116,116,-102,116,116,115,115,929,115',
'115,116,-502,-502,-502,-502,115,-502,-505,-502,-89,-90,-97,211,747,-505',
'-505,-505,-502,-598,-505,-505,-505,-101,-505,-103,699,-96,-101,-92,-103',
'-94,-505,116,-505,-505,-505,-100,115,-91,218,219,-100,217,-505,-505',
'83,-505,-505,-505,-505,-505,-104,-92,84,-102,261,116,-94,-598,-102,271',
'115,270,318,116,116,-517,216,457,115,115,661,528,782,-505,-505,-505',
'-505,-505,-505,-505,-505,-505,-505,-505,-505,-505,-505,94,95,-505,-505',
'-505,319,-505,-505,661,-93,-505,606,-516,-505,-505,783,-505,660,-505',
'222,-505,-97,-505,-505,-505,-505,-505,-505,-505,-599,-505,-92,-505,-99',
'-106,-106,-94,-416,606,-105,-101,222,660,-595,-596,-505,-505,-505,-505',
'-288,-505,877,-505,816,-89,586,-288,-288,-288,270,-517,-505,-288,-288',
'358,-288,-92,-98,-95,-92,-103,-94,608,607,-94,382,606,264,116,96,97',
'758,-92,115,265,-288,-288,-94,-288,-288,-288,-288,-288,94,95,385,-502',
'-505,215,608,607,604,-90,-502,-505,214,-100,739,-595,-596,-425,740,-502',
'-505,212,-99,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-595,-596,-288,-288,-288,388,644,608,607,606,-288,391',
'606,-288,-502,606,760,407,-288,412,-288,-502,-288,-288,-288,-288,-288',
'-288,-288,-505,-288,456,-288,-425,606,458,-505,459,-602,-602,-425,221',
'96,97,-602,-288,-288,-335,-95,-425,-288,-602,-602,-602,-335,490,540',
'-602,-602,539,-602,-104,561,-335,558,557,556,-425,559,-602,608,607,609',
'608,607,614,608,607,619,540,-602,-602,542,-602,-602,-602,-602,-602,116',
'565,273,-602,-602,115,215,608,607,626,-602,-602,568,454,606,-598,-598',
'611,540,-602,-602,542,455,-602,-602,-602,-602,-602,-602,-602,-602,-602',
'-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,500,645,-512,576,575',
'-602,409,528,-602,-512,841,411,410,-602,503,-602,638,-602,-602,-602',
'-602,-602,-602,-602,565,-602,-602,-602,639,-511,768,-513,505,608,607',
'568,-511,569,-513,-602,-602,-602,-69,-93,222,-602,-602,-602,-602,-96',
'514,-602,-602,-602,515,-602,-102,561,-92,558,557,556,-105,559,-602,-602',
'-602,-602,576,575,-94,-101,-91,522,540,-602,-602,542,-602,-602,-602',
'-602,-602,-103,-514,-100,222,276,-515,999,561,-514,558,557,556,-515',
'559,222,-510,273,-514,525,569,529,-515,-510,-602,-602,-602,-602,-602',
'-602,-602,-602,-602,-602,-602,-602,-602,-602,218,219,-602,-602,-602',
'215,784,-602,714,242,-602,537,521,-602,-602,975,-602,717,-602,543,-602',
'519,-602,-602,-602,-602,-602,-602,-602,544,-602,-602,-602,561,-507,558',
'557,556,565,559,505,-507,218,219,586,-602,-602,-602,-602,568,-602,-288',
'-602,218,219,-508,576,575,-288,-288,-288,-102,-508,-288,-288,-288,-509',
'-288,-280,215,401,563,547,-509,590,-280,531,-288,-288,-288,573,572,576',
'575,-280,455,591,-288,-288,264,-288,-288,-288,-288,-288,561,265,558',
'557,556,613,559,561,617,558,557,556,620,559,561,623,558,557,556,630',
'559,569,-262,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,632,714,-288,-288,-288,215,785,-288,714,222,-288,636',
'589,-288,-288,714,-288,717,-288,637,-288,587,-288,-288,-288,-288,-288',
'-288,-288,273,-288,953,-288,558,557,556,648,559,561,242,558,557,556',
'242,559,-288,-288,-288,-288,242,-288,242,-288,8,72,73,74,12,60,116,116',
'-104,66,67,115,115,222,70,222,68,69,71,33,34,75,76,714,845,816,218,219',
'32,31,30,104,103,105,106,868,869,22,222,870,110,111,649,11,48,10,13',
'108,107,109,98,59,100,99,101,-84,102,110,111,678,94,95,222,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,533,235,236,-289,116,256',
'257,116,43,115,-289,36,115,689,61,62,242,116,63,-289,38,239,115,245',
'47,241,240,237,238,249,247,243,23,244,845,816,694,91,83,85,86,87,89',
'695,222,702,84,92,239,260,705,-239,241,240,65,706,708,81,88,90,710,712',
'96,97,294,72,73,74,12,60,720,721,215,66,67,722,724,586,70,742,68,69',
'71,33,34,75,76,731,744,761,762,763,32,31,30,104,103,105,106,-263,769',
'22,490,490,222,787,633,11,48,261,13,108,107,109,98,59,100,99,101,503',
'102,110,111,505,94,95,689,45,46,44,242,246,251,252,253,248,250,258,259',
'254,255,222,235,236,-289,273,256,257,273,43,689,-289,296,242,816,61',
'62,242,222,63,-289,38,239,839,245,47,241,240,237,238,249,247,243,23',
'244,222,816,849,91,83,85,86,87,89,222,-288,-264,84,92,239,260,876,-288',
'241,240,65,879,-599,81,88,90,-288,705,96,97,294,72,73,74,12,60,882,885',
'215,66,67,887,889,222,70,956,68,69,71,33,34,75,76,891,744,892,689,900',
'32,31,30,104,103,105,106,-262,904,22,906,907,222,705,649,11,48,910,13',
'108,107,109,98,59,100,99,101,912,102,110,111,914,94,95,916,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,-288,235,236,215,916,256',
'257,-288,43,222,956,36,-599,922,61,62,-288,924,63,744,38,239,926,245',
'47,241,240,237,238,249,247,243,23,244,222,936,-514,91,83,85,86,87,89',
'-514,-515,937,84,92,222,260,940,-515,-514,-265,65,950,957,81,88,90,-515',
'958,96,97,294,72,73,74,12,60,960,961,215,66,67,977,979,980,70,1006,68',
'69,71,33,34,75,76,984,1004,705,989,991,32,31,30,104,103,105,106,993',
'953,22,558,557,556,995,559,11,48,995,13,108,107,109,98,59,100,99,101',
'1002,102,110,111,1007,94,95,1008,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,-280,235,236,-289,916,256,257,-280,43,916,-289,36,916',
'1013,61,62,-280,977,63,-289,38,239,-599,245,47,241,240,237,238,249,247',
'243,23,244,-598,694,-288,91,83,85,86,87,89,-288,977,1036,84,92,-599',
'260,1037,1038,-288,1039,65,995,995,81,88,90,995,222,96,97,294,72,73',
'74,12,60,916,977,995,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121,122',
'123,32,31,30,104,103,105,106,,,22,119,120,121,122,123,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252',
'253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,296,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87',
'89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,119,120,121,122,123,32,31,30,104,103',
'105,106,,,22,119,120,121,122,123,11,48,,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259',
'254,255,,235,236,,,256,257,,43,,,296,,,61,62,,,63,,38,239,,245,47,241',
'240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,',
',,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,222,260,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43',
',,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,561,22,558,557,556,,559,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,561,,558,557,556',
',559,561,714,558,557,556,,559,,,,921,,43,,,36,242,,61,62,,,63,,38,,',
',47,,,714,256,257,,,23,,714,,,91,83,85,86,87,89,,239,,84,92,241,240',
'237,238,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,-622,-622,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,246,251,252,253,248,250,258,259,254,255,,-622,-622,,,256,257',
',43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-622,-622,-622,-622,248,250,,,-622,-622,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,',
',,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43',
',,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,,,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,',
'245,47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-622,-622,-622',
'-622,248,250,,,-622,-622,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-622',
'-622,-622,-622,248,250,,,-622,-622,,,,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,-622,-622,-622,-622,248,250,,,-622,-622,,,,,,256,257,,43,,,36,,',
'61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,-622,-622,-622,-622,248,250,,,-622,-622,,,,,,256,257,',
'43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-622,-622,-622,-622,248,250,,,-622,-622,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,,,254,255,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,242,246,251,252,253,248,250,258,,254,255,,,,,,256,257',
',227,,,233,,,61,62,,,63,,,239,,245,47,241,240,237,238,249,247,243,232',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94',
'95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63,,285',
'239,283,245,47,241,240,237,238,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,',
',256,257,,227,,,233,,,61,62,,,63,,285,239,283,245,47,241,240,237,238',
',,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61',
'62,,,63,,300,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,233,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,317,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,',
'84,92,222,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,116,,,,,115,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,315,,,,,,,,,,,,,,,,,,,,352,,,36,,,61,62,,,63,,38,,,,,,,,,',
',,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,',
'47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,401,65,,,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63',
',38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,417,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,417,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,222',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,288',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,',
'13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,',
',,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315,,',
',,,,,,,,,,,,,,,,,305,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,517,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234',
',,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315',
',,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,533,,61,62,,,63,,,,,,47,,,,,,,,232,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,309,,,108,107,109,592,59,100,99,593,,102,110,111,,94',
'95,,,,315,,,,,,,,,,,,,,,,,,,,594,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,309,,,108,107,109,592,59,100,99,593,,102,110,111,,94',
'95,,,,315,,,,,,,,,,,,,,,,,,,,594,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,673,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,401,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,',
'307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,673,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,766,,,,47,,,,,',
',,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'673,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315,,',
',,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315,,',
',,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,417,,,,47,,,,,,,,232,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,315,,,,,,,,,,,,,,,,,,,,894,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,',
'234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,',
'45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,',
',232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,894,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,967,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,673',
',,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',288,81,88,90,-281,,96,97,,,,-281,-281,-281,,,-281,-281,-281,561,-281',
'558,557,556,565,559,,,,,-281,-281,-281,,,568,,,,,-281,-281,,-281,-281',
'-281,-281,-281,,,,,,,,,,563,,,,,,,,,573,572,576,575,,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,,,-281,-281,-281',
',,-281,,,-281,,,-281,-281,,-281,569,-281,,-281,,-281,-281,-281,-281',
'-281,-281,-281,,-281,,-281,,,,,,,,,,,,,-281,-281,-281,-281,-603,-281',
',-281,,,,-603,-603,-603,,,-603,-603,-603,561,-603,558,557,556,565,559',
',,,-603,-603,-603,-603,,,568,,,,,-603,-603,,-603,-603,-603,-603,-603',
',,,,,,,,,563,752,,,,,,,,573,572,576,575,,-603,-603,-603,-603,-603,-603',
'-603,-603,-603,-603,-603,-603,-603,-603,,,-603,-603,-603,,,-603,,,-603',
',,-603,-603,,-603,569,-603,,-603,,-603,-603,-603,-603,-603,-603,-603',
',-603,-603,-603,,,,,,,,,,,,,-603,-603,-603,-603,-604,-603,,-603,,,,-604',
'-604,-604,,,-604,-604,-604,561,-604,558,557,556,565,559,,,,-604,-604',
'-604,-604,,,568,,,,,-604,-604,,-604,-604,-604,-604,-604,,,,,,,,,,563',
',,,,,,,,573,572,576,575,,-604,-604,-604,-604,-604,-604,-604,-604,-604',
'-604,-604,-604,-604,-604,,,-604,-604,-604,,,-604,,222,-604,,,-604,-604',
',-604,569,-604,,-604,,-604,-604,-604,-604,-604,-604,-604,,-604,-604',
'-604,,,,,,,,,,,,,-604,-604,-604,-604,,-604,,-604,176,187,177,200,173',
'193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194',
'186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169',
'170,166,167,168,127,129,126,,128,,,,,,,,,161,162,,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,',
',,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201',
'205,206,185,174,188,192,194,186,179,,,,195,202,197,367,366,368,365,172',
'191,190,,,,,,171,178,169,170,362,363,364,360,129,100,99,361,,102,,,',
',,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,374,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204',
'198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197',
'196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129',
'398,397,128,,399,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193',
'183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186',
'179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170',
'166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177',
'200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188',
'192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171',
'178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158',
'176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190',
',,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,-424,,165,,,,,-424',
'-424,-424,,,-424,-424,-424,561,-424,558,557,556,565,559,158,,,-424,-424',
'-424,,,,568,,,,,-424,-424,,-424,-424,-424,-424,-424,,,,,,,,,,563,,,',
',,,,,573,572,576,575,,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424',
'-424,-424,-424,-424,,,-424,-424,-424,,,-424,,273,-424,,,-424,-424,,-424',
'569,-424,,-424,,-424,-424,-424,-424,-424,-424,-424,,-424,-424,-424,',
',,,,,,,,,,-295,-424,-424,,-424,,-424,-295,-295,-295,,,-295,-295,-295',
'561,-295,558,557,556,565,559,,,,,-295,-295,,,,568,,,,,-295,-295,,-295',
'-295,-295,-295,-295,,,,,,,,,,563,,,,,,,,,573,572,576,575,,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,,,-295,-295',
'-295,,,-295,,276,-295,,,-295,-295,,-295,569,-295,,-295,,-295,-295,-295',
'-295,-295,-295,-295,,-295,,-295,,,,,,,,,,,,-621,-295,-295,,-295,,-295',
'-621,-621,-621,,,-621,-621,-621,561,-621,558,557,556,565,559,,,,-621',
'-621,-621,,,,568,,,,,-621,-621,,-621,-621,-621,-621,-621,,,,,,,,,,563',
',,,,,,,,,,576,575,,-621,-621,-621,-621,-621,-621,-621,-621,-621,-621',
'-621,-621,-621,-621,,,-621,-621,-621,,,-621,,273,-621,,,-621,-621,,-621',
'569,-621,,-621,,-621,-621,-621,-621,-621,-621,-621,,-621,-621,-621,',
',,,,,,,,,,-621,-621,-621,,-621,,-621,-621,-621,-621,,,-621,-621,-621',
'561,-621,558,557,556,565,559,,,,-621,-621,,,,,568,,,,,-621,-621,,-621',
'-621,-621,-621,-621,,,,,,,,,,563,,561,,558,557,556,565,559,573,572,576',
'575,,,,,,568,,,,,,,-621,,,,,,,-621,,,,,273,-621,,563,,,,,569,,,,427',
'431,576,575,428,,,,,,-621,-621,,161,162,,157,139,140,141,148,145,147',
',-621,142,143,,,-621,163,164,149,150,,,569,,,273,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,434,438,,,433,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,488,431,,,489,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,651,431,,,652,,,,,,,,,161',
'162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,',
',,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,,,,,653,438,,,654,,,,,,,,,161,162,158,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,682,431,,,683,,,,,,,,,161,162',
'158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,685,438,,,686,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,651,431,,,652,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'653,438,,,654,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,734,431,,,735,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'736,438,,,737,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,853,438,,,854,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'488,431,,,489,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,561,165,558,557,556,565,559,561,,558,557,556',
'565,559,,,568,,,,,158,,568,561,,558,557,556,565,559,,,,,,,,563,,568',
',,,,563,,573,572,576,575,,,,573,572,576,575,,,,561,563,558,557,556,565',
'559,,,,573,572,576,575,,561,568,558,557,556,565,559,569,,,,,,,569,,568',
',,,,,,563,561,,558,557,556,565,559,569,,,576,575,,,563,561,568,558,557',
'556,565,559,,,,576,575,,,,,568,,,,,,,563,,,,,,569,,,,,576,575,,,563',
'752,,1001,438,,569,1000,,573,572,576,575,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,569,,,163,164,149,150,,,,,,273,,,569,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,561,165,558,557,556,565',
'559,561,,558,557,556,565,559,,,568,,,,,158,,568,561,,558,557,556,565',
'559,,,,,,,,563,,568,,,,,563,,573,572,576,575,,,,,,576,575,,,,561,563',
'558,557,556,565,559,,,,,,576,575,,,568,,,,,,569,,,,,,,569,,,,,,,,,563',
'1029,431,,,1030,,,569,,,576,575,,161,162,,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,273,,,,,569,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,1031,438,,,1032,,,,,,,,,161',
'162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,',
',,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,561',
'165,558,557,556,565,559,561,,558,557,556,565,559,,,568,,,,,158,,568',
',,,,,,,,,,,,,,563,,,,,,,563,,,,576,575,,,,,,576,575,,,,,,,,,,,,,,,,',
',,,,,,,,,569,,,,,,,569' ]
        racc_action_table = arr = ::Array.new(26260, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'98,342,343,389,903,850,64,98,98,98,486,925,98,98,98,310,98,481,494,392',
'451,451,692,692,98,482,98,98,98,349,350,353,598,1029,1,1030,98,98,677',
'98,98,98,98,98,486,546,590,1044,734,481,735,677,494,481,481,481,481',
'482,851,225,22,482,482,482,482,1031,389,98,98,98,98,98,98,98,98,98,98',
'98,98,98,98,582,392,98,98,98,3,98,98,583,852,98,13,64,98,98,22,98,15',
'98,664,98,310,98,98,98,98,98,98,98,451,98,692,98,225,342,343,736,903',
'850,342,343,850,903,850,925,98,98,98,98,925,98,101,98,349,350,353,16',
'598,101,101,101,98,1031,101,101,101,1029,101,1030,546,590,1029,734,1030',
'735,101,598,101,101,101,1044,598,851,755,755,1044,19,101,101,80,101',
'101,101,101,101,737,682,80,1031,25,582,683,736,1031,29,582,664,40,583',
'852,226,18,228,583,852,495,456,651,101,101,101,101,101,101,101,101,101',
'101,101,101,101,101,44,44,101,101,101,43,101,101,665,736,101,615,41',
'101,101,652,101,495,101,48,101,18,101,101,101,101,101,101,101,737,101',
'682,101,226,18,228,683,29,376,456,651,755,665,592,593,101,101,101,101',
'433,101,786,101,982,41,982,433,433,433,29,42,101,433,433,72,433,682',
'41,737,682,652,683,615,615,683,87,618,27,5,44,44,615,682,5,27,433,433',
'683,433,433,433,433,433,315,315,88,592,593,17,376,376,376,42,592,593',
'17,786,594,592,593,811,594,592,593,17,42,433,433,433,433,433,433,433',
'433,433,433,433,433,433,433,592,593,433,433,433,89,433,618,618,378,433',
'90,383,433,360,386,618,124,433,207,433,360,433,433,433,433,433,433,433',
'361,433,227,433,811,394,229,361,230,685,853,811,234,315,315,434,433',
'433,49,433,811,433,434,434,434,49,266,331,434,434,331,434,433,717,49',
'717,717,717,811,717,434,378,378,378,383,383,383,386,386,386,332,434',
'434,332,434,434,434,434,434,291,702,269,685,853,291,224,394,394,394',
'685,853,702,224,380,685,853,380,336,685,853,336,224,434,434,434,434',
'434,434,434,434,434,434,434,434,434,434,685,853,434,434,434,280,434',
'362,702,702,434,126,319,434,362,717,126,126,434,281,434,427,434,434',
'434,434,434,434,434,879,434,434,434,428,363,634,364,284,380,380,879',
'363,702,364,653,434,434,295,434,297,434,653,653,653,319,298,653,653',
'653,299,653,434,921,427,921,921,921,319,921,653,653,653,653,879,879',
'428,427,634,305,697,653,653,697,653,653,653,653,653,428,302,634,951',
'308,303,951,563,302,563,563,563,303,563,309,365,314,302,316,879,320',
'303,365,653,653,653,653,653,653,653,653,653,653,653,653,653,653,20,20',
'653,653,653,304,653,653,563,323,653,329,304,653,653,921,653,563,653',
'333,653,304,653,653,653,653,653,653,653,334,653,653,653,340,366,340',
'340,340,340,340,337,366,327,327,347,653,653,653,653,340,653,654,653',
'341,341,367,705,705,654,654,654,653,367,654,654,654,368,654,306,321',
'348,340,340,368,352,306,321,654,654,654,340,340,340,340,306,321,354',
'654,654,370,654,654,654,654,654,841,370,841,841,841,382,841,714,385',
'714,714,714,388,714,922,391,922,922,922,413,922,340,416,654,654,654',
'654,654,654,654,654,654,654,654,654,654,654,418,841,654,654,654,351',
'654,654,714,422,654,425,351,654,654,922,654,714,654,426,654,351,654',
'654,654,654,654,654,654,435,654,891,654,891,891,891,443,891,975,464',
'975,975,975,465,975,654,654,654,654,466,654,467,654,2,2,2,2,2,2,346',
'748,654,2,2,346,748,496,2,497,2,2,2,2,2,2,2,975,723,723,749,749,2,2',
'2,2,2,2,2,756,756,2,512,756,756,756,446,2,2,2,2,2,2,2,2,2,2,2,2,513',
'2,2,2,516,2,2,518,2,2,2,446,446,446,446,446,446,446,446,446,446,446',
'523,446,446,522,753,446,446,860,2,753,522,2,860,526,2,2,462,934,2,522',
'2,446,934,446,2,446,446,446,446,446,446,446,2,446,1015,1015,534,2,2',
'2,2,2,2,535,536,549,2,2,462,446,550,446,462,462,2,552,553,2,2,2,554',
'562,2,2,36,36,36,36,36,36,570,574,596,36,36,577,579,584,36,596,36,36',
'36,36,36,36,36,585,596,622,625,627,36,36,36,36,36,36,36,631,635,36,640',
'646,655,657,421,36,36,663,36,36,36,36,36,36,36,36,36,670,36,36,36,672',
'36,36,679,36,36,36,421,421,421,421,421,421,421,421,421,421,421,681,421',
'421,740,684,421,421,687,36,688,740,36,691,693,36,36,463,701,36,740,36',
'421,716,421,36,421,421,421,421,421,421,421,36,421,718,725,730,36,36',
'36,36,36,36,733,686,765,36,36,463,421,770,686,463,463,36,788,686,36',
'36,36,686,789,36,36,209,209,209,209,209,209,791,792,893,209,209,793',
'795,796,209,893,209,209,209,209,209,209,209,797,893,798,810,814,209',
'209,209,209,209,209,209,817,818,209,822,823,824,825,656,209,209,829',
'209,209,209,209,209,209,209,209,209,830,209,209,209,832,209,209,833',
'209,209,209,656,656,656,656,656,656,656,656,656,656,656,854,656,656',
'955,835,656,656,854,209,838,955,209,854,840,209,209,854,843,209,955',
'209,656,846,656,209,656,656,656,656,656,656,656,209,656,856,861,964',
'209,209,209,209,209,209,964,965,862,209,209,863,656,872,965,964,873',
'209,890,894,209,209,209,965,895,209,209,233,233,233,233,233,233,897',
'898,966,233,233,923,927,928,233,966,233,233,233,233,233,233,233,933',
'966,941,944,945,233,233,233,233,233,233,233,946,999,233,999,999,999',
'947,999,233,233,949,233,233,233,233,233,233,233,233,233,959,233,233',
'233,967,233,233,970,233,233,233,24,24,24,24,24,24,24,24,24,24,24,968',
'24,24,1007,971,24,24,968,233,972,1007,233,973,974,233,233,968,976,233',
'1007,233,24,1000,24,233,24,24,24,24,24,24,24,233,24,1001,1003,1032,233',
'233,233,233,233,233,1032,1014,1019,233,233,1032,24,1020,1021,1032,1022',
'233,1023,1024,233,233,233,1025,1028,233,233,296,296,296,296,296,296',
'1033,1034,1046,296,296,,,,296,,296,296,296,296,296,296,296,9,9,9,9,9',
'296,296,296,296,296,296,296,,,296,293,293,293,293,293,296,296,,296,296',
'296,296,296,296,296,296,296,,296,296,296,,296,296,,296,296,296,278,278',
'278,278,278,278,278,278,278,278,278,,278,278,,,278,278,,296,,,296,,',
'296,296,,,296,,296,278,,278,296,278,278,278,278,278,278,278,296,278',
',,,296,296,296,296,296,296,,,,296,296,,278,,,,,296,,,296,296,296,,,296',
'296,301,301,301,301,301,301,,,,301,301,,,,301,,301,301,301,301,301,301',
'301,511,511,511,511,511,301,301,301,301,301,301,301,,,301,676,676,676',
'676,676,301,301,,301,301,301,301,301,301,301,301,301,,301,301,301,,301',
'301,,301,301,301,441,441,441,441,441,441,441,441,441,441,441,,441,441',
',,441,441,,301,,,301,,,301,301,,,301,,301,441,,441,301,441,441,441,441',
'441,441,441,301,441,,,,301,301,301,301,301,301,,,,301,301,,441,,,,,301',
',,301,301,301,,,301,301,326,326,326,326,326,326,,,,326,326,,,,326,,326',
'326,326,326,326,326,326,,,,,,326,326,326,326,326,326,326,,,326,,,,,',
'326,326,,326,326,326,326,326,326,326,326,326,,326,326,326,,326,326,',
'326,326,326,485,485,485,485,485,485,485,485,485,485,485,,485,485,,,485',
'485,,326,,,326,,,326,326,,,326,,326,485,,485,326,485,485,485,485,485',
'485,485,326,485,,,,326,326,326,326,326,326,,,,326,326,485,485,,,,,326',
',,326,326,326,,,326,326,407,407,407,407,407,407,,,,407,407,,,,407,,407',
'407,407,407,407,407,407,,,,,,407,407,407,407,407,407,407,,,407,,,,,',
'407,407,407,407,407,407,407,407,407,407,407,407,,407,407,407,,407,407',
',407,407,407,532,532,532,532,532,532,532,532,532,532,532,,532,532,,',
'532,532,,407,,,407,,,407,407,,,407,,407,532,,532,407,532,532,532,532',
'532,532,532,407,532,,,,407,407,407,407,407,407,,,,407,407,,532,,,,,407',
',,407,407,407,,,407,407,578,578,578,578,578,578,,,,578,578,,,,578,,578',
'578,578,578,578,578,578,,,,,,578,578,578,578,578,578,578,,,578,,,,,',
'578,578,,578,578,578,578,578,578,578,578,578,,578,578,578,,578,578,',
'578,578,578,690,690,690,690,690,690,690,690,690,690,690,,690,690,,,690',
'690,,578,,,578,,,578,578,,,578,,578,690,,690,578,690,690,690,690,690',
'690,690,578,690,,,,578,578,578,578,578,578,,,,578,578,,690,,,,,578,',
',578,578,578,,,578,578,581,581,581,581,581,581,,,,581,581,,,,581,,581',
'581,581,581,581,581,581,,,,,,581,581,581,581,581,581,581,,,581,,,,,',
'581,581,,581,581,581,581,581,581,581,581,581,,581,581,581,,581,581,',
'581,581,581,767,767,767,767,767,767,767,767,767,767,767,,767,767,,,767',
'767,,581,,,581,,,581,581,,,581,,581,767,,767,581,767,767,767,767,767',
'767,767,581,767,,,,581,581,581,581,581,581,,,,581,581,,767,,,,,581,',
',581,581,581,,,581,581,699,699,699,699,699,699,,,,699,699,,,,699,,699',
'699,699,699,699,699,699,,,,,,699,699,699,699,699,699,699,,,699,,,,,',
'699,699,,699,699,699,699,699,699,699,699,699,,699,699,699,,699,699,',
'699,699,699,772,772,772,772,772,772,772,772,772,772,772,,772,772,,,772',
'772,,699,,,699,,,699,699,,,699,,699,772,,772,699,772,772,772,772,772',
'772,772,699,772,,,,699,699,699,699,699,699,,,,699,699,,772,,,,,699,',
',699,699,699,,,699,699,700,700,700,700,700,700,,,,700,700,,,,700,,700',
'700,700,700,700,700,700,,,,,,700,700,700,700,700,700,700,,,700,,,,,',
'700,700,,700,700,700,700,700,700,700,700,700,,700,700,700,,700,700,',
'700,700,700,774,774,774,774,774,774,774,774,774,774,774,,774,774,,,774',
'774,,700,,,700,,,700,700,,,700,,700,774,,774,700,774,774,774,774,774',
'774,774,700,774,,,,700,700,700,700,700,700,,,,700,700,,774,,,,,700,',
',700,700,700,,,700,700,750,750,750,750,750,750,,,,750,750,,,,750,,750',
'750,750,750,750,750,750,,,,,,750,750,750,750,750,750,750,,,750,,,,,',
'750,750,,750,750,750,750,750,750,750,750,750,,750,750,750,,750,750,',
'750,750,750,777,777,777,777,777,777,777,777,777,777,777,,777,777,,,777',
'777,,750,,,750,,,750,750,,,750,,750,777,,777,750,777,777,777,777,777',
'777,777,750,777,,,,750,750,750,750,750,750,,,,750,750,,777,,,,,750,',
',750,750,750,,,750,750,751,751,751,751,751,751,,,,751,751,,,,751,,751',
'751,751,751,751,751,751,,,,,,751,751,751,751,751,751,751,,,751,,,,,',
'751,751,,751,751,751,751,751,751,751,751,751,,751,751,751,,751,751,',
'751,751,751,779,779,779,779,779,779,779,779,779,779,779,,779,779,,,779',
'779,,751,,,751,,,751,751,,,751,,751,779,,779,751,779,779,779,779,779',
'779,779,751,779,,,,751,751,751,751,751,751,,,,751,751,,779,,,,,751,',
',751,751,751,,,751,751,757,757,757,757,757,757,,,,757,757,,,,757,,757',
'757,757,757,757,757,757,,,,,,757,757,757,757,757,757,757,,,757,,,,,',
'757,757,,757,757,757,757,757,757,757,757,757,,757,757,757,,757,757,',
'757,757,757,781,781,781,781,781,781,781,781,781,781,781,,781,781,,,781',
'781,,757,,,757,,,757,757,,,757,,757,781,,781,757,781,781,781,781,781',
'781,781,757,781,,,,757,757,757,757,757,757,,,,757,757,,781,,,,,757,',
',757,757,757,,,757,757,802,802,802,802,802,802,,,,802,802,,,,802,,802',
'802,802,802,802,802,802,,,,,,802,802,802,802,802,802,802,,,802,,,,,',
'802,802,,802,802,802,802,802,802,802,802,802,,802,802,802,,802,802,',
'802,802,802,875,875,875,875,875,875,875,875,875,875,875,,875,875,,,875',
'875,,802,,,802,,,802,802,,,802,,802,875,,875,802,875,875,875,875,875',
'875,875,802,875,,,,802,802,802,802,802,802,,,,802,802,,875,,,,,802,',
',802,802,802,,,802,802,806,806,806,806,806,806,,,,806,806,,,,806,,806',
'806,806,806,806,806,806,,,,,,806,806,806,806,806,806,806,,,806,,,,,',
'806,806,,806,806,806,806,806,806,806,806,806,,806,806,806,,806,806,',
'806,806,806,878,878,878,878,878,878,878,878,878,878,878,,878,878,,,878',
'878,,806,,,806,,,806,806,,,806,,806,878,,878,806,878,878,878,878,878',
'878,878,806,878,,,,806,806,806,806,806,806,,,,806,806,,878,,,,,806,',
',806,806,806,,,806,806,807,807,807,807,807,807,,,,807,807,,,,807,,807',
'807,807,807,807,807,807,,,,,,807,807,807,807,807,807,807,,839,807,839',
'839,839,,839,807,807,,807,807,807,807,807,807,807,807,807,,807,807,807',
',807,807,,807,807,807,977,,977,977,977,,977,1013,839,1013,1013,1013',
',1013,,,,839,,807,,,807,470,,807,807,,,807,,807,,,,807,,,977,470,470',
',,807,,1013,,,807,807,807,807,807,807,,470,,807,807,470,470,470,470',
',,807,,,807,807,807,,,807,807,816,816,816,816,816,816,,,,816,816,,,',
'816,,816,816,816,816,816,816,816,,,,,,816,816,816,816,816,816,816,,',
'816,,,,,,816,816,,816,816,816,816,816,816,816,816,816,,816,816,816,',
'816,816,,816,816,816,460,460,460,460,460,460,460,460,460,460,460,,460',
'460,,,460,460,,816,,,816,,,816,816,,,816,,816,460,,460,816,460,460,460',
'460,460,460,460,816,460,,,,816,816,816,816,816,816,,,,816,816,,,,,,',
'816,,,816,816,816,,,816,816,847,847,847,847,847,847,,,,847,847,,,,847',
',847,847,847,847,847,847,847,,,,,,847,847,847,847,847,847,847,,,847',
',,,,,847,847,,847,847,847,847,847,847,847,847,847,,847,847,847,,847',
'847,,847,847,847,461,461,461,461,461,461,461,461,461,461,461,,461,461',
',,461,461,,847,,,847,,,847,847,,,847,,847,461,,461,847,461,461,461,461',
'461,461,461,847,461,,,,847,847,847,847,847,847,,,,847,847,,,,,,,847',
',,847,847,847,,,847,847,848,848,848,848,848,848,,,,848,848,,,,848,,848',
'848,848,848,848,848,848,,,,,,848,848,848,848,848,848,848,,,848,,,,,',
'848,848,,848,848,848,848,848,848,848,848,848,,848,848,848,,848,848,',
'848,848,848,471,471,471,471,471,471,471,,,471,471,,,,,,471,471,,848',
',,848,,,848,848,,,848,,848,471,,471,848,471,471,471,471,471,471,471',
'848,471,,,,848,848,848,848,848,848,,,,848,848,,,,,,,848,,,848,848,848',
',,848,848,857,857,857,857,857,857,,,,857,857,,,,857,,857,857,857,857',
'857,857,857,,,,,,857,857,857,857,857,857,857,,,857,,,,,,857,857,,857',
'857,857,857,857,857,857,857,857,,857,857,857,,857,857,,857,857,857,472',
',,,,,,,,,,,,,,,472,472,,857,,,857,,,857,857,,,857,,857,472,,472,857',
'472,472,472,472,,,472,857,472,,,,857,857,857,857,857,857,,,,857,857',
',,,,,,857,,,857,857,857,,,857,857,896,896,896,896,896,896,,,,896,896',
',,,896,,896,896,896,896,896,896,896,,,,,,896,896,896,896,896,896,896',
',,896,,,,,,896,896,,896,896,896,896,896,896,896,896,896,,896,896,896',
',896,896,,896,896,896,473,,,,,,,,,,,,,,,,473,473,,896,,,896,,,896,896',
',,896,,896,473,,473,896,473,473,473,473,,,473,896,473,,,,896,896,896',
'896,896,896,,,,896,896,,,,,,,896,,,896,896,896,,,896,896,900,900,900',
'900,900,900,,,,900,900,,,,900,,900,900,900,900,900,900,900,,,,,,900',
'900,900,900,900,900,900,,,900,,,,,,900,900,,900,900,900,900,900,900',
'900,900,900,,900,900,900,,900,900,,900,900,900,474,,,,,,,,,,,,,,,,474',
'474,,900,,,900,,,900,900,,,900,,900,474,,474,900,474,474,474,474,,,474',
'900,474,,,,900,900,900,900,900,900,,,,900,900,,,,,,,900,,,900,900,900',
',,900,900,930,930,930,930,930,930,,,,930,930,,,,930,,930,930,930,930',
'930,930,930,,,,,,930,930,930,930,930,930,930,,,930,,,,,,930,930,,930',
'930,930,930,930,930,930,930,930,,930,930,930,,930,930,,930,930,930,475',
',,,,,,,,,,,,,,,475,475,,930,,,930,,,930,930,,,930,,930,475,,475,930',
'475,475,475,475,,,475,930,475,,,,930,930,930,930,930,930,,,,930,930',
',,,,,,930,,,930,930,930,,,930,930,963,963,963,963,963,963,,,,963,963',
',,,963,,963,963,963,963,963,963,963,,,,,,963,963,963,963,963,963,963',
',,963,,,,,,963,963,,963,963,963,963,963,963,963,963,963,,963,963,963',
',963,963,,963,963,963,476,476,476,476,476,476,476,,,476,476,,,,,,476',
'476,,963,,,963,,,963,963,,,963,,963,476,,476,963,476,476,476,476,476',
'476,476,963,476,,,,963,963,963,963,963,963,,,,963,963,,,,,,,963,,,963',
'963,963,,,963,963,978,978,978,978,978,978,,,,978,978,,,,978,,978,978',
'978,978,978,978,978,,,,,,978,978,978,978,978,978,978,,,978,,,,,,978',
'978,,978,978,978,978,978,978,978,978,978,,978,978,978,,978,978,,978',
'978,978,477,477,477,477,477,477,477,,,477,477,,,,,,477,477,,978,,,978',
',,978,978,,,978,,978,477,,477,978,477,477,477,477,477,477,477,978,477',
',,,978,978,978,978,978,978,,,,978,978,,,,,,,978,,,978,978,978,,,978',
'978,983,983,983,983,983,983,,,,983,983,,,,983,,983,983,983,983,983,983',
'983,,,,,,983,983,983,983,983,983,983,,,983,,,,,,983,983,,983,983,983',
'983,983,983,983,983,983,,983,983,983,,983,983,,983,983,983,478,478,478',
'478,478,478,478,,,478,478,,,,,,478,478,,983,,,983,,,983,983,,,983,,983',
'478,,478,983,478,478,478,478,478,478,478,983,478,,,,983,983,983,983',
'983,983,,,,983,983,,,,,,,983,,,983,983,983,,,983,983,986,986,986,986',
'986,986,,,,986,986,,,,986,,986,986,986,986,986,986,986,,,,,,986,986',
'986,986,986,986,986,,,986,,,,,,986,986,,986,986,986,986,986,986,986',
'986,986,,986,986,986,,986,986,,986,986,986,479,479,479,479,479,479,479',
',,479,479,,,,,,479,479,,986,,,986,,,986,986,,,986,,986,479,,479,986',
'479,479,479,479,479,479,479,986,479,,,,986,986,986,986,986,986,,,,986',
'986,,,,,,,986,,,986,986,986,,,986,986,987,987,987,987,987,987,,,,987',
'987,,,,987,,987,987,987,987,987,987,987,,,,,,987,987,987,987,987,987',
'987,,,987,,,,,,987,987,,987,987,987,987,987,987,987,987,987,,987,987',
'987,,987,987,,987,987,987,480,480,480,480,480,480,480,,,480,480,,,,',
',480,480,,987,,,987,,,987,987,,,987,,987,480,,480,987,480,480,480,480',
'480,480,480,987,480,,,,987,987,987,987,987,987,,,,987,987,,,,,,,987',
',,987,987,987,,,987,987,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8',
'8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,483',
'483,483,483,483,483,483,,,483,483,,,,,,483,483,,8,,,8,,,8,8,,,8,,8,483',
',483,8,483,483,483,483,483,483,483,8,483,,,,8,8,8,8,8,8,,,,8,8,,,,,',
',8,,,8,8,8,,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,',
',,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23',
'23,23,,23,23,,23,23,23,484,484,484,484,484,484,484,484,,484,484,,,,',
',484,484,,23,,,23,,,23,23,,,23,,,484,,484,23,484,484,484,484,484,484',
'484,23,484,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23',
'32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32',
'32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32',
'32,32,468,,,,,,,,,,,,,,,,468,468,,32,,,32,,,32,32,,,32,,32,468,32,468',
'32,468,468,468,468,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32',
'32,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,',
',,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33',
'33,33,33,,33,33,,33,33,33,469,,,,,,,,,,,,,,,,469,469,,33,,,33,,,33,33',
',,33,,33,469,33,469,33,469,469,469,469,,,,33,,,,,33,33,33,33,33,33,',
',,33,33,,,,,,,33,,33,33,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34,,34',
'34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34',
'34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,',
'34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34',
',,,,,,34,,34,34,34,34,,,34,34,37,37,37,,37,,,,37,37,,,,37,,37,37,37',
'37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37',
'37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,',
',37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37',
'37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38',
'38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38',
',38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,',
',,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,45,45,45',
',45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,',
',45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,',
',,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45',
'45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46,46,,46,,,,46,46',
',,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46',
',,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,',
',,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,',
'46,46,,,,,,,46,,,46,46,46,,,46,46,47,47,47,,47,,,,47,47,,,,47,,47,47',
'47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47',
'47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,',
'47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,,47',
',,47,47,47,,,47,47,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61',
',,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,,61',
'61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,',
'61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,61,,,,,,61,,,61,61,61,,',
'61,61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62',
'62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62',
'62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,',
',,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62,63',
'63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63',
'63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63',
'63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,63,,,,,63',
'63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,,,63,63,66,66,66,,66,',
',,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,',
',,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,',
',,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66',
'66,,,,66,66,,,,,,,66,,,66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,,67',
',67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67',
'67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,',
',67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,',
',,,,67,,,67,67,67,,,67,67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70',
'70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70',
'70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70',
',,,,,70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70',
'70,,,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71',
'71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71',
',71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,',
',,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,114,114',
'114,114,114,,,,114,114,,,,114,,114,114,114,114,114,114,114,,,,,,114',
'114,114,114,114,114,114,,,114,,,,,,114,114,114,114,114,114,114,114,114',
'114,114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114',
',,114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114,114,114',
'114,,,,114,114,,,,,,114,114,,,114,114,114,,,114,114,119,119,119,,119',
',,,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119,119',
'119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119,119',
'119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119',
',,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119,,,,,,,119',
',,119,119,119,,,119,119,120,120,120,,120,,,,120,120,,,,120,,120,120',
'120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,,120',
',,120,120,120,120,120,120,120,120,,120,120,120,,120,120,,120,120,120',
',,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,120,,,',
',120,120,120,120,120,120,,,,120,120,,,,,,,120,,,120,120,120,,,120,120',
'121,121,121,,121,,,,121,121,,,,121,,121,121,121,121,121,121,121,,,,',
',121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121,121,121',
'121,121,,121,121,121,,121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121,,',
'121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,,,121,121,121,121,121,121',
',,,121,121,,,,,,,121,,,121,121,121,,,121,121,122,122,122,,122,,,,122',
'122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122,122,122',
'122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122,122,122,',
'122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,',
',,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,,,,,,,122,',
',122,122,122,,,122,122,123,123,123,123,123,,,,123,123,,,,123,,123,123',
'123,123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,123',
'123,,123,123,123,123,123,123,123,123,123,,123,123,123,,123,123,,123',
'123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,,,,123,,,',
',,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123,,,123,123,123',
',,123,123,210,210,210,,210,,,,210,210,,,,210,,210,210,210,210,210,210',
'210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210',
'210,210,210,210,,210,210,210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,',
',,210,,,210,,,210,210,,,210,,210,,,,210,,,,,,,,210,,,,,210,210,210,210',
'210,210,,,,210,210,,,,,,,210,,,210,210,210,,,210,210,211,211,211,,211',
',,,211,211,,,,211,,211,211,211,211,211,211,211,,,,,,211,211,211,211',
'211,211,211,,,211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211',
'211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211',
',,,,,211,,,,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,,,,,,,211',
',,211,211,211,,,211,211,212,212,212,,212,,,,212,212,,,,212,,212,212',
'212,212,212,212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,,,212',
',,212,212,212,212,212,212,212,212,212,212,212,212,,212,212,,212,212',
'212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,212,,212,,212,,,,',
',,,212,,,,,212,212,212,212,212,212,,,,212,212,,,,,,,212,,212,212,212',
'212,,,212,212,216,216,216,,216,,,,216,216,,,,216,,216,216,216,216,216',
'216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216',
'216,216,216,216,216,,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,',
',,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216',
'216,216,216,,,,216,216,,,,,,,216,,,216,216,216,,,216,216,217,217,217',
',217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217,217',
'217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217',
'217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217',
',,217,,217,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217',
',,,,,,217,,,217,217,217,,,217,217,218,218,218,,218,,,,218,218,,,,218',
',218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218',
',,,,,,218,,,218,218,218,218,218,218,218,218,,218,218,218,,218,218,,218',
'218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,',
',218,,,,,218,218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218',
',,218,218,219,219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219',
'219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219',
'219,219,219,219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,',
',,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219',
'219,219,,,,219,219,,,,,,,219,,,219,219,219,,,219,219,220,220,220,,220',
',,,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220',
'220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220',
'220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220',
',,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220',
',,220,220,220,,,220,220,221,221,221,,221,,,,221,221,,,,221,,221,221',
'221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221',
',,221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221',
',,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,',
',221,221,221,221,221,221,,,,221,221,221,,,,,,221,,,221,221,221,,,221',
'221,232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232',
',,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232',
'232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232',
',,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232',
',,,232,232,,,,,,,232,,,232,232,232,,,232,232,235,235,235,,235,,,,235',
'235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235',
'235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,',
'235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,',
',,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,,,,,,,235,',
',235,235,235,,,235,235,236,236,236,,236,,,,236,236,,,,236,,236,236,236',
'236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236',
'236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236,,,,,',
',,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236',
'236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236,237',
'237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237',
'237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237',
'237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237',
',,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237',
'237,,,,,,,237,,,237,237,237,,,237,237,238,238,238,,238,,,,238,238,,',
',238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,',
',238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238',
',238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,',
',,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238',
'238,,,238,238,239,239,239,,239,,,,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,',
',,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239',
'239,239,239,,,,239,239,,,,,,,239,,,239,239,239,,,239,239,240,240,240',
',240,,,,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240',
'240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240',
'240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240',
',,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,',
',,,240,,,240,240,240,,,240,240,241,241,241,,241,,,,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241',
',,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241,241,,,241',
'241,242,242,242,,242,,,,242,242,,,,242,,242,242,242,242,242,242,242',
',,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242',
'242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242',
',,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242',
',,,242,242,,,,,,,242,,,242,242,242,,,242,242,243,243,243,,243,,,,243',
'243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243,243',
'243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243,',
'243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,',
',,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,',
',243,243,243,,,243,243,244,244,244,,244,,,,244,244,,,,244,,244,244,244',
'244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244',
'244,244,244,244,244,244,244,,244,244,244,,244,244,,244,244,244,,,,,',
',,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244',
'244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244,244,,,244,244,245',
'245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245',
'245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245',
'245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245',
',,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245',
'245,,,,,,,245,,,245,245,245,,,245,245,246,246,246,,246,,,,246,246,,',
',246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,',
',246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246',
',246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,',
',,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246',
'246,,,246,246,247,247,247,,247,,,,247,247,,,,247,,247,247,247,247,247',
'247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247',
'247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,',
',,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247',
'247,247,247,,,,247,247,,,,,,,247,,,247,247,247,,,247,247,248,248,248',
',248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248',
'248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248',
'248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248',
',,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,',
',,,248,,,248,248,248,,,248,248,249,249,249,,249,,,,249,249,,,,249,,249',
'249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,',
',249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249',
'249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249',
',,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249',
'249,250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250',
',,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250',
'250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250',
',,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250',
',,,250,250,,,,,,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251',
'251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251',
'251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,',
'251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,',
',251,251,251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252',
'252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252',
'252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,',
',,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252',
'252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252,252,253',
'253,253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253',
'253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253',
'253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253',
',,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253',
'253,,,,,,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254,254,,',
',254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,',
',254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254',
',254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,',
',,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254',
'254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255',
'255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255',
'255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,',
',,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255',
'255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,256,256,256',
',256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256',
'256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256',
'256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256',
',,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,',
',,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257',
'257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,',
',257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257',
'257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257',
',,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257',
'257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258',
',,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258',
'258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258',
',,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258',
',,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259',
'259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259',
'259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,',
'259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,',
',,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,',
',259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260',
'260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260',
'260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,',
',,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260',
'260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260,260,267',
'267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267,267,,,,,,267',
'267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267,267,267',
'267,267,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267',
',,267,267,,,267,,267,,267,,267,,,,,,,,267,,,,,267,267,267,267,267,267',
',,,267,267,,,,,,,267,,267,267,267,267,,,267,267,273,273,273,,273,,,',
'273,273,,,,273,,273,273,273,273,273,273,273,,,,,,273,273,273,273,273',
'273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273,273,273,273',
'273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273',
',273,,273,,273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,,,',
',,,273,,273,273,273,273,,,273,273,276,276,276,,276,,,,276,276,,,,276',
',276,276,276,276,276,276,276,,,,,,276,276,276,276,276,276,276,,,276',
',,,,,,276,,,276,276,276,276,276,276,276,276,276,276,276,276,,276,276',
',276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276',
',276,,,,,,,,276,,,,,276,276,276,276,276,276,,,,276,276,276,,,,,,276',
',276,276,276,276,,,276,276,283,283,283,,283,,,,283,283,,,,283,,283,283',
'283,283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283',
',,283,283,283,283,283,283,283,283,,283,283,283,,283,283,,283,283,283',
',,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,283,,,',
',283,283,283,283,283,283,,,,283,283,,,,,,,283,,,283,283,283,,,283,283',
'285,285,285,,285,,,,285,285,,,,285,,285,285,285,285,285,285,285,,,,',
',285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285,285,285,285',
'285,285,,285,285,285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,',
'285,,,285,285,,,285,,,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285',
',,,285,285,,,,,,,285,,,285,285,285,,,285,285,287,287,287,,287,,,,287',
'287,,,,287,,287,287,287,287,287,287,287,,,,,,287,287,287,287,287,287',
'287,,,287,,,,,,,287,,,287,287,287,287,287,287,287,287,,287,287,287,',
'287,287,,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,',
',,,287,,,,,,,,287,,,,,287,287,287,287,287,287,,,,287,287,,,,,,,287,',
',287,287,287,,,287,287,288,288,288,,288,,,,288,288,,,,288,,288,288,288',
'288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288,,,288',
'288,288,288,288,288,288,288,,288,288,288,,288,288,,288,288,288,,,,,',
',,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,288,,,,,288',
'288,288,288,288,288,,,,288,288,,,,,,,288,,,288,288,288,,,288,288,294',
'294,294,294,294,,,,294,294,,,,294,,294,294,294,294,294,294,294,,,,,',
'294,294,294,294,294,294,294,,,294,,,,,,294,294,,294,294,294,294,294',
'294,294,294,294,,294,294,294,,294,294,,294,294,294,,,,,,,,,,,,,,,,,',
',,294,,,294,,,294,294,,,294,,294,,,,294,,,,,,,,294,,,,,294,294,294,294',
'294,294,,,,294,294,,,,,,,294,,,294,294,294,,,294,294,300,300,300,,300',
',,,300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300,300',
'300,300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300,300',
'300,,300,300,,,,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,,',
',,,,,,,,,,,,,,,300,300,300,300,300,300,,,,300,300,,,,300,,,300,,,300',
'300,300,,,300,300,317,317,317,,317,,,,317,317,,,,317,,317,317,317,317',
'317,317,317,,,,,,317,317,317,317,317,317,317,,,317,,,,,,,317,,,317,317',
'317,317,317,317,317,317,,317,317,317,,317,317,,,,317,,,,,,,,,,,,,,,',
',,,,317,,,317,,,317,317,,,317,,,,,,,,,,,,,,,,,,,317,317,317,317,317',
'317,,,,317,317,,,,,,,317,,,317,317,317,,,317,317,325,325,325,,325,,',
',325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325,325,325',
'325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325,325,,325,325,325',
',325,325,,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,325,,325,325,,,325',
',,,,,325,,,,,,,,325,,,,,325,325,325,325,325,325,,,,325,325,,,,,,,325',
',,325,325,325,,,325,325,344,344,344,,344,,,,344,344,,,,344,,344,344',
'344,344,344,344,344,,,,,,344,344,344,344,344,344,344,,,344,,,,,,,344',
',,344,344,344,344,344,344,344,344,,344,344,344,,344,344,,344,344,344',
',,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,,,,,344,,,,,,,,344,,,',
',344,344,344,344,344,344,,,,344,344,,,,,,,344,,,344,344,344,,,344,344',
'345,345,345,,345,,,,345,345,,,,345,,345,345,345,345,345,345,345,,,,',
',345,345,345,345,345,345,345,,,345,,,,,,,345,,,345,345,345,345,345,345',
'345,345,,345,345,345,,345,345,,345,345,345,,,,,,,,,,,,,,,,,,,,345,,',
'345,,,345,345,,,345,,,,,,345,,,,,,,,345,,,,,345,345,345,345,345,345',
',,,345,345,,,,,,,345,,,345,345,345,,,345,345,357,357,357,,357,,,,357',
'357,,,,357,,357,357,357,357,357,357,357,,,,,,357,357,357,357,357,357',
'357,,,357,,,,,,,357,,,357,357,357,357,357,357,357,357,,357,357,357,',
'357,357,,,,357,,,,,,,,,,,,,,,,,,,,357,,,357,,,357,357,,,357,,,,,,,,',
',,,,,,,,,,357,357,357,357,357,357,,,,357,357,,,,,,,357,,,357,357,357',
',,357,357,359,359,359,,359,,,,359,359,,,,359,,359,359,359,359,359,359',
'359,,,,,,359,359,359,359,359,359,359,,,359,,,,,,,359,,,359,359,359,359',
'359,359,359,359,,359,359,359,,359,359,,,,359,,,,,,,,,,,,,,,,,,,,359',
',,359,,,359,359,,,359,,,,,,,,,,,,,,,,,,,359,359,359,359,359,359,,,,359',
'359,,,,,,,359,,,359,359,359,,,359,359,417,417,417,,417,,,,417,417,,',
',417,,417,417,417,417,417,417,417,,,,,,417,417,417,417,417,417,417,',
',417,,,,,,,417,,,417,417,417,417,417,417,417,417,,417,417,417,,417,417',
',417,417,417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417,417,,,417,,,,,,417,',
',,,,,,417,,,,,417,417,417,417,417,417,,,,417,417,,,,,,,417,,,417,417',
'417,,,417,417,455,455,455,,455,,,,455,455,,,,455,,455,455,455,455,455',
'455,455,,,,,,455,455,455,455,455,455,455,,,455,,,,,,,455,,,455,455,455',
'455,455,455,455,455,455,455,455,455,,455,455,,455,455,455,,,,,,,,,,',
',,,,,,,,,455,,,455,,,455,455,,,455,,455,,455,,455,,,,,,,,455,,,,,455',
'455,455,455,455,455,,,,455,455,,,,,,,455,,455,455,455,455,,,455,455',
'457,457,457,,457,,,,457,457,,,,457,,457,457,457,457,457,457,457,,,,',
',457,457,457,457,457,457,457,,,457,,,,,,,457,,,457,457,457,457,457,457',
'457,457,,457,457,457,,457,457,,457,457,457,,,,,,,,,,,,,,,,,,,,457,,',
'457,,,457,457,,,457,,,,,,457,,,,,,,,457,,,,,457,457,457,457,457,457',
',,,457,457,,,,,,,457,,,457,457,457,,,457,457,458,458,458,,458,,,,458',
'458,,,,458,,458,458,458,458,458,458,458,,,,,,458,458,458,458,458,458',
'458,,,458,,,,,,,458,,,458,458,458,458,458,458,458,458,,458,458,458,',
'458,458,,458,458,458,,,,,,,,,,,,,,,,,,,,458,,,458,,,458,458,,,458,,',
',,,458,,,,,,,,458,,,,,458,458,458,458,458,458,,,,458,458,,,,,,,458,',
',458,458,458,,,458,458,459,459,459,,459,,,,459,459,,,,459,,459,459,459',
'459,459,459,459,,,,,,459,459,459,459,459,459,459,,,459,,,,,,,459,,,459',
'459,459,459,459,459,459,459,,459,459,459,,459,459,,459,459,459,,,,,',
',,,,,,,,,,,,,,459,,,459,,,459,459,,,459,,,,,,459,,,,,,,,459,,,,,459',
'459,459,459,459,459,,,,459,459,,,,,,,459,,,459,459,459,,,459,459,500',
'500,500,,500,,,,500,500,,,,500,,500,500,500,500,500,500,500,,,,,,500',
'500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500,500,500,500,500',
'500,500,500,500,500,,500,500,,500,500,500,,,,,,,,,,,,,,,,,,,,500,,,500',
',,500,500,,,500,,500,,500,,500,,,,,,,,500,,,,,500,500,500,500,500,500',
',,,500,500,,,,,,,500,,500,500,500,500,,,500,500,503,503,503,,503,,,',
'503,503,,,,503,,503,503,503,503,503,503,503,,,,,,503,503,503,503,503',
'503,503,,,503,,,,,,,503,,,503,503,503,503,503,503,503,503,503,503,503',
'503,,503,503,,503,503,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503,,,503',
',,,503,,503,,,,,,,,503,,,,,503,503,503,503,503,503,,,,503,503,,,,,,',
'503,,503,503,503,503,,,503,503,505,505,505,,505,,,,505,505,,,,505,,505',
'505,505,505,505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,',
',505,,,505,505,505,505,505,505,505,505,,505,505,505,,505,505,,505,505',
'505,,,,,,,,,,,,,,,,,,,,505,,,505,,,505,505,,,505,,,,,,505,,,,,,,,505',
',,,,505,505,505,505,505,505,,,,505,505,,,,,,,505,,,505,505,505,,,505',
'505,510,510,510,510,510,,,,510,510,,,,510,,510,510,510,510,510,510,510',
',,,,,510,510,510,510,510,510,510,,,510,,,,,,510,510,,510,510,510,510',
'510,510,510,510,510,,510,510,510,,510,510,,510,510,510,,,,,,,,,,,,,',
',,,,,,510,,,510,,,510,510,,,510,,510,,,,510,,,,,,,,510,,,,,510,510,510',
'510,510,510,,,,510,510,,,,,,510,510,,,510,510,510,,,510,510,517,517',
'517,,517,,,,517,517,,,,517,,517,517,517,517,517,517,517,,,,,,517,517',
'517,517,517,517,517,,,517,,,,,,,517,,,517,517,517,517,517,517,517,517',
',517,517,517,,517,517,,,,517,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,517',
',,517,,,,,,,,,,,,,,,,,,,517,517,517,517,517,517,,,,517,517,,,,,,,517',
',,517,517,517,,,517,517,519,519,519,,519,,,,519,519,,,,519,,519,519',
'519,519,519,519,519,,,,,,519,519,519,519,519,519,519,,,519,,,,,,,519',
',,519,519,519,519,519,519,519,519,519,519,519,519,,519,519,,519,519',
'519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,519,,519,,519,,,,',
',,,519,,,,,519,519,519,519,519,519,,,,519,519,,,,,,,519,,519,519,519',
'519,,,519,519,525,525,525,,525,,,,525,525,,,,525,,525,525,525,525,525',
'525,525,,,,,,525,525,525,525,525,525,525,,,525,,,,,,,525,,,525,525,525',
'525,525,525,525,525,,525,525,525,,525,525,,,,525,,,,,,,,,,,,,,,,,,,',
'525,,,525,,,525,525,,,525,,,,,,,,,,,,,,,,,,,525,525,525,525,525,525',
',,,525,525,,,,,,,525,,,525,525,525,,,525,525,528,528,528,,528,,,,528',
'528,,,,528,,528,528,528,528,528,528,528,,,,,,528,528,528,528,528,528',
'528,,,528,,,,,,,528,,,528,528,528,528,528,528,528,528,,528,528,528,',
'528,528,,528,528,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,',
',,,528,,,,,,,,528,,,,,528,528,528,528,528,528,,,,528,528,,,,,,,528,',
',528,528,528,,,528,528,529,529,529,,529,,,,529,529,,,,529,,529,529,529',
'529,529,529,529,,,,,,529,529,529,529,529,529,529,,,529,,,,,,,529,,,529',
'529,529,529,529,529,529,529,,529,529,529,,529,529,,529,529,529,,,,,',
',,,,,,,,,,,,,,529,,,529,,,529,529,,,529,,,,,,529,,,,,,,,529,,,,,529',
'529,529,529,529,529,,,,529,529,,,,,,,529,,,529,529,529,,,529,529,533',
'533,533,,533,,,,533,533,,,,533,,533,533,533,533,533,533,533,,,,,,533',
'533,533,533,533,533,533,,,533,,,,,,,533,,,533,533,533,533,533,533,533',
'533,,533,533,533,,533,533,,533,533,533,,,,,,,,,,,,,,,,,,,,533,,,533',
',,533,533,,,533,,,,,,533,,,,,,,,533,,,,,533,533,533,533,533,533,,,,533',
'533,,,,,,,533,,,533,533,533,,,533,533,539,539,539,,539,,,,539,539,,',
',539,,539,539,539,539,539,539,539,,,,,,539,539,539,539,539,539,539,',
',539,,,,,,,539,,,539,539,539,539,539,539,539,539,539,539,539,539,,539',
'539,,539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,539,',
',,539,,,,,,,,539,,,,,539,539,539,539,539,539,,,,539,539,,,,,,,539,,539',
'539,539,539,,,539,539,542,542,542,,542,,,,542,542,,,,542,,542,542,542',
'542,542,542,542,,,,,,542,542,542,542,542,542,542,,,542,,,,,,,542,,,542',
'542,542,542,542,542,542,542,542,542,542,542,,542,542,,542,542,542,,',
',,,,,,,,,,,,,,,,,542,,,542,,,542,542,,,542,,,,,,542,,,,,,,,542,,,,,542',
'542,542,542,542,542,,,,542,542,,,,,,,542,,542,542,542,542,,,542,542',
'566,566,566,,566,,,,566,566,,,,566,,566,566,566,566,566,566,566,,,,',
',566,566,566,566,566,566,566,,,566,,,,,,,566,,,566,566,566,566,566,566',
'566,566,,566,566,566,,566,566,,566,566,566,,,,,,,,,,,,,,,,,,,,566,,',
'566,,,566,566,,,566,,,,,,566,,,,,,,,566,,,,,566,566,566,566,566,566',
',,,566,566,,,,,,,566,,,566,566,566,,,566,566,587,587,587,,587,,,,587',
'587,,,,587,,587,587,587,587,587,587,587,,,,,,587,587,587,587,587,587',
'587,,,587,,,,,,,587,,,587,587,587,587,587,587,587,587,587,587,587,587',
',587,587,,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587,',
'587,,587,,587,,,,,,,,587,,,,,587,587,587,587,587,587,,,,587,587,,,,',
',,587,,587,587,587,587,,,587,587,599,599,599,,599,,,,599,599,,,,599',
',599,599,599,599,599,599,599,,,,,,599,599,599,599,599,599,599,,,599',
',,,,,,599,,,599,599,599,599,599,599,599,599,,599,599,599,,599,599,,599',
'599,599,,,,,,,,,,,,,,,,,,,,599,,,599,,,599,599,,,599,,,,,,599,,,,,,',
',599,,,,,599,599,599,599,599,599,,,,599,599,,,,,,,599,,,599,599,599',
',,599,599,603,603,603,,603,,,,603,603,,,,603,,603,603,603,603,603,603',
'603,,,,,,603,603,603,603,603,603,603,,,603,,,,,,,603,,,603,603,603,603',
'603,603,603,603,,603,603,603,,603,603,,603,603,603,,,,,,,,,,,,,,,,,',
',,603,,,603,,,603,603,,,603,,,,,,603,,,,,,,,603,,,,,603,603,603,603',
'603,603,,,,603,603,,,,,,,603,,,603,603,603,,,603,603,632,632,632,,632',
',,,632,632,,,,632,,632,632,632,632,632,632,632,,,,,,632,632,632,632',
'632,632,632,,,632,,,,,,,632,,,632,632,632,632,632,632,632,632,,632,632',
'632,,632,632,,632,632,632,,,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632',
',632,,,,632,,,,,,,,632,,,,,632,632,632,632,632,632,,,,632,632,,,,,,',
'632,,,632,632,632,,,632,632,633,633,633,,633,,,,633,633,,,,633,,633',
'633,633,633,633,633,633,,,,,,633,633,633,633,633,633,633,,,633,,,,,',
',633,,,633,633,633,633,633,633,633,633,,633,633,633,,633,633,,633,633',
'633,,,,,,,,,,,,,,,,,,,,633,,,633,,,633,633,,,633,,,,,,633,,,,,,,,633',
',,,,633,633,633,633,633,633,,,,633,633,,,,,,,633,,,633,633,633,,,633',
'633,636,636,636,,636,,,,636,636,,,,636,,636,636,636,636,636,636,636',
',,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636',
'636,636,636,636,636,636,636,,636,636,,636,636,636,,,,,,,,,,,,,,,,,,',
',636,,,636,,,636,636,,,636,,636,,636,,636,,,,,,,,636,,,,,636,636,636',
'636,636,636,,,,636,636,,,,,,,636,,636,636,636,636,,,636,636,637,637',
'637,,637,,,,637,637,,,,637,,637,637,637,637,637,637,637,,,,,,637,637',
'637,637,637,637,637,,,637,,,,,,,637,,,637,637,637,637,637,637,637,637',
'637,637,637,637,,637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,',
',637,637,,,637,,,,637,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,',
',637,637,,,,,,,637,,637,637,637,637,,,637,637,638,638,638,,638,,,,638',
'638,,,,638,,638,638,638,638,638,638,638,,,,,,638,638,638,638,638,638',
'638,,,638,,,,,,,638,,,638,638,638,638,638,638,638,638,,638,638,638,',
'638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,',
',,,638,,,,,,,,638,,,,,638,638,638,638,638,638,,,,638,638,,,,,,,638,',
',638,638,638,,,638,638,639,639,639,,639,,,,639,639,,,,639,,639,639,639',
'639,639,639,639,,,,,,639,639,639,639,639,639,639,,,639,,,,,,,639,,,639',
'639,639,639,639,639,639,639,,639,639,639,,639,639,,639,639,639,,,,,',
',,,,,,,,,,,,,,639,,,639,,,639,639,,,639,,,,,,639,,,,,,,,639,,,,,639',
'639,639,639,639,639,,,,639,639,,,,,,,639,,,639,639,639,,,639,639,644',
'644,644,,644,,,,644,644,,,,644,,644,644,644,644,644,644,644,,,,,,644',
'644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644,644,644,644',
'644,,644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644',
',,644,644,,,644,,,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644',
'644,,,,,,,644,,,644,644,644,,,644,644,645,645,645,,645,,,,645,645,,',
',645,,645,645,645,645,645,645,645,,,,,,645,645,645,645,645,645,645,',
',645,,,,,,,645,,,645,645,645,645,645,645,645,645,,645,645,645,,645,645',
',645,645,645,,,,,,,,,,,,,,,,,,,,645,,,645,,,645,645,,,645,,,,,,645,',
',,,,,,645,,,,,645,645,645,645,645,645,,,,645,645,,,,,,,645,,,645,645',
'645,,,645,645,648,648,648,,648,,,,648,648,,,,648,,648,648,648,648,648',
'648,648,,,,,,648,648,648,648,648,648,648,,,648,,,,,,,648,,,648,648,648',
'648,648,648,648,648,,648,648,648,,648,648,,648,648,648,,,,,,,,,,,,,',
',,,,,,648,,,648,,,648,648,,,648,,,,,,648,,,,,,,,648,,,,,648,648,648',
'648,648,648,,,,648,648,,,,,,,648,,,648,648,648,,,648,648,649,649,649',
',649,,,,649,649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649,649',
'649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649',
'649,649,,649,649,,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649',
',,649,,,,,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649,649,,,',
',,,649,,,649,649,649,,,649,649,673,673,673,,673,,,,673,673,,,,673,,673',
'673,673,673,673,673,673,,,,,,673,673,673,673,673,673,673,,,673,,,,,',
',673,,,673,673,673,673,673,673,673,673,,673,673,673,,673,673,,673,673',
'673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673,,,,,,673,,,,,,,,673',
',,,,673,673,673,673,673,673,,,,673,673,,,,,,,673,,,673,673,673,,,673',
'673,678,678,678,,678,,,,678,678,,,,678,,678,678,678,678,678,678,678',
',,,,,678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678,678',
'678,678,678,,678,678,678,,678,678,,,,678,,,,,,,,,,,,,,,,,,,,678,,,678',
',,678,678,,,678,,,,,,,,,,,,,,,,,,,678,678,678,678,678,678,,,,678,678',
',,,,,,678,,,678,678,678,,,678,678,689,689,689,,689,,,,689,689,,,,689',
',689,689,689,689,689,689,689,,,,,,689,689,689,689,689,689,689,,,689',
',,,,,,689,,,689,689,689,689,689,689,689,689,,689,689,689,,689,689,,',
',689,,,,,,,,,,,,,,,,,,,,689,,,689,,,689,689,,,689,,,,,,,,,,,,,,,,,,',
'689,689,689,689,689,689,,,,689,689,,,,,,,689,,,689,689,689,,,689,689',
'694,694,694,,694,,,,694,694,,,,694,,694,694,694,694,694,694,694,,,,',
',694,694,694,694,694,694,694,,,694,,,,,,,694,,,694,694,694,694,694,694',
'694,694,,694,694,694,,694,694,,694,694,694,,,,,,,,,,,,,,,,,,,,694,,',
'694,,,694,694,,,694,,694,,,,694,,,,,,,,694,,,,,694,694,694,694,694,694',
',,,694,694,,,,,,,694,,,694,694,694,,,694,694,712,712,712,,712,,,,712',
'712,,,,712,,712,712,712,712,712,712,712,,,,,,712,712,712,712,712,712',
'712,,,712,,,,,,,712,,,712,712,712,712,712,712,712,712,,712,712,712,',
'712,712,,712,712,712,,,,,,,,,,,,,,,,,,,,712,,,712,,,712,712,,,712,,',
',,,712,,,,,,,,712,,,,,712,712,712,712,712,712,,,,712,712,,,,,,,712,',
',712,712,712,,,712,712,732,732,732,,732,,,,732,732,,,,732,,732,732,732',
'732,732,732,732,,,,,,732,732,732,732,732,732,732,,,732,,,,,,,732,,,732',
'732,732,732,732,732,732,732,,732,732,732,,732,732,,732,732,732,,,,,',
',,,,,,,,,,,,,,732,,,732,,,732,732,,,732,,732,,,,732,,,,,,,,732,,,,,732',
'732,732,732,732,732,,,,732,732,,,,,,,732,,,732,732,732,,,732,732,738',
'738,738,,738,,,,738,738,,,,738,,738,738,738,738,738,738,738,,,,,,738',
'738,738,738,738,738,738,,,738,,,,,,,738,,,738,738,738,738,738,738,738',
'738,,738,738,738,,738,738,,738,738,738,,,,,,,,,,,,,,,,,,,,738,,,738',
',,738,738,,,738,,,,,,738,,,,,,,,738,,,,,738,738,738,738,738,738,,,,738',
'738,,,,,,,738,,,738,738,738,,,738,738,744,744,744,,744,,,,744,744,,',
',744,,744,744,744,744,744,744,744,,,,,,744,744,744,744,744,744,744,',
',744,,,,,,,744,,,744,744,744,744,744,744,744,744,744,744,744,744,,744',
'744,,744,744,744,,,,,,,,,,,,,,,,,,,,744,,,744,,,744,744,,,744,,744,',
'744,,744,,,,,,,,744,,,,,744,744,744,744,744,744,,,,744,744,,,,,,,744',
',744,744,744,744,,,744,744,766,766,766,,766,,,,766,766,,,,766,,766,766',
'766,766,766,766,766,,,,,,766,766,766,766,766,766,766,,,766,,,,,,,766',
',,766,766,766,766,766,766,766,766,,766,766,766,,766,766,,766,766,766',
',,,,,,,,,,,,,,,,,,,766,,,766,,,766,766,,,766,,,,,,766,,,,,,,,766,,,',
',766,766,766,766,766,766,,,,766,766,,,,,,,766,,,766,766,766,,,766,766',
'768,768,768,,768,,,,768,768,,,,768,,768,768,768,768,768,768,768,,,,',
',768,768,768,768,768,768,768,,,768,,,,,,,768,,,768,768,768,768,768,768',
'768,768,,768,768,768,,768,768,,768,768,768,,,,,,,,,,,,,,,,,,,,768,,',
'768,,,768,768,,,768,,,,,,768,,,,,,,,768,,,,,768,768,768,768,768,768',
',,,768,768,,,,,,,768,,,768,768,768,,,768,768,782,782,782,,782,,,,782',
'782,,,,782,,782,782,782,782,782,782,782,,,,,,782,782,782,782,782,782',
'782,,,782,,,,,,,782,,,782,782,782,782,782,782,782,782,,782,782,782,',
'782,782,,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782,,,782,782,,,782,,',
',,,782,,,,,,,,782,,,,,782,782,782,782,782,782,,,,782,782,,,,,,,782,',
',782,782,782,,,782,782,783,783,783,,783,,,,783,783,,,,783,,783,783,783',
'783,783,783,783,,,,,,783,783,783,783,783,783,783,,,783,,,,,,,783,,,783',
'783,783,783,783,783,783,783,,783,783,783,,783,783,,783,783,783,,,,,',
',,,,,,,,,,,,,,783,,,783,,,783,783,,,783,,,,,,783,,,,,,,,783,,,,,783',
'783,783,783,783,783,,,,783,783,,,,,,,783,,,783,783,783,,,783,783,784',
'784,784,,784,,,,784,784,,,,784,,784,784,784,784,784,784,784,,,,,,784',
'784,784,784,784,784,784,,,784,,,,,,,784,,,784,784,784,784,784,784,784',
'784,,784,784,784,,784,784,,784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784',
',,784,784,,,784,,,,,,784,,,,,,,,784,,,,,784,784,784,784,784,784,,,,784',
'784,,,,,,,784,,,784,784,784,,,784,784,785,785,785,,785,,,,785,785,,',
',785,,785,785,785,785,785,785,785,,,,,,785,785,785,785,785,785,785,',
',785,,,,,,,785,,,785,785,785,785,785,785,785,785,,785,785,785,,785,785',
',785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785,,,,,,785,',
',,,,,,785,,,,,785,785,785,785,785,785,,,,785,785,,,,,,,785,,,785,785',
'785,,,785,785,787,787,787,,787,,,,787,787,,,,787,,787,787,787,787,787',
'787,787,,,,,,787,787,787,787,787,787,787,,,787,,,,,,,787,,,787,787,787',
'787,787,787,787,787,,787,787,787,,787,787,,787,787,787,,,,,,,,,,,,,',
',,,,,,787,,,787,,,787,787,,,787,,,,,,787,,,,,,,,787,,,,,787,787,787',
'787,787,787,,,,787,787,,,,,,,787,,,787,787,787,,,787,787,799,799,799',
',799,,,,799,799,,,,799,,799,799,799,799,799,799,799,,,,,,799,799,799',
'799,799,799,799,,,799,,,,,,,799,,,799,799,799,799,799,799,799,799,,799',
'799,799,,799,799,,,,799,,,,,,,,,,,,,,,,,,,,799,,,799,,,799,799,,,799',
',,,,,,,,,,,,,,,,,,799,799,799,799,799,799,,,,799,799,,,,,,,799,,,799',
'799,799,,,799,799,845,845,845,,845,,,,845,845,,,,845,,845,845,845,845',
'845,845,845,,,,,,845,845,845,845,845,845,845,,,845,,,,,,,845,,,845,845',
'845,845,845,845,845,845,,845,845,845,,845,845,,845,845,845,,,,,,,,,',
',,,,,,,,,,845,,,845,,,845,845,,,845,,,,,,845,,,,,,,,845,,,,,845,845',
'845,845,845,845,,,,845,845,,,,,,,845,,,845,845,845,,,845,845,858,858',
'858,,858,,,,858,858,,,,858,,858,858,858,858,858,858,858,,,,,,858,858',
'858,858,858,858,858,,,858,,,,,,,858,,,858,858,858,858,858,858,858,858',
',858,858,858,,858,858,,858,858,858,,,,,,,,,,,,,,,,,,,,858,,,858,,,858',
'858,,,858,,,,,,858,,,,,,,,858,,,,,858,858,858,858,858,858,,,,858,858',
',,,,,,858,,,858,858,858,,,858,858,876,876,876,,876,,,,876,876,,,,876',
',876,876,876,876,876,876,876,,,,,,876,876,876,876,876,876,876,,,876',
',,,,,,876,,,876,876,876,876,876,876,876,876,876,876,876,876,,876,876',
',876,876,876,,,,,,,,,,,,,,,,,,,,876,,,876,,,876,876,,,876,,,,876,,876',
',,,,,,,876,,,,,876,876,876,876,876,876,,,,876,876,,,,,,,876,,876,876',
'876,876,,,876,876,877,877,877,,877,,,,877,877,,,,877,,877,877,877,877',
'877,877,877,,,,,,877,877,877,877,877,877,877,,,877,,,,,,,877,,,877,877',
'877,877,877,877,877,877,,877,877,877,,877,877,,877,877,877,,,,,,,,,',
',,,,,,,,,,877,,,877,,,877,877,,,877,,,,,,877,,,,,,,,877,,,,,877,877',
'877,877,877,877,,,,877,877,,,,,,,877,,,877,877,877,,,877,877,892,892',
'892,,892,,,,892,892,,,,892,,892,892,892,892,892,892,892,,,,,,892,892',
'892,892,892,892,892,,,892,,,,,,,892,,,892,892,892,892,892,892,892,892',
',892,892,892,,892,892,,,,892,,,,,,,,,,,,,,,,,,,,892,,,892,,,892,892',
',,892,,,,,,,,,,,,,,,,,,,892,892,892,892,892,892,,,,892,892,,,,,,,892',
',,892,892,892,,,892,892,904,904,904,,904,,,,904,904,,,,904,,904,904',
'904,904,904,904,904,,,,,,904,904,904,904,904,904,904,,,904,,,,,,,904',
',,904,904,904,904,904,904,904,904,,904,904,904,,904,904,,,,904,,,,,',
',,,,,,,,,,,,,,904,,,904,,,904,904,,,904,,,,,,,,,,,,,,,,,,,904,904,904',
'904,904,904,,,,904,904,,,,,,,904,,,904,904,904,,,904,904,929,929,929',
',929,,,,929,929,,,,929,,929,929,929,929,929,929,929,,,,,,929,929,929',
'929,929,929,929,,,929,,,,,,,929,,,929,929,929,929,929,929,929,929,,929',
'929,929,,929,929,,929,929,929,,,,,,,,,,,,,,,,,,,,929,,,929,,,929,929',
',,929,,929,,,,929,,,,,,,,929,,,,,929,929,929,929,929,929,,,,929,929',
',,,,,,929,,,929,929,929,,,929,929,1004,1004,1004,,1004,,,,1004,1004',
',,,1004,,1004,1004,1004,1004,1004,1004,1004,,,,,,1004,1004,1004,1004',
'1004,1004,1004,,,1004,,,,,,,1004,,,1004,1004,1004,1004,1004,1004,1004',
'1004,1004,1004,1004,1004,,1004,1004,,1004,1004,1004,,,,,,,,,,,,,,,,',
',,,1004,,,1004,,,1004,1004,,,1004,,1004,,1004,,1004,,,,,,,,1004,,,,',
'1004,1004,1004,1004,1004,1004,,,,1004,1004,,,,,,,1004,,1004,1004,1004',
'1004,59,,1004,1004,,,,59,59,59,,,59,59,59,547,59,547,547,547,547,547',
',,,,59,59,59,,,547,,,,,59,59,,59,59,59,59,59,,,,,,,,,,547,,,,,,,,,547',
'547,547,547,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,',
'59,,,59,,,59,59,,59,547,59,,59,,59,59,59,59,59,59,59,,59,,59,,,,,,,',
',,,,,59,59,59,59,438,59,,59,,,,438,438,438,,,438,438,438,601,438,601',
'601,601,601,601,,,,438,438,438,438,,,601,,,,,438,438,,438,438,438,438',
'438,,,,,,,,,,601,601,,,,,,,,601,601,601,601,,438,438,438,438,438,438',
'438,438,438,438,438,438,438,438,,,438,438,438,,,438,,,438,,,438,438',
',438,601,438,,438,,438,438,438,438,438,438,438,,438,438,438,,,,,,,,',
',,,,438,438,438,438,439,438,,438,,,,439,439,439,,,439,439,439,660,439',
'660,660,660,660,660,,,,439,439,439,439,,,660,,,,,439,439,,439,439,439',
'439,439,,,,,,,,,,660,,,,,,,,,660,660,660,660,,439,439,439,439,439,439',
'439,439,439,439,439,439,439,439,,,439,439,439,,,439,,660,439,,,439,439',
',439,660,439,,439,,439,439,439,439,439,439,439,,439,439,439,,,,,,,,',
',,,,439,439,439,439,,439,,439,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,',
',,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11',
'11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11',
'11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12',
'12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12',
'12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12',
'12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74,74,74',
'74,74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,,,74,74',
',74,74,74,74,74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74',
'74,74,74,74,74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91',
'91,91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91',
',,,,,,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,',
',,91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91',
'408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,408,408,408,,,,408,408,408,408,408,408,408,408,408,408',
',,,,,408,408,408,408,408,408,408,408,408,,,408,,,,,,,,,408,408,,408',
'408,408,408,408,408,408,,,408,408,,,,408,408,408,408,,,,,,,,,,,,,,408',
'408,,408,408,408,408,408,408,408,408,408,408,408,,,408,408,,,,,,,,,',
'408,,,,,,,,,408,629,629,629,629,629,629,629,629,629,629,629,629,629',
'629,629,629,629,629,629,629,629,629,629,629,,,,629,629,629,629,629,629',
'629,629,629,629,,,,,,629,629,629,629,629,629,629,629,629,,,629,,,,,',
',,,629,629,,629,629,629,629,629,629,629,,,629,629,,,,629,629,629,629',
',,,,,,,,,,,,,629,629,,629,629,629,629,629,629,629,629,629,629,629,,',
'629,629,,,,,,,,,,629,,,,,,,,,629,754,754,754,754,754,754,754,754,754',
'754,754,754,754,754,754,754,754,754,754,754,754,754,754,754,,,,754,754',
'754,754,754,754,754,754,754,754,,,,,,754,754,754,754,754,754,754,754',
'754,,,754,,,,,,,,,754,754,,754,754,754,754,754,754,754,,,754,754,,,',
'754,754,754,754,,,,,,,,,,,,,,754,754,,754,754,754,754,754,754,754,754',
'754,754,754,30,,754,,,,,30,30,30,,,30,30,30,706,30,706,706,706,706,706',
'754,,,30,30,30,,,,706,,,,,30,30,,30,30,30,30,30,,,,,,,,,,706,,,,,,,',
',706,706,706,706,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30',
'30,,,30,,30,30,,,30,30,,30,706,30,,30,,30,30,30,30,30,30,30,,30,30,30',
',,,,,,,,,,,31,30,30,,30,,30,31,31,31,,,31,31,31,708,31,708,708,708,708',
'708,,,,,31,31,,,,708,,,,,31,31,,31,31,31,31,31,,,,,,,,,,708,,,,,,,,',
'708,708,708,708,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31',
',,31,,31,31,,,31,31,,31,708,31,,31,,31,31,31,31,31,31,31,,31,,31,,,',
',,,,,,,,429,31,31,,31,,31,429,429,429,,,429,429,429,710,429,710,710',
'710,710,710,,,,429,429,429,,,,710,,,,,429,429,,429,429,429,429,429,',
',,,,,,,,710,,,,,,,,,,,710,710,,429,429,429,429,429,429,429,429,429,429',
'429,429,429,429,,,429,429,429,,,429,,429,429,,,429,429,,429,710,429',
',429,,429,429,429,429,429,429,429,,429,429,429,,,,,,,,,,,,487,429,429',
',429,,429,487,487,487,,,487,487,487,752,487,752,752,752,752,752,,,,487',
'487,,,,,752,,,,,487,487,,487,487,487,487,487,,,,,,,,,,752,,887,,887',
'887,887,887,887,752,752,752,752,,,,,,887,,,,,,,487,,,,,,,487,,,,,487',
'487,,887,,,,,752,,,,213,213,887,887,213,,,,,,487,487,,213,213,,213,213',
'213,213,213,213,213,,487,213,213,,,487,213,213,213,213,,,887,,,213,',
',,,,,,213,213,,213,213,213,213,213,213,213,213,213,213,213,,,213,,,',
',214,214,,,214,,,,,,,,,214,214,213,214,214,214,214,214,214,214,,,214',
'214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214,214,214',
'214,214,214,214,214,214,,,214,,,,,263,263,,,263,,,,,,,,,263,263,214',
'263,263,263,263,263,263,263,,,263,263,,,,263,263,263,263,,,,,,,,,,,',
',,263,263,,263,263,263,263,263,263,263,263,263,263,263,,,263,,,,,453',
'453,,,453,,,,,,,,,453,453,263,453,453,453,453,453,453,453,,,453,453',
',,,453,453,453,453,,,,,,453,,,,,,,,453,453,,453,453,453,453,453,453',
'453,453,453,453,453,,,453,,,,,454,454,,,454,,,,,,,,,454,454,453,454',
'454,454,454,454,454,454,,,454,454,,,,454,454,454,454,,,,,,454,,,,,,',
',454,454,,454,454,454,454,454,454,454,454,454,454,454,,,454,,,,,520',
'520,,,520,,,,,,,,,520,520,454,520,520,520,520,520,520,520,,,520,520',
',,,520,520,520,520,,,,,,520,,,,,,,,520,520,,520,520,520,520,520,520',
'520,520,520,520,520,,,520,,,,,521,521,,,521,,,,,,,,,521,521,520,521',
'521,521,521,521,521,521,,,521,521,,,,521,521,521,521,,,,,,521,,,,,,',
',521,521,,521,521,521,521,521,521,521,521,521,521,521,,,521,,,,,530',
'530,,,530,,,,,,,,,530,530,521,530,530,530,530,530,530,530,,,530,530',
',,,530,530,530,530,,,,,,530,,,,,,,,530,530,,530,530,530,530,530,530',
'530,530,530,530,530,,,530,,,,,531,531,,,531,,,,,,,,,531,531,530,531',
'531,531,531,531,531,531,,,531,531,,,,531,531,531,531,,,,,,531,,,,,,',
',531,531,,531,531,531,531,531,531,531,531,531,531,531,,,531,,,,,588',
'588,,,588,,,,,,,,,588,588,531,588,588,588,588,588,588,588,,,588,588',
',,,588,588,588,588,,,,,,588,,,,,,,,588,588,,588,588,588,588,588,588',
'588,588,588,588,588,,,588,,,,,589,589,,,589,,,,,,,,,589,589,588,589',
'589,589,589,589,589,589,,,589,589,,,,589,589,589,589,,,,,,589,,,,,,',
',589,589,,589,589,589,589,589,589,589,589,589,589,589,,,589,,,,,742',
'742,,,742,,,,,,,,,742,742,589,742,742,742,742,742,742,742,,,742,742',
',,,742,742,742,742,,,,,,742,,,,,,,,742,742,,742,742,742,742,742,742',
'742,742,742,742,742,,,742,,,,,743,743,,,743,,,,,,,,,743,743,742,743',
'743,743,743,743,743,743,,,743,743,,,,743,743,743,743,,,,,,743,,,,,,',
',743,743,,743,743,743,743,743,743,743,743,743,743,743,,882,743,882,882',
'882,882,882,885,,885,885,885,885,885,,,882,,,,,743,,885,910,,910,910',
'910,910,910,,,,,,,,882,,910,,,,,885,,882,882,882,882,,,,885,885,885',
'885,,,,912,910,912,912,912,912,912,,,,910,910,910,910,,914,912,914,914',
'914,914,914,882,,,,,,,885,,914,,,,,,,912,916,,916,916,916,916,916,910',
',,912,912,,,914,939,916,939,939,939,939,939,,,,914,914,,,,,939,,,,,',
',916,,,,,,912,,,,,916,916,,,939,939,,956,956,,914,956,,939,939,939,939',
',,,956,956,,956,956,956,956,956,956,956,,,956,956,916,,,956,956,956',
'956,,,,,,956,,,939,,,,,956,956,,956,956,956,956,956,956,956,956,956',
'956,956,,989,956,989,989,989,989,989,991,,991,991,991,991,991,,,989',
',,,,956,,991,993,,993,993,993,993,993,,,,,,,,989,,993,,,,,991,,989,989',
'989,989,,,,,,991,991,,,,995,993,995,995,995,995,995,,,,,,993,993,,,995',
',,,,,989,,,,,,,991,,,,,,,,,995,1005,1005,,,1005,,,993,,,995,995,,1005',
'1005,,1005,1005,1005,1005,1005,1005,1005,,,1005,1005,,,,1005,1005,1005',
'1005,,,,,,1005,,,,,995,,,1005,1005,,1005,1005,1005,1005,1005,1005,1005',
'1005,1005,1005,1005,,,1005,,,,,1006,1006,,,1006,,,,,,,,,1006,1006,1005',
'1006,1006,1006,1006,1006,1006,1006,,,1006,1006,,,,1006,1006,1006,1006',
',,,,,1006,,,,,,,,1006,1006,,1006,1006,1006,1006,1006,1006,1006,1006',
'1006,1006,1006,,1008,1006,1008,1008,1008,1008,1008,1039,,1039,1039,1039',
'1039,1039,,,1008,,,,,1006,,1039,,,,,,,,,,,,,,,1008,,,,,,,1039,,,,1008',
'1008,,,,,,1039,1039,,,,,,,,,,,,,,,,,,,,,,,,,,1008,,,,,,,1039' ]
        racc_action_check = arr = ::Array.new(26260, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    34,   777,    86,   nil,   165,   nil,   nil,  5006,  1326,
   nil, 23456, 23589,   -20,   nil,   -44,    50,   233,   105,    25,
   557,   nil,   -30,  5146,  1200,   153,   nil,   212,   nil,   160,
 24366, 24491,  5286,  5426,  5566,   nil,   918,  5706,  5846,   nil,
    59,   138,   186,   163,   152,  5986,  6126,  6266,   106,   312,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23064,
   nil,  6406,  6546,  6686,   -19,   nil,  6826,  6966,   nil,   nil,
  7106,  7246,   194,   nil, 23722,   nil,   nil,   nil,   nil,   nil,
    54,   nil,   nil,   nil,   nil,   nil,   nil,   158,   178,   218,
   224, 23855,   nil,   nil,   nil,   nil,   nil,   nil,     0,   nil,
   nil,   132,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  7386,   nil,   nil,   nil,   nil,  7526,
  7666,  7806,  7946,  8086,   248,   nil,   426,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   233,   nil,  1059,
  8226,  8366,  8506, 24792, 24860,   nil,  8646,  8786,  8926,  9066,
  9206,  9346,   nil,   nil,   359,   -28,   104,   319,   106,   236,
   293,   nil,  9486,  1200,   294,  9626,  9766,  9906, 10046, 10186,
 10326, 10466, 10606, 10746, 10886, 11026, 11166, 11306, 11446, 11586,
 11726, 11866, 12006, 12146, 12286, 12426, 12566, 12706, 12846, 12986,
 13126,   nil,   nil, 24928,   nil,   nil,   301, 13266,   nil,   343,
   nil,   nil,   nil, 13406,   nil,   nil, 13546,   nil,  1341,   nil,
   344,   358,   nil, 13686,   417, 13826,   nil, 13966, 14106,   nil,
   nil,   305,   nil,  1341, 14246,   373,  1341,   391,   432,   398,
 14386,  1482,   479,   483,   520,   491,   583,   nil,   470,   444,
   -10,   nil,   nil,   nil,   482,   245,   445, 14526,   nil,   393,
   509,   584,   nil,   535,   nil, 14666,  1623,   599,   nil,   513,
   nil,   273,   296,   517,   509,   nil,   323,   545,   nil,   nil,
   575,   610,   -11,   -10, 14806, 14946,   658,   621,   532,     5,
     6,   652,   612,     7,   655,   nil,   nil, 15086,   nil, 15226,
   279,   294,   397,   424,   426,   493,   549,   570,   581,   nil,
   604,   nil,   nil,   nil,   nil,   nil,   191,   nil,   292,   nil,
   385,   nil,   570,   295,   nil,   573,   298,   nil,   577,   -57,
   nil,   580,   -41,   nil,   317,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1764, 23988,   nil,
   nil,   nil,   nil,   594,   nil,   nil,   581, 15366,   596,   nil,
   nil,   918,   608,   nil,   nil,   607,   615,   402,   414, 24616,
   nil,   nil,   nil,   262,   387,   664,   nil,   nil, 23194, 23324,
   nil,  1482,   nil,   619,   nil,   nil,   777,   nil,   nil,   nil,
   nil,   -16,   nil, 24996, 25064, 15506,   110, 15646, 15786, 15926,
  3315,  3456,   804,   945,   697,   701,   707,   709,  5286,  5426,
  3197,  3597,  3738,  3879,  4020,  4161,  4302,  4443,  4584,  4725,
  4866,   -50,   -42,  5006,  5146,  1623,   -65, 24741,   nil,   nil,
   nil,   nil,   nil,   nil,   -57,   121,   665,   667,   nil,   nil,
 16066,   nil,   nil, 16206,   nil, 16346,   nil,   nil,   nil,   nil,
 16486,  1467,   690,   704,   nil,   nil,   708, 16626,   714, 16766,
 25132, 25200,   780,   765,   nil, 16906,   739,   nil, 17046, 17186,
 25268, 25336,  1764, 17326,   884,   889,   773,   nil,   nil, 17466,
   nil,   nil, 17606,   nil,   nil,   nil,    17, 23028,   nil,   771,
   776,   nil,   781,   782,   786,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   774,   512,   nil,   nil, 17746,   nil,   nil,   nil,
   874,   nil,   nil,   nil,   875,   nil,   nil,   879,  1905,   919,
   nil,  2046,    55,    63,   916,   933,   nil, 17886, 25404, 25472,
    22,   nil,   231,   232,   269,   nil,   849,   nil,    31, 18026,
   nil, 23158,   nil, 18166,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   164,   nil,   nil,   229,   nil,
   nil,   nil,   814,   nil,   nil,   815,   nil,   833,   nil, 24121,
   nil,   825, 18306, 18446,   416,   860, 18586, 18726, 18866, 19006,
   860,   nil,   nil,   nil, 19146, 19286,   861,   nil, 19426, 19566,
   nil,   111,   141,   512,   644,   833,  1059,   832,   nil,   nil,
 23288,   nil,   nil,   937,    75,   146,   nil,   nil,   nil,   nil,
   845,   nil,   890, 19706,   nil,   nil,  1482,   -91, 19846,   852,
   nil,   870,   153,   158,   910,   356,   962,   913,   876, 19986,
  1905,   941,   -14,   995, 20126,   nil,   nil,   421,   nil,  2187,
  2328,   887,   376,   nil,   nil,   549, 24330,   nil, 24455,   nil,
 24580,   nil, 20266,   nil,   644,   nil,   889,   354,   904,   nil,
   nil,   nil,   nil,   789,   nil,  1017,   nil,   nil,   nil,   nil,
  1023,   nil, 20406,   913,    24,    26,    93,   152, 20546,   nil,
   921,   nil, 25540, 25608, 20686,   nil,   nil,   nil,   659,   768,
  2469,  2610, 24705,   733, 24254,   128,   760,  2751,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   912, 20826,  2046, 20966,   nil,
   917,   nil,  2187,   nil,  2328,   nil,   nil,  2469,   nil,  2610,
   nil,  2751, 21106, 21246, 21386, 21526,   177, 21666,   922,   928,
   nil,   937,   938,   942,   nil,   963,   947,   952,   943, 21806,
   nil,   nil,  2892,   nil,   nil,   nil,  3033,  3174,   nil,   nil,
   957,   298,   nil,   nil,  1079,   nil,  3315,   966,  1008,   nil,
   nil,   nil,   985,  1090,   974,   972,   nil,   nil,   nil,   976,
   986,   nil,   990,   993,   nil,  1012,   nil,   nil,  1020,  3160,
  1021,   637,   nil,  1145,   nil, 21946,  1150,  3456,  3597,   nil,
    -7,    34,    64,   357,  1059,   nil,  1045,  3738, 22086,   nil,
   736,  1163,  1173,  1059,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1074,  1061,   nil,  2892, 22226, 22366,  3033,   441,
   nil,   nil, 25670,   nil,   nil, 25677,   nil, 24745,   nil,   nil,
  1083,   705, 22506,   990,  1138,  1189,  3879,  1094,  1199,   nil,
  4020,   nil,   nil,    -8, 22646,   nil,   nil,   nil,   nil,   nil,
 25694,   nil, 25731,   nil, 25746,   nil, 25770,   nil,   nil,   nil,
   nil,   479,   651,  1083,   nil,    -1,   nil,  1204,  1205, 22786,
  4161,   nil,   nil,  1215,   746,   nil,   nil,   nil,   nil, 25785,
   nil,  1097,   nil,   nil,  1098,  1099,  1107,  1113,   nil,  1117,
   nil,   433,   nil,   nil,   nil,  1062, 25826,   nil,   nil,  1143,
   nil,   nil,   nil,  4302,  1095,  1103,  1131,  1205,  1200,   nil,
  1134,  1153,  1158,  1161,  1162,   712,  1166,  3190,  4443,   nil,
   nil,   nil,   252,  4584,   nil,   nil,  4725,  4866,   nil, 25888,
   nil, 25895,   nil, 25912,   nil, 25949,   nil,   nil,   nil,  1186,
  1210,  1222,   nil,  1306, 22926, 25988, 26056,  1203, 26118,   nil,
   nil,   nil,   nil,  3197,  1193,   876,   nil,   nil,   nil,  1314,
  1319,  1320,  1202,  1204,  1205,  1209,   nil,   nil,  1213,    21,
    23,    53,  1236,  1219,  1220,   nil,   nil,   nil,   nil, 26125,
   nil,   nil,   nil,   nil,    35,   nil,  1221,   nil ]

racc_action_default = [
    -1,  -622,  -621,  -622,    -2,  -608,    -4,    -5,  -622,    -8,
    -9,  -622,  -622,  -622,   -29,  -622,  -622,  -622,  -280,  -622,
   -40,   -43,  -610,  -622,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -292,  -331,  -332,   -69,  -621,   -73,   -81,   -83,
  -622,  -514,  -515,  -622,  -622,  -622,  -622,  -622,  -610,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -597,
  -282,  -610,  -621,  -621,  -300,  -403,  -622,  -622,  -305,  -308,
  -608,  -622,  -316,  -323,  -622,  -333,  -334,  -445,  -446,  -447,
  -448,  -449,  -450,  -621,  -453,  -621,  -621,  -621,  -621,  -621,
  -621,  -621,  -490,  -496,  -498,  -499,  -500,  -501,  -595,  -503,
  -504,  -596,  -506,  -507,  -508,  -509,  -510,  -511,  -512,  -513,
  -518,  -519,  1048,    -3,  -609,  -617,  -618,  -619,    -7,  -622,
  -622,  -622,  -622,  -622,  -622,   -17,  -622,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -621,
  -622,  -622,  -621,  -622,  -622,  -607,  -622,  -622,  -622,  -622,
  -622,  -610,  -611,   -47,  -622,  -514,  -515,  -622,  -280,  -622,
  -622,  -230,  -622,  -621,  -622,  -622,  -622,  -622,  -622,  -622,
  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,
  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,  -622,
  -622,  -409,  -412,  -622,  -605,  -606,   -58,  -622,  -299,  -622,
  -426,  -429,   -64,  -621,  -423,   -65,  -610,   -66,  -239,  -252,
  -621,  -621,  -256,  -622,  -262,  -622,  -590,  -622,  -622,   -67,
   -68,  -608,   -13,   -14,  -622,   -71,  -621,  -610,  -622,   -74,
   -77,  -621,   -89,   -90,  -622,  -622,   -97,  -292,  -295,  -610,
  -416,  -331,  -332,  -335,  -424,  -622,   -79,  -622,   -85,  -289,
  -497,  -622,  -215,  -216,  -231,  -622,  -621,  -285,  -284,  -622,
  -240,  -614,  -614,  -622,  -622,  -588,  -614,  -622,  -301,  -302,
  -546,   -49,  -622,  -622,  -622,  -622,  -608,  -622,  -609,  -514,
  -515,  -622,  -622,  -280,  -622,  -356,  -357,  -622,  -319,  -622,
  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -326,
  -622,  -514,  -515,  -585,  -586,  -451,  -622,  -474,  -622,  -476,
  -622,  -478,  -622,  -622,  -458,  -622,  -622,  -464,  -622,  -622,
  -470,  -622,  -622,  -472,  -622,  -489,  -491,  -492,  -493,  -494,
    -6,  -620,   -23,   -24,   -25,   -26,   -27,  -621,  -622,   -19,
   -20,   -21,  -122,  -622,   -30,   -39,  -267,  -622,  -622,  -266,
   -31,  -197,  -610,  -247,  -248,  -621,  -621,  -598,  -599,  -257,
  -421,  -600,  -601,  -599,  -598,  -257,  -420,  -422,  -600,  -601,
   -37,  -205,   -38,  -622,   -41,   -42,  -195,  -262,   -44,   -45,
   -46,  -610,  -298,  -622,  -622,  -621,  -289,  -622,  -622,  -622,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,
  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,
  -229,  -232,  -233,  -234,  -235,  -610,  -621,  -257,  -598,  -599,
   -54,   -59,  -258,  -417,  -621,  -621,  -610,  -610,  -294,  -253,
  -622,  -261,  -254,  -622,  -259,  -622,  -263,  -593,  -594,   -12,
  -609,   -16,  -610,   -70,  -287,   -86,   -75,  -622,  -610,  -621,
  -622,  -622,   -96,  -622,  -497,  -622,   -82,   -87,  -622,  -622,
  -622,  -622,  -236,  -622,  -437,  -622,  -610,  -612,  -241,  -616,
  -615,  -243,  -616,  -290,  -291,  -589,  -622,  -546,  -406,  -584,
  -584,  -529,  -531,  -531,  -531,  -545,  -547,  -548,  -549,  -550,
  -551,  -552,  -553,  -622,  -555,  -557,  -559,  -564,  -566,  -567,
  -569,  -574,  -576,  -577,  -579,  -580,  -581,  -622,  -621,  -347,
  -348,  -621,  -622,  -622,  -622,  -622,  -432,  -621,  -622,  -622,
  -289,  -313,  -107,  -108,  -622,  -110,  -622,  -280,  -622,  -622,
  -324,  -546,  -328,  -622,  -452,  -475,  -480,  -481,  -483,  -454,
  -477,  -455,  -479,  -456,  -457,  -622,  -460,  -462,  -622,  -463,
  -466,  -467,  -622,  -468,  -469,  -622,  -495,  -622,   -18,  -622,
   -28,  -270,  -622,  -622,  -425,  -622,  -249,  -251,  -622,  -622,
   -60,  -245,  -246,  -418,  -622,  -622,   -62,  -419,  -622,  -622,
  -297,  -598,  -599,  -598,  -599,  -610,  -195,  -622,  -392,  -393,
  -610,  -395,  -410,   -53,  -413,  -621,  -427,  -430,  -244,  -293,
  -621,  -260,  -264,  -622,  -591,  -592,   -15,   -72,  -622,   -78,
   -84,  -610,  -598,  -599,  -621,   -93,   -95,  -622,   -80,  -622,
  -204,  -214,  -610,  -621,  -621,  -283,  -286,  -614,  -404,  -621,
  -621,  -610,  -622,  -527,  -528,  -622,  -622,  -538,  -622,  -541,
  -622,  -543,  -622,  -358,  -622,  -360,  -362,  -369,  -610,  -558,
  -568,  -578,  -582,  -621,  -349,  -621,  -306,  -350,  -351,  -309,
  -622,  -312,  -622,  -610,  -598,  -599,  -602,  -288,  -622,  -107,
  -108,  -109,  -622,  -622,  -621,  -317,  -520,  -521,  -622,  -320,
  -621,  -621,  -546,  -622,  -622,  -610,  -622,  -621,  -459,  -461,
  -465,  -471,  -473,   -10,  -123,  -268,  -622,  -198,  -622,  -613,
  -621,   -33,  -200,   -34,  -201,   -61,   -35,  -203,   -36,  -202,
   -63,  -196,  -622,  -622,  -622,  -622,  -425,  -622,  -584,  -584,
  -374,  -621,  -621,  -621,  -391,  -622,  -610,  -397,  -553,  -561,
  -562,  -572,  -621,  -415,  -414,   -55,  -621,  -621,  -255,  -265,
   -76,   -91,   -88,  -296,  -621,  -354,  -621,  -438,  -621,  -439,
  -440,  -242,  -622,  -622,  -610,  -584,  -565,  -583,  -530,  -531,
  -531,  -556,  -531,  -531,  -575,  -531,  -553,  -570,  -610,  -622,
  -367,  -622,  -554,  -622,  -352,  -622,  -622,  -621,  -621,  -311,
  -622,  -425,  -622,  -107,  -108,  -111,  -610,  -621,  -622,  -523,
  -622,  -622,  -622,  -610,  -525,  -329,  -587,  -482,  -485,  -486,
  -487,  -488,  -622,  -269,   -32,  -199,  -250,  -622,  -237,  -622,
  -372,  -373,  -382,  -376,  -384,  -622,  -387,  -622,  -389,  -394,
  -622,  -622,  -622,  -560,  -622,  -622,  -621,  -622,  -622,   -11,
  -621,  -444,  -355,  -622,  -622,  -442,  -407,  -408,  -405,  -526,
  -622,  -534,  -622,  -536,  -622,  -539,  -622,  -542,  -544,  -359,
  -361,  -365,  -622,  -370,  -303,  -622,  -304,  -622,  -622,  -622,
  -621,  -314,  -425,  -622,  -622,  -321,  -325,  -327,  -524,  -546,
  -484,  -584,  -563,  -375,  -621,  -621,  -621,  -621,  -573,  -621,
  -396,  -610,  -399,  -401,  -402,  -571,  -622,  -289,  -411,  -622,
  -428,  -431,  -443,  -621,   -98,   -99,  -622,  -622,  -106,  -441,
  -531,  -531,  -531,  -531,  -363,  -622,  -368,  -622,  -621,  -307,
  -310,  -264,  -621,  -621,  -318,  -522,  -621,  -621,  -371,  -622,
  -379,  -622,  -381,  -622,  -385,  -622,  -388,  -390,  -398,  -622,
  -288,  -602,   -56,  -437,  -621,  -622,  -622,  -105,  -622,  -532,
  -535,  -537,  -540,  -622,  -366,  -621,  -433,  -434,  -435,  -622,
  -622,  -622,  -621,  -621,  -621,  -621,  -400,  -436,  -610,  -598,
  -599,  -602,  -104,  -531,  -364,  -353,  -315,  -322,  -330,  -622,
  -377,  -380,  -383,  -386,  -425,  -533,  -621,  -378 ]

clist = [
'6,220,213,223,369,338,422,279,279,279,17,262,693,585,445,274,17,535',
'502,130,130,396,125,208,133,133,4,325,9,578,581,224,135,135,9,634,117',
'266,272,275,224,224,224,843,17,304,304,263,548,751,342,343,299,320,346',
'555,526,429,435,419,330,335,814,114,313,313,442,496,792,224,491,726',
'729,674,224,224,316,831,224,351,834,377,130,379,381,384,387,390,393',
'379,741,948,718,113,846,281,281,281,313,130,923,117,920,402,403,404',
'405,487,952,795,671,1,674,671,538,541,2,118,793,545,124,899,17,789,954',
'332,336,224,224,224,224,17,703,704,295,297,615,207,356,618,9,280,280',
'280,662,277,289,290,378,406,824,415,666,667,394,598,408,600,347,665',
'896,629,333,502,830,825,832,664,373,334,605,331,339,354,612,745,370',
'616,326,536,616,976,344,847,345,848,738,279,983,357,414,420,857,599',
'860,948,440,444,430,327,986,359,750,601,341,341,754,674,341,453,423',
'939,794,796,951,546,1026,17,224,224,224,698,439,400,224,224,224,224',
'224,224,340,486,954,802,1014,494,806,495,855,807,920,17,279,838,1016',
'890,671,671,279,655,730,279,732,831,493,701,679,341,341,341,341,818',
'555,903,688,375,376,380,786,383,386,423,1034,389,392,224,867,756,501',
'501,757,224,834,395,224,858,829,831,523,520,944,826,942,603,811,,,429',
'435,274,,,17,,17,,530,,304,17,,,,681,,,555,,,418,511,,117,805,524,304',
'418,313,582,583,281,,527,,17,1035,588,,516,281,945,931,941,946,313,789',
'851,,789,510,789,1017,224,224,,,448,449,450,451,,,,,684,596,831,596',
'970,,,880,881,,684,,280,117,298,509,492,733,,,313,280,313,987,,497,602',
'16,,,295,512,,16,,295,518,635,,,,6,,808,909,759,,,759,,642,17,130,810',
',628,647,133,,501,501,16,,641,,135,279,627,684,9,584,,,640,430,,,861',
'862,646,775,445,674,1022,,,780,,789,423,789,,789,,789,,863,,439,224',
'657,,,555,,932,,,642,,,,,,,,821,1027,341,341,658,641,671,,,,,,658,658',
'279,663,,,,791,,,789,16,,430,,808,,,,,16,,,430,,423,17,,,,,,988,304',
',224,,439,,,527,304,,,676,930,856,439,527,224,,819,313,,,833,933,835',
',413,313,,,799,,,,,,,279,670,,,,,,,,,,430,,298,,,,,,,,,,423,17,684,',
'17,963,,,,,224,,439,16,,,,697,,,804,,224,,,,224,978,727,727,,,,771,773',
',,16,,776,778,,,444,746,,,,,635,328,,130,298,797,764,1044,133,298,,',
'224,224,1018,803,135,,224,224,555,,224,,,,635,,,658,,,,,501,642,,692',
'647,,,,,1020,1021,,797,,641,16,865,16,304,,,,16,815,820,527,,,,304,',
'770,,,790,,812,313,,17,17,,,,635,,,16,313,,,279,,815,852,815,947,,949',
',430,,,,,,,,,749,,,,755,423,,827,,224,827,874,971,439,972,224,973,,',
',,17,17,,,130,,,17,,,501,,,,,,799,797,224,799,,859,799,,799,,864,,,',
',883,883,883,,,,452,16,,1028,707,709,711,,418,,,,893,,,17,,901,,17,17',
'905,,,,,,,,17,,313,18,1023,925,1024,,1025,18,,635,,,29,,,850,934,,29',
',,1033,,684,498,,,224,,17,17,,,29,,18,306,306,,17,224,,29,29,29,513',
'29,,,,341,,1046,,,,,727,799,,799,,799,,799,935,,,,,353,29,,16,955,,29',
'29,17,,29,,17,,,,966,,,,,,,313,723,827,,725,790,,,790,,790,998,313,',
',799,,,,17,18,,,883,883,883,883,,883,18,,29,1005,,,,29,29,29,29,29,',
',562,,439,985,,16,,,16,17,,,,,,,,279,815,,,341,,,17,,,,430,17,,,17,17',
'341,,,,,,423,,,,,635,,,,,224,815,439,,,,,,883,883,883,883,,650,,,,,',
'790,,790,18,790,,790,,,,822,823,,883,29,29,29,29,,,,29,29,29,29,29,29',
'18,,,,,,,,,,,29,668,669,,,,,911,913,,915,917,790,918,,,,677,,16,16,',
',680,,,19,,,,872,,19,,29,,,,,,29,696,,29,,,,,,,18,,18,,,,306,18,,,19',
'29,,29,,,,,29,,16,16,,306,,895,,16,,897,898,,18,,,,,,,902,,,,29,,355',
',,,,562,,,,,,,,,,,29,29,597,,597,713,,,,927,928,16,,,,16,16,,,,,,,,',
'16,,19,,,884,886,888,,,,19,1009,1010,1011,1012,,,562,,,,,,,,,18,,,,16',
'16,959,41,,,962,29,,41,16,,,,,,,,,,,,,,,,,,,,813,,,,,,982,41,302,302',
',,,,1045,,798,,,16,,,,16,,29,842,,,,,,,,,,19,,,1003,,,349,,443,371,',
',,,,,,16,1015,,,,,1019,19,,562,866,562,,,,,18,713,,,840,,,306,,,,29',
',,,306,41,16,,,29,,,,,41,,,990,992,994,996,16,997,29,,,16,,562,16,16',
',,,,,,,,,,19,,19,,,,,19,,,,908,,,,,18,,,18,,,,,,919,,29,,,29,,19,,,',
'29,,,,,,,,,,,,29,,938,,29,,1040,1041,1042,1043,,41,,,,,,,,,,,,,,,713',
',713,,1047,,,,,41,,,,29,29,,,,,29,29,,,29,,,,,,,,,,,,,,,,19,,,306,798',
',,798,,,,,,,306,,,,,,,,,,18,18,,,,,,41,562,41,,29,29,302,41,,,,,974',
'713,,,,,,,,,,302,,,,,,,562,,41,,,,,,,,,,,29,18,18,,42,,29,871,18,,42',
',29,29,,,,,,29,371,,371,713,,713,,,,19,29,,,,,,,798,42,303,303,,,,,',
',,,,597,,,18,,,,18,18,,,713,,,29,,,18,29,29,41,,,350,,,372,,29,,,,,',
',,,,,,,,,,,,,19,18,18,19,,,,,,,29,18,29,29,,,,,,42,,,29,29,,,,,42,,',
',,,,,,,,,,,,,,,597,,,,18,,,,18,,,,968,,,29,,,,29,,,,,443,,,,,,41,,,',
',,,302,18,,,,,,,302,,,,29,,,,,,,,,,,,,,,,,,,42,,,18,,,,19,19,,,,,,29',
',,,18,,,,,18,42,,18,18,,29,41,,,41,29,,,29,29,,,,,,,,,,,,,,,,,29,,,19',
'19,,,,,,19,,,,,,,,,,,,,,,,,,,,42,,42,,,,303,42,,,,,,,,,,,,,,,,303,,19',
',,,19,19,,42,,,,,,,19,,,,,,302,,,,,,,,,,,302,,,,,,,372,,372,41,41,,',
'19,19,,,,,,,,,19,,,,,,,,,,,,,,,,,,337,,,,,,,,,,,,,,,42,,,,41,41,19,',
',,19,41,,,969,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,,,,,,371,,,41,,,,41',
'41,,,,,,,,,41,,,19,,,,,,,,,,,,,,,19,,,,,19,,,19,19,,,,41,41,42,,,,,',
',303,41,,,,,,,303,,,,,,,,,,,,,,416,,,,,,,447,,,,,,,371,,,,41,,,231,41',
',,,964,,,,278,278,278,,,,,,,42,,,42,322,323,324,,,,,,,41,,,,,,,,278',
'278,,,,,,,,,,,,504,,506,,507,508,,,,,,,41,,,,,,,,,,,,,,,41,,,,,41,,',
'41,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,303,,,,,,,,,,,303,,,,,,,,,,42,42',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,631,278,421,278,42,42,',
'441,446,,,42,,,,,,,,,,,,231,,,460,461,462,463,464,465,466,467,468,469',
'470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,,372',
',,42,,278,,42,42,,,278,,,278,,,42,,,,278,,278,,278,278,,,,672,,,337',
',675,,,,,,,,,,,,,42,42,,,,,,,,,42,,,,,532,,,,,,672,,,337,,,,,,,,,,,',
',,,,,,,,,372,,,719,42,,,,42,,,,965,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,',
',,,,,,,,,,,,,,,,,,278,,,,,,,765,,42,,672,337,,,,,,,,,,,,42,,,,,42,,',
'42,42,,,,,278,,441,656,421,,,,,,809,,,,,,,,,,,,,,,,,,,,,817,,,,,,,,',
',,,,,278,,,278,837,278,,,,,,,,,,,,,,278,,,,,447,,,,690,691,,,,,,,,,',
'278,,,278,,,,,,,,,,,,,,,,873,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,278,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,767,,,278,278,772,774,,',
',,777,779,,,656,781,,,,,,,,,,,,,,,,,,,337,,,,,278,,,,,,,,,,,,,,,,,,',
',,278,,,,,,,,,,,,,,,,,,278,,,,,,,,,981,,,,,,,,,,,278,,,,,,,,,,,,278',
',,,,,,,,,,,,,,,,,,,,,278,,875,,,,,,,,,,,,,,772,774,779,777,,878,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,278,875,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,278' ]
        racc_goto_table = arr = ::Array.new(3118, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,34,27,22,60,89,25,36,36,36,24,153,13,95,20,74,24,10,76,61,61,60,17',
'17,64,64,2,34,9,92,92,24,65,65,9,26,98,41,41,41,24,24,24,93,24,24,24',
'39,152,99,19,19,53,67,19,183,55,40,40,30,6,6,14,8,68,68,30,25,142,24',
'42,94,94,197,24,24,54,187,24,24,192,6,61,6,6,6,6,6,6,6,58,193,132,5',
'14,73,73,73,68,61,133,98,130,19,19,19,19,40,147,145,77,1,197,77,72,72',
'3,7,143,72,11,15,24,136,148,73,73,24,24,24,24,24,137,137,49,50,173,18',
'21,173,9,71,71,71,43,48,48,48,170,9,145,31,43,43,170,59,33,59,5,45,46',
'66,70,76,143,136,143,75,87,88,174,71,91,96,174,97,100,174,101,102,174',
'133,103,104,105,106,107,36,108,109,22,22,110,111,112,193,22,22,74,32',
'113,114,115,116,32,32,117,197,32,27,6,118,134,140,146,149,147,24,24',
'24,24,150,61,7,24,24,24,24,24,24,151,154,148,155,133,158,159,160,58',
'161,130,24,36,132,162,145,77,77,36,25,95,36,163,187,74,152,55,32,32',
'32,32,164,183,165,55,168,169,171,26,172,175,6,133,176,177,24,178,179',
'6,6,180,24,192,181,24,182,186,187,34,27,142,189,190,196,26,,,40,40,74',
',,24,,24,,27,,24,24,,,,25,,,183,,,71,9,,98,43,67,24,71,68,19,19,73,',
'53,,24,93,27,,54,73,143,94,136,143,68,136,26,,136,8,136,14,24,24,,,32',
'32,32,32,,,,,40,24,187,24,143,,,137,137,,40,,71,98,12,5,48,25,,,68,71',
'68,99,,48,39,23,,,49,50,,23,,49,50,34,,,,6,,76,137,174,,,174,,74,24',
'61,55,,17,74,64,,6,6,23,,6,,65,36,2,40,9,5,,,41,74,,,10,10,41,42,20',
'197,143,,,42,,136,6,136,,136,,136,,152,,61,24,34,,,183,,26,,,74,,,,',
',,,72,13,32,32,6,6,77,,,,,,6,6,36,41,,,,141,,,136,23,,74,,76,,,,,23',
',,74,,6,24,,,,,,137,24,,24,,61,,,53,24,,,9,92,25,61,53,24,,30,68,,,141',
'10,141,,12,68,,,188,,,,,,,36,73,,,,,,,,,,74,,12,,,,,,,,,,6,24,40,,24',
'92,,,,,24,,61,23,,,,73,,,89,,24,,,,24,92,98,98,,,,22,22,,,23,,22,22',
',,22,98,,,,,34,51,,61,12,34,17,26,64,12,,,24,24,95,153,65,,24,24,183',
',24,,,,34,,,6,,,,,6,74,,32,74,,,,,10,10,,34,,6,23,60,23,24,,,,23,6,6',
'53,,,,24,,73,,,138,,53,68,,24,24,,,,34,,,23,68,,,36,,6,19,6,141,,141',
',74,,,,,,,,,32,,,,32,6,,138,,24,138,22,141,61,141,24,141,,,,,24,24,',
',61,,,24,,,6,,,,,,188,34,24,188,,98,188,,188,,98,,,,,6,6,6,,,,51,23',
',25,185,185,185,,71,,,,24,,,24,,6,,24,24,6,,,,,,,,24,,68,28,141,19,141',
',141,28,,34,,,44,,,71,19,,44,,,141,,40,51,,,24,,24,24,,,44,,28,28,28',
',24,24,,44,44,44,51,44,,,,32,,141,,,,,98,188,,188,,188,,188,98,,,,,28',
'44,,23,24,,44,44,24,,44,,24,,,,24,,,,,,,68,12,138,,12,138,,,138,,138',
'34,68,,,188,,,,24,28,,,6,6,6,6,,6,28,,44,27,,,,44,44,44,44,44,,,131',
',61,98,,23,,,23,24,,,,,,,,36,6,,,32,,,24,,,,74,24,,,24,24,32,,,,,,6',
',,,,34,,,,,24,6,61,,,,,,6,6,6,6,,51,,,,,,138,,138,28,138,,138,,,,12',
'12,,6,44,44,44,44,,,,44,44,44,44,44,44,28,,,,,,,,,,,44,51,51,,,,,185',
'185,,185,185,138,185,,,,51,,23,23,,,51,,,29,,,,12,,29,,44,,,,,,44,51',
',44,,,,,,,28,,28,,,,28,28,,,29,44,,44,,,,,44,,23,23,,28,,12,,23,,12',
'12,,28,,,,,,,12,,,,44,,29,,,,,131,,,,,,,,,,,44,44,28,,28,131,,,,12,12',
'23,,,,23,23,,,,,,,,,23,,29,,,139,139,139,,,,29,185,185,185,185,,,131',
',,,,,,,,28,,,,23,23,12,56,,,12,44,,56,23,,,,,,,,,,,,,,,,,,,,51,,,,,',
'12,56,56,56,,,,,185,,131,,,23,,,,23,,44,51,,,,,,,,,,29,,,12,,,56,,29',
'56,,,,,,,,23,12,,,,,12,29,,131,51,131,,,,,28,131,,,131,,,28,,,,44,,',
',28,56,23,,,44,,,,,56,,,139,139,139,139,23,139,44,,,23,,131,23,23,,',
',,,,,,,,29,,29,,,,,29,,,,51,,,,,28,,,28,,,,,,51,,44,,,44,,29,,,,44,',
',,,,,,,,,,44,,51,,44,,139,139,139,139,,56,,,,,,,,,,,,,,,131,,131,,139',
',,,,56,,,,44,44,,,,,44,44,,,44,,,,,,,,,,,,,,,,29,,,28,131,,,131,,,,',
',,28,,,,,,,,,,28,28,,,,,,56,131,56,,44,44,56,56,,,,,131,131,,,,,,,,',
',56,,,,,,,131,,56,,,,,,,,,,,44,28,28,,57,,44,28,28,,57,,44,44,,,,,,44',
'56,,56,131,,131,,,,29,44,,,,,,,131,57,57,57,,,,,,,,,,28,,,28,,,,28,28',
',,131,,,44,,,28,44,44,56,,,57,,,57,,44,,,,,,,,,,,,,,,,,,,29,28,28,29',
',,,,,,44,28,44,44,,,,,,57,,,44,44,,,,,57,,,,,,,,,,,,,,,,,,28,,,,28,',
',,28,,,,28,,,44,,,,44,,,,,29,,,,,,56,,,,,,,56,28,,,,,,,56,,,,44,,,,',
',,,,,,,,,,,,,,57,,,28,,,,29,29,,,,,,44,,,,28,,,,,28,57,,28,28,,44,56',
',,56,44,,,44,44,,,,,,,,,,,,,,,,,44,,,29,29,,,,,,29,,,,,,,,,,,,,,,,,',
',,57,,57,,,,57,57,,,,,,,,,,,,,,,,57,,29,,,,29,29,,57,,,,,,,29,,,,,,56',
',,,,,,,,,,56,,,,,,,57,,57,56,56,,,29,29,,,,,,,,,29,,,,,,,,,,,,,,,,,',
'69,,,,,,,,,,,,,,,57,,,,56,56,29,,,,29,56,,,29,,,,,,,,,,,,,,,,,,,,,,',
',,,29,,,,,,,,,,,,,56,,,56,,,,56,56,,,,,,,,,56,,,29,,,,,,,,,,,,,,,29',
',,,,29,,,29,29,,,,56,56,57,,,,,,,57,56,,,,,,,57,,,,,,,,,,,,,,69,,,,',
',,69,,,,,,,56,,,,56,,,35,56,,,,56,,,,35,35,35,,,,,,,57,,,57,35,35,35',
',,,,,,56,,,,,,,,35,35,,,,,,,,,,,,69,,69,,69,69,,,,,,,56,,,,,,,,,,,,',
',,56,,,,,56,,,56,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,,,,,,,,57,,,',
',,,,,,57,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,35,35,35',
'57,57,,35,35,,,57,,,,,,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,,57,,,57,,35,,57,57,,,35,',
',35,,,57,,,,35,,35,,35,35,,,,69,,,69,,69,,,,,,,,,,,,,57,57,,,,,,,,,57',
',,,,35,,,,,,69,,,69,,,,,,,,,,,,,,,,,,,,,57,,,69,57,,,,57,,,,57,,,,,',
',,,,,,,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,69,,57,,69,69',
',,,,,,,,,,,57,,,,,57,,,57,57,,,,,35,,35,35,35,,,,,,69,,,,,,,,,,,,,,',
',,,,,,69,,,,,,,,,,,,,,35,,,35,69,35,,,,,,,,,,,,,,35,,,,,69,,,,35,35',
',,,,,,,,,35,,,35,,,,,,,,,,,,,,,,69,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,35,35,35,35,,,,',
'35,35,,,35,35,,,,,,,,,,,,,,,,,,,69,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,',
',,,,,,,,,,,,,,35,,,,,,,,,69,,,,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,',
',,,,,,,,35,,35,,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3118, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   111,    24,   116,   nil,    88,    -2,   109,    58,    26,
  -309,   110,   342,  -522,  -631,  -693,   nil,    11,   125,   -16,
  -203,    67,   -20,   389,     8,  -206,  -387,   -15,   825,  1093,
  -151,   -59,   138,    31,   -21,  2113,   -25,   nil,   nil,    20,
  -156,     8,  -196,  -342,   836,  -331,  -645,   nil,   113,    98,
    99,   574,   nil,    15,    38,  -261,  1237,  1576,  -504,  -202,
   -70,     8,   nil,   nil,    13,    21,  -251,     9,    27,  1905,
   100,   109,  -217,    63,   -15,  -320,  -263,  -390,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    94,   106,   -59,
   nil,   107,  -313,  -680,  -511,  -334,   102,  -423,    31,  -552,
   102,   118,  -148,   114,  -543,   115,  -544,  -405,  -743,   117,
  -553,  -165,  -555,  -735,   128,  -398,  -166,  -396,  -654,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -737,   622,  -471,  -741,  -448,   nil,  -537,  -417,    42,   419,
  -447,  -161,  -592,  -542,   nil,  -551,  -677,  -783,  -767,  -125,
  -325,   165,  -292,   -14,   -30,  -429,   nil,   nil,   -35,  -430,
   -34,  -428,  -738,  -334,  -433,  -555,   nil,   nil,   185,   183,
    63,   181,   182,  -247,  -206,   182,   184,   184,  -480,  -330,
  -328,   192,  -462,  -285,   nil,   247,  -420,  -629,  -105,  -411,
  -587,   nil,  -628,  -794,   nil,   nil,   -81,  -430 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   292,     7,   348,   293,
   nil,   nil,   534,   nil,   844,   nil,   291,   nil,   nil,   nil,
    14,    15,    21,   230,   321,   nil,   nil,   743,   228,   229,
   nil,   nil,    20,   nil,   329,    24,    25,    26,    27,   nil,
   687,   nil,   nil,   nil,   310,   nil,   nil,    28,   424,    35,
   nil,   nil,    37,    40,    39,   nil,   225,   226,   595,   nil,
   132,   432,   131,   134,    78,    79,   nil,    93,    49,   284,
   nil,   425,   nil,   426,   437,   643,   499,   282,   267,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   268,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   579,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   715,   836,   nil,   716,   943,   788,   550,   nil,   551,   nil,
   nil,   552,   nil,   554,   659,   nil,   nil,   nil,   560,   nil,
   nil,   nil,   753,   nil,   nil,   nil,   436,   269,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,
   nil,   nil,   nil,   nil,   610,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   828,   549,   nil,   553,   564,   566,   567,
   800,   570,   571,   801,   574,   577,   nil,   286 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 147, :_reduce_1,
  2, 145, :_reduce_2,
  2, 146, :_reduce_3,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 148, :_reduce_6,
  2, 148, :_reduce_none,
  1, 151, :_reduce_8,
  0, 155, :_reduce_9,
  5, 151, :_reduce_10,
  4, 154, :_reduce_11,
  2, 156, :_reduce_12,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  3, 160, :_reduce_15,
  2, 160, :_reduce_16,
  0, 177, :_reduce_17,
  4, 153, :_reduce_18,
  3, 153, :_reduce_19,
  3, 153, :_reduce_20,
  3, 153, :_reduce_21,
  2, 153, :_reduce_22,
  3, 153, :_reduce_23,
  3, 153, :_reduce_24,
  3, 153, :_reduce_25,
  3, 153, :_reduce_26,
  3, 153, :_reduce_27,
  4, 153, :_reduce_28,
  1, 153, :_reduce_none,
  3, 153, :_reduce_30,
  3, 153, :_reduce_31,
  6, 153, :_reduce_32,
  5, 153, :_reduce_33,
  5, 153, :_reduce_34,
  5, 153, :_reduce_35,
  5, 153, :_reduce_36,
  3, 153, :_reduce_37,
  3, 153, :_reduce_38,
  3, 153, :_reduce_39,
  1, 153, :_reduce_none,
  3, 164, :_reduce_41,
  3, 164, :_reduce_42,
  1, 176, :_reduce_none,
  3, 176, :_reduce_44,
  3, 176, :_reduce_45,
  3, 176, :_reduce_46,
  2, 176, :_reduce_47,
  1, 176, :_reduce_none,
  1, 163, :_reduce_49,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_53,
  0, 189, :_reduce_54,
  0, 190, :_reduce_55,
  6, 186, :_reduce_56,
  1, 188, :_reduce_57,
  2, 180, :_reduce_58,
  3, 180, :_reduce_59,
  4, 180, :_reduce_60,
  5, 180, :_reduce_61,
  4, 180, :_reduce_62,
  5, 180, :_reduce_63,
  2, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  1, 165, :_reduce_none,
  3, 165, :_reduce_70,
  1, 194, :_reduce_none,
  3, 194, :_reduce_72,
  1, 193, :_reduce_73,
  2, 193, :_reduce_74,
  3, 193, :_reduce_75,
  5, 193, :_reduce_76,
  2, 193, :_reduce_77,
  4, 193, :_reduce_78,
  2, 193, :_reduce_79,
  4, 193, :_reduce_80,
  1, 193, :_reduce_81,
  3, 193, :_reduce_82,
  1, 197, :_reduce_none,
  3, 197, :_reduce_84,
  2, 196, :_reduce_85,
  3, 196, :_reduce_86,
  1, 199, :_reduce_87,
  3, 199, :_reduce_88,
  1, 198, :_reduce_89,
  1, 198, :_reduce_90,
  4, 198, :_reduce_91,
  3, 198, :_reduce_92,
  3, 198, :_reduce_93,
  3, 198, :_reduce_94,
  3, 198, :_reduce_95,
  2, 198, :_reduce_96,
  1, 198, :_reduce_97,
  1, 173, :_reduce_98,
  1, 173, :_reduce_99,
  4, 173, :_reduce_100,
  3, 173, :_reduce_101,
  3, 173, :_reduce_102,
  3, 173, :_reduce_103,
  3, 173, :_reduce_104,
  2, 173, :_reduce_105,
  1, 173, :_reduce_106,
  1, 202, :_reduce_107,
  1, 202, :_reduce_none,
  2, 203, :_reduce_109,
  1, 203, :_reduce_110,
  3, 203, :_reduce_111,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_115,
  1, 204, :_reduce_116,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 161, :_reduce_119,
  1, 161, :_reduce_none,
  1, 162, :_reduce_121,
  0, 210, :_reduce_122,
  4, 162, :_reduce_123,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  3, 179, :_reduce_195,
  5, 179, :_reduce_196,
  3, 179, :_reduce_197,
  5, 179, :_reduce_198,
  6, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  5, 179, :_reduce_202,
  5, 179, :_reduce_203,
  4, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  3, 179, :_reduce_213,
  4, 179, :_reduce_214,
  2, 179, :_reduce_215,
  2, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  3, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  3, 179, :_reduce_229,
  2, 179, :_reduce_230,
  2, 179, :_reduce_231,
  3, 179, :_reduce_232,
  3, 179, :_reduce_233,
  3, 179, :_reduce_234,
  3, 179, :_reduce_235,
  3, 179, :_reduce_236,
  6, 179, :_reduce_237,
  1, 179, :_reduce_none,
  1, 213, :_reduce_239,
  1, 214, :_reduce_none,
  2, 214, :_reduce_241,
  4, 214, :_reduce_242,
  2, 214, :_reduce_243,
  3, 218, :_reduce_244,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 169, :_reduce_247,
  1, 169, :_reduce_248,
  2, 169, :_reduce_249,
  4, 169, :_reduce_250,
  2, 169, :_reduce_251,
  1, 192, :_reduce_252,
  2, 192, :_reduce_253,
  2, 192, :_reduce_254,
  4, 192, :_reduce_255,
  1, 192, :_reduce_256,
  0, 222, :_reduce_257,
  2, 185, :_reduce_258,
  2, 221, :_reduce_259,
  2, 220, :_reduce_260,
  1, 220, :_reduce_none,
  1, 215, :_reduce_262,
  2, 215, :_reduce_263,
  3, 215, :_reduce_264,
  4, 215, :_reduce_265,
  1, 175, :_reduce_266,
  1, 175, :_reduce_267,
  3, 174, :_reduce_268,
  4, 174, :_reduce_269,
  2, 174, :_reduce_270,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_281,
  0, 245, :_reduce_282,
  4, 212, :_reduce_283,
  2, 212, :_reduce_284,
  0, 246, :_reduce_285,
  4, 212, :_reduce_286,
  3, 212, :_reduce_287,
  3, 212, :_reduce_288,
  2, 212, :_reduce_289,
  3, 212, :_reduce_290,
  3, 212, :_reduce_291,
  1, 212, :_reduce_292,
  4, 212, :_reduce_293,
  3, 212, :_reduce_294,
  1, 212, :_reduce_295,
  5, 212, :_reduce_296,
  4, 212, :_reduce_297,
  3, 212, :_reduce_298,
  2, 212, :_reduce_299,
  1, 212, :_reduce_none,
  2, 212, :_reduce_301,
  2, 212, :_reduce_302,
  6, 212, :_reduce_303,
  6, 212, :_reduce_304,
  0, 247, :_reduce_305,
  0, 248, :_reduce_306,
  7, 212, :_reduce_307,
  0, 249, :_reduce_308,
  0, 250, :_reduce_309,
  7, 212, :_reduce_310,
  5, 212, :_reduce_311,
  4, 212, :_reduce_312,
  0, 251, :_reduce_313,
  0, 252, :_reduce_314,
  9, 212, :_reduce_315,
  0, 253, :_reduce_316,
  0, 254, :_reduce_317,
  7, 212, :_reduce_318,
  0, 255, :_reduce_319,
  0, 256, :_reduce_320,
  0, 257, :_reduce_321,
  9, 212, :_reduce_322,
  0, 258, :_reduce_323,
  0, 259, :_reduce_324,
  6, 212, :_reduce_325,
  0, 260, :_reduce_326,
  6, 212, :_reduce_327,
  0, 261, :_reduce_328,
  0, 262, :_reduce_329,
  9, 212, :_reduce_330,
  1, 212, :_reduce_331,
  1, 212, :_reduce_332,
  1, 212, :_reduce_333,
  1, 212, :_reduce_334,
  1, 168, :_reduce_335,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  2, 236, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  1, 237, :_reduce_none,
  5, 237, :_reduce_353,
  1, 158, :_reduce_none,
  2, 158, :_reduce_355,
  1, 240, :_reduce_none,
  1, 240, :_reduce_357,
  1, 274, :_reduce_none,
  3, 274, :_reduce_359,
  1, 277, :_reduce_360,
  3, 277, :_reduce_361,
  1, 276, :_reduce_362,
  4, 276, :_reduce_363,
  6, 276, :_reduce_364,
  3, 276, :_reduce_365,
  5, 276, :_reduce_366,
  2, 276, :_reduce_367,
  4, 276, :_reduce_368,
  1, 276, :_reduce_369,
  3, 276, :_reduce_370,
  4, 278, :_reduce_371,
  2, 278, :_reduce_372,
  2, 278, :_reduce_373,
  1, 278, :_reduce_374,
  2, 283, :_reduce_375,
  1, 283, :_reduce_none,
  6, 284, :_reduce_377,
  8, 284, :_reduce_378,
  4, 284, :_reduce_379,
  6, 284, :_reduce_380,
  4, 284, :_reduce_381,
  2, 284, :_reduce_382,
  6, 284, :_reduce_383,
  2, 284, :_reduce_384,
  4, 284, :_reduce_385,
  6, 284, :_reduce_386,
  2, 284, :_reduce_387,
  4, 284, :_reduce_388,
  2, 284, :_reduce_389,
  4, 284, :_reduce_390,
  1, 284, :_reduce_391,
  1, 187, :_reduce_392,
  1, 187, :_reduce_none,
  3, 288, :_reduce_394,
  1, 288, :_reduce_395,
  4, 288, :_reduce_396,
  1, 289, :_reduce_none,
  4, 289, :_reduce_398,
  1, 290, :_reduce_399,
  3, 290, :_reduce_400,
  1, 291, :_reduce_401,
  1, 291, :_reduce_none,
  0, 295, :_reduce_403,
  3, 235, :_reduce_404,
  4, 293, :_reduce_405,
  1, 293, :_reduce_406,
  3, 294, :_reduce_407,
  3, 294, :_reduce_408,
  0, 298, :_reduce_409,
  0, 299, :_reduce_410,
  6, 297, :_reduce_411,
  2, 182, :_reduce_412,
  4, 182, :_reduce_413,
  5, 182, :_reduce_414,
  5, 182, :_reduce_415,
  0, 301, :_reduce_416,
  3, 234, :_reduce_417,
  4, 234, :_reduce_418,
  4, 234, :_reduce_419,
  3, 234, :_reduce_420,
  3, 234, :_reduce_421,
  3, 234, :_reduce_422,
  2, 234, :_reduce_423,
  1, 234, :_reduce_424,
  4, 234, :_reduce_425,
  0, 302, :_reduce_426,
  0, 303, :_reduce_427,
  6, 233, :_reduce_428,
  0, 304, :_reduce_429,
  0, 305, :_reduce_430,
  6, 233, :_reduce_431,
  0, 307, :_reduce_432,
  6, 239, :_reduce_433,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  6, 157, :_reduce_436,
  0, 157, :_reduce_437,
  1, 308, :_reduce_438,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  2, 309, :_reduce_441,
  1, 309, :_reduce_none,
  2, 159, :_reduce_443,
  1, 159, :_reduce_none,
  1, 223, :_reduce_445,
  1, 223, :_reduce_446,
  1, 223, :_reduce_none,
  1, 224, :_reduce_448,
  1, 311, :_reduce_449,
  1, 311, :_reduce_none,
  2, 311, :_reduce_451,
  3, 312, :_reduce_452,
  1, 312, :_reduce_453,
  3, 225, :_reduce_454,
  3, 226, :_reduce_455,
  3, 227, :_reduce_456,
  3, 227, :_reduce_457,
  1, 316, :_reduce_458,
  3, 316, :_reduce_459,
  1, 317, :_reduce_none,
  2, 317, :_reduce_461,
  3, 229, :_reduce_462,
  3, 229, :_reduce_463,
  1, 319, :_reduce_464,
  3, 319, :_reduce_465,
  3, 228, :_reduce_466,
  3, 228, :_reduce_467,
  3, 230, :_reduce_468,
  3, 230, :_reduce_469,
  1, 320, :_reduce_470,
  3, 320, :_reduce_471,
  1, 321, :_reduce_472,
  3, 321, :_reduce_473,
  1, 313, :_reduce_474,
  2, 313, :_reduce_475,
  1, 314, :_reduce_476,
  2, 314, :_reduce_477,
  1, 315, :_reduce_478,
  2, 315, :_reduce_479,
  1, 318, :_reduce_480,
  0, 323, :_reduce_481,
  3, 318, :_reduce_482,
  0, 324, :_reduce_483,
  4, 318, :_reduce_484,
  1, 322, :_reduce_485,
  1, 322, :_reduce_486,
  1, 322, :_reduce_487,
  1, 322, :_reduce_none,
  2, 208, :_reduce_489,
  1, 208, :_reduce_490,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  3, 209, :_reduce_495,
  1, 310, :_reduce_none,
  2, 310, :_reduce_497,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_507,
  1, 201, :_reduce_508,
  1, 201, :_reduce_509,
  1, 201, :_reduce_510,
  1, 201, :_reduce_511,
  1, 201, :_reduce_512,
  1, 201, :_reduce_513,
  1, 231, :_reduce_514,
  1, 231, :_reduce_515,
  1, 167, :_reduce_516,
  1, 167, :_reduce_517,
  1, 172, :_reduce_518,
  1, 172, :_reduce_519,
  1, 241, :_reduce_520,
  0, 326, :_reduce_521,
  4, 241, :_reduce_522,
  2, 241, :_reduce_523,
  3, 243, :_reduce_524,
  2, 243, :_reduce_525,
  4, 327, :_reduce_526,
  2, 327, :_reduce_527,
  2, 327, :_reduce_528,
  1, 327, :_reduce_none,
  2, 329, :_reduce_530,
  0, 329, :_reduce_531,
  6, 296, :_reduce_532,
  8, 296, :_reduce_533,
  4, 296, :_reduce_534,
  6, 296, :_reduce_535,
  4, 296, :_reduce_536,
  6, 296, :_reduce_537,
  2, 296, :_reduce_538,
  4, 296, :_reduce_539,
  6, 296, :_reduce_540,
  2, 296, :_reduce_541,
  4, 296, :_reduce_542,
  2, 296, :_reduce_543,
  4, 296, :_reduce_544,
  1, 296, :_reduce_545,
  0, 296, :_reduce_546,
  1, 292, :_reduce_547,
  1, 292, :_reduce_548,
  1, 292, :_reduce_549,
  1, 292, :_reduce_550,
  1, 275, :_reduce_none,
  1, 275, :_reduce_552,
  1, 331, :_reduce_none,
  3, 331, :_reduce_554,
  1, 285, :_reduce_555,
  3, 285, :_reduce_556,
  1, 332, :_reduce_none,
  2, 333, :_reduce_558,
  1, 333, :_reduce_559,
  2, 334, :_reduce_560,
  1, 334, :_reduce_561,
  1, 279, :_reduce_none,
  3, 279, :_reduce_563,
  1, 328, :_reduce_none,
  3, 328, :_reduce_565,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 280, :_reduce_568,
  1, 280, :_reduce_569,
  3, 336, :_reduce_570,
  3, 337, :_reduce_571,
  1, 286, :_reduce_572,
  3, 286, :_reduce_573,
  1, 330, :_reduce_574,
  3, 330, :_reduce_575,
  1, 338, :_reduce_none,
  1, 338, :_reduce_none,
  2, 287, :_reduce_578,
  1, 287, :_reduce_579,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 282, :_reduce_582,
  2, 281, :_reduce_583,
  0, 281, :_reduce_584,
  1, 244, :_reduce_none,
  0, 340, :_reduce_586,
  4, 244, :_reduce_587,
  1, 232, :_reduce_588,
  2, 232, :_reduce_589,
  1, 217, :_reduce_none,
  3, 217, :_reduce_591,
  3, 341, :_reduce_592,
  2, 341, :_reduce_593,
  2, 341, :_reduce_594,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 171, :_reduce_none,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 195, :_reduce_none,
  2, 170, :_reduce_none,
  0, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 242, :_reduce_617,
  1, 242, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_620,
  0, 150, :_reduce_621 ]

racc_reduce_n = 622

racc_shift_n = 1048

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tEQL => 142,
  :tLOWEST => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_298(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 300 omitted

def _reduce_301(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_362(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_367(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_369(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_370(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
 result = 0 
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 402 omitted

def _reduce_403(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_404(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_411(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_414(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_426(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_427(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_428(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_437(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_438(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_449(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_475(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_481(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_482(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_484(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_485(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_486(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

def _reduce_507(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_508(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_509(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_511(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_513(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_514(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_518(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_519(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_520(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_521(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_523(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_525(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_526(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_555(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_556(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 557 omitted

def _reduce_558(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_559(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_560(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_561(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 562 omitted

def _reduce_563(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 564 omitted

def _reduce_565(val, _values, result)
                      result = args val
                    
    result
end

# reduce 566 omitted

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_569(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_570(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_571(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_572(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_574(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 576 omitted

# reduce 577 omitted

def _reduce_578(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_579(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 580 omitted

# reduce 581 omitted

def _reduce_582(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_583(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_584(val, _values, result)
                      result = nil
                    
    result
end

# reduce 585 omitted

def _reduce_586(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_587(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_588(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_589(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 590 omitted

def _reduce_591(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_592(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 595 omitted

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

def _reduce_617(val, _values, result)
 yyerrok 
    result
end

# reduce 618 omitted

# reduce 619 omitted

def _reduce_620(val, _values, result)
 yyerrok 
    result
end

def _reduce_621(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby21Parser
