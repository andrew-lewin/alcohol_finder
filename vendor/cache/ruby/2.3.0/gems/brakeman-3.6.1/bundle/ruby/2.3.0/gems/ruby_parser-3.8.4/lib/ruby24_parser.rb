#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby24Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-502,8,72,73,74,12,60,-502,-502,-502,66,67,-502,-502,-502,70,-502,68',
'69,71,33,34,75,76,-502,-98,-502,-502,-502,32,31,30,104,103,105,106,-502',
'-502,22,-502,-502,-502,-502,-502,11,48,10,13,108,107,109,98,59,100,99',
'101,-92,102,110,111,3,94,95,755,45,46,44,-502,-502,-502,-502,-502,-502',
'-502,-502,-502,-502,-502,-502,-502,-502,-94,-91,-502,-502,-502,43,-502',
'-502,36,-99,-502,61,62,-502,-502,63,-502,38,-502,112,-502,47,-502,-502',
'-502,-502,-502,-502,-502,23,-502,272,-502,265,91,83,85,86,87,89,266',
'-106,-92,84,92,-502,-502,-502,-502,-89,-502,65,-502,586,81,88,90,-505',
'209,96,97,586,-502,-502,-505,-505,-505,-94,-91,-505,-505,-505,-93,-505',
'707,545,735,-92,544,667,-92,-505,272,-505,-505,-505,272,746,754,-105',
'586,747,586,-505,-505,-92,-505,-505,-505,-505,-505,586,-94,-91,-98,-94',
'-91,116,-99,-101,-502,-103,115,666,-90,628,210,-502,271,-106,-94,-91',
'-105,-101,-505,-505,-505,-505,-505,-505,-505,-505,-505,-505,-505,-505',
'-505,-505,-601,-93,-505,-505,-505,735,-505,-505,-97,-102,-505,-100,735',
'-505,-505,217,-505,-516,-505,824,-505,592,-505,-505,-505,-505,-505,-505',
'-505,116,-505,271,-505,631,115,271,-93,116,116,-93,627,706,115,115,211',
'-505,-505,-505,-505,-103,-505,-288,-505,-100,-93,-102,-96,-97,-288,-288',
'-288,222,-505,-505,-288,-288,116,-288,116,937,218,115,-106,115,-98,-601',
'-92,116,-94,272,-98,-104,115,-104,-99,-98,-517,-288,-288,-99,-288,-288',
'-288,-288,-288,-106,630,223,-105,-101,-106,219,220,-105,-101,116,219',
'220,219,220,115,262,116,460,-93,321,-91,115,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,322,-601,-288,-288,-288',
'667,650,667,-598,-505,-288,-99,-416,-288,-516,-602,-505,533,-288,789',
'-288,790,-288,-288,-288,-288,-288,-288,-288,-602,-288,-103,-288,885',
'271,-100,-103,-102,-106,666,-100,666,-102,612,-605,-288,-288,612,-95',
'223,-288,-605,-605,-605,-95,361,-89,-605,-605,223,-605,-502,-288,-104',
'223,-104,223,385,-502,-605,-104,-98,-599,-598,-105,215,-101,-502,-103',
'-84,-605,-605,214,-605,-605,-605,-605,-605,94,95,-100,212,388,116,-70',
'-598,667,-517,115,83,94,95,612,391,614,613,610,84,614,613,615,-605,-605',
'-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-505,-502',
'-605,-605,-605,666,651,-505,-605,394,-605,410,-599,-605,-90,216,-505',
'415,-605,459,-605,461,-605,-605,-605,-605,-605,-605,-605,-99,-605,-605',
'-605,462,-599,222,612,493,614,613,610,274,96,97,-605,-605,-605,503,-93',
'506,-605,-605,-605,-605,96,97,-605,-605,-605,682,-605,-605,-605,-102',
'571,-505,508,-512,-605,-605,-605,-605,-605,-601,-512,574,545,-605,-69',
'547,-605,-605,223,-605,-605,-605,-605,-605,566,571,563,562,561,545,564',
'-605,547,614,613,612,574,566,612,563,562,561,765,564,582,581,519,-605',
'-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,520',
'-605,-605,-605,-605,-511,791,-605,582,581,-605,533,-511,-605,-605,527',
'-605,575,-605,612,-605,277,-605,-605,-605,-605,-605,-605,-605,612,-605',
'-605,-605,223,545,614,613,547,614,613,620,849,575,274,767,-605,-605',
'-605,-605,-513,-605,-335,-605,-96,983,412,-513,-288,-335,530,414,413',
'-605,-102,-288,-288,-288,-335,-105,-288,-288,-288,566,-288,563,562,561',
'571,564,-510,614,613,625,-288,-288,-288,-510,534,574,243,614,613,632',
'-288,-288,542,-288,-288,-288,-288,-288,-507,215,219,220,548,-508,-514',
'-507,457,569,552,612,-508,-514,617,-335,549,458,579,578,582,581,-514',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'508,-509,-288,-288,-288,265,792,-288,-509,592,-288,644,266,-288,-288',
'404,-288,575,-288,596,-288,597,-288,-288,-288,-288,-288,-288,-288,216',
'-288,619,-288,623,-514,614,613,626,566,629,563,562,561,571,564,-288',
'-288,-288,-288,636,-288,-515,-288,-92,574,876,877,-424,-515,878,110',
'111,-288,-104,-424,-424,-424,-515,-101,-424,-424,-424,116,-424,215,116',
'569,115,219,220,115,526,-424,-424,-424,579,578,582,581,223,524,-262',
'1007,-424,-424,638,-424,-424,-424,-424,-424,223,-280,116,642,116,215',
'215,115,-280,115,219,220,536,595,116,-515,645,-280,643,115,575,458,593',
'-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424,-424',
'116,216,-424,-424,-424,115,274,-424,654,274,-424,243,775,-424,-424,243',
'-424,243,-424,243,-424,-94,-424,-424,-424,-424,-424,-424,-424,-280,-424',
'-424,-424,216,216,223,-103,566,223,563,562,561,223,564,-295,-424,-424',
'-84,-424,685,-424,-295,-295,-295,-91,223,-295,-295,-295,538,-295,-289',
'-424,582,581,696,215,701,-289,-100,-295,-295,-289,749,702,721,223,-289',
'709,-289,-295,-295,751,-295,-295,-295,-295,-295,-289,-288,712,-288,713',
'215,853,824,-288,715,-288,717,964,-602,719,-602,727,-288,728,-288,729',
'751,731,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295',
'-295,-295,592,-289,-295,-295,-295,738,216,-295,768,277,-295,769,-289',
'-295,-295,770,-295,-263,-295,776,-295,493,-295,-295,-295,-295,-295,-295',
'-295,-288,-295,-288,-295,216,219,220,566,493,563,562,561,223,564,794',
'-281,-295,-295,262,-295,506,-295,-281,-281,-281,853,824,-281,-281,-281',
'508,-281,215,-295,696,223,274,215,274,964,696,-281,-281,-281,1014,721',
'243,824,751,223,847,-281,-281,1012,-281,-281,-281,-281,-281,961,223',
'563,562,561,824,564,566,857,563,562,561,223,564,566,-264,563,562,561',
'884,564,887,712,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,890,216,-281,-281,-281,893,216,-281,721,895,-281,897',
'223,-281,-281,721,-281,724,-281,899,-281,900,-281,-281,-281,-281,-281',
'-281,-281,696,-281,908,-281,566,-262,563,562,561,571,564,119,120,121',
'122,123,-281,-281,-281,-281,574,-281,-625,-281,119,120,121,122,123,-625',
'-625,-625,912,-281,-625,-625,-625,914,-625,915,223,712,569,759,243,918',
'920,-625,-625,-625,922,579,578,582,581,924,924,223,-625,-625,930,-625',
'-625,-625,-625,-625,566,932,563,562,561,566,564,563,562,561,240,564',
'934,223,242,241,238,239,944,945,223,575,948,-625,-625,-625,-625,-625',
'-625,-625,-625,-625,-625,-625,-625,-625,-625,-265,721,-625,-625,-625',
'958,721,-625,965,274,-625,966,968,-625,-625,724,-625,969,-625,985,-625',
'987,-625,-625,-625,-625,-625,-625,-625,243,-625,-625,-625,988,992,566',
'712,563,562,561,997,564,243,999,-606,-625,-625,1001,-625,1003,-625,-606',
'-606,-606,1003,1010,-606,-606,-606,243,-606,240,-625,1015,1016,242,241',
'238,239,-606,-606,-606,-606,721,240,257,258,924,242,241,-606,-606,929',
'-606,-606,-606,-606,-606,924,924,1021,240,985,246,243,242,241,238,239',
'-602,-601,244,566,245,563,562,561,701,564,985,1044,-606,-606,-606,-606',
'-606,-606,-606,-606,-606,-606,-606,-606,-606,-606,1045,240,-606,-606',
'-606,242,241,-606,1046,1047,-606,1003,1003,-606,-606,721,-606,1003,-606',
'223,-606,924,-606,-606,-606,-606,-606,-606,-606,985,-606,-606,-606,566',
'1003,563,562,561,571,564,119,120,121,122,123,-606,-606,-606,-606,574',
'-606,-607,-606,119,120,121,122,123,-607,-607,-607,,-606,-607,-607,-607',
',-607,243,,,569,,,,,-607,-607,-607,-607,579,578,582,581,257,258,,-607',
'-607,,-607,-607,-607,-607,-607,961,,563,562,561,240,564,246,,242,241',
'238,239,223,,244,,245,,,,575,,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,-607,-607,,,-607,-607,-607,,,-607,,,-607,,,-607',
'-607,,-607,,-607,,-607,,-607,-607,-607,-607,-607,-607,-607,,-607,-607',
'-607,,,,,,,,,,,,,-607,-607,-607,-607,,-607,,-607,,297,72,73,74,12,60',
',,-607,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,655,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,',
'257,258,,43,,,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248',
'244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,-239,,,65,,,81,88,90',
',,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,639,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259',
'260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47',
'242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261',
',,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,655,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253',
'254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63',
',38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87',
'89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43',
',,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245',
',,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237',
',,257,258,,43,,,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90',
',,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259',
'260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47',
'242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261',
',,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253',
'254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63',
',38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87',
'89,,,,84,92,223,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258',
',43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23',
'245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236',
'237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239',
'250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88',
'90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259',
'260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47',
'242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261',
',,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254',
'249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38',
'240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89',
',,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,',
',36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245',
',,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237',
',,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90',
',,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259',
'260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47',
'242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261',
',,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254',
'249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38',
'240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89',
',,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,',
',36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245',
',,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237',
',,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90',
',,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259',
'260,255,256,,-626,-626,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253',
'254,249,251,259,260,255,256,,-626,-626,,,257,258,,43,,,36,,,61,62,,',
'63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,243,-626,-626,-626,-626,249,251,,,-626,-626,,,,,,257,258,,43,,,36',
',,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,,,,,,,,,,,,,,,,257,258,,43,,,36,,243,61,62,,,63,,38,240',
',246,47,242,241,238,239,257,258,244,23,245,,,,91,83,85,86,87,89,,,240',
'84,92,,242,241,238,239,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,243,,,,,,,,,,,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,,,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,-626,-626,-626,-626',
'249,251,,,-626,-626,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,-626,-626',
'-626,-626,249,251,,,-626,-626,,,,,,257,258,,43,,,36,,,61,62,,,63,,38',
'240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243',
'-626,-626,-626,-626,249,251,,,-626,-626,,,,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,243,-626,-626,-626,-626,249,251,,,-626,-626,,,,,,257,258,,43,',
',36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,-626,-626,-626,-626,249,251,,,-626,-626,,,,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,247,252,253,254,249,251,,,255,256,,,,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,,255,256,,,,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,,,,,,,,,,,,,,,,257,258,,43,,,36,,,61,62,,,63',
',38,240,,246,47,242,241,238,239,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,,,,,,,,,,,,,,,,257',
'258,,228,,,234,,,61,62,,,63,,,240,,246,47,242,241,238,239,,,,233,,,',
',91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286',
',284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99',
'101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288',
',,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,',
',,,308,,,304,,,61,62,,,63,,303,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,',
',,,,,,,308,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,',
',84,92,,,,320,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,223,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,,,47',
',,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
'290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62',
',,63,,,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61',
'62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61',
'62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61',
'62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,,115',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,355,',
',36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,404,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,420,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87',
'89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,',
'48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,',
',,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,',
',,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,420,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,223,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286',
',284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99',
'101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288',
',,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87',
'89,,,,84,288,223,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38',
',,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,234,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,522,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,538,,61,62,,,63',
',,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,598,59,100,99',
'599,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,600,,,234,,,61,62',
',,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,598,59,100,99',
'599,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,600,,,234,,,61,62',
',,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99',
'101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288',
',,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,679,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,',
'291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,404,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,',
',,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287',
'85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,679,,,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,',
',84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,773,,,,47,,,,,,,,233,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,679,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,',
'291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,',
',,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,',
',,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,420,,,,47,,,,,,,,233,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,',
',,,,,,,,,902,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,284,,47,,,,,,,,233,,,,,91,287',
'85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,318,,,,,,,,,,,,,,,,,,,,902,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,318,,,,,,,,,,,,,,,,,,,,975,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,679,,,,47,,,,,',
',,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284',
',47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88',
'90,,,96,97,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201',
'205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172',
'191,190,,,,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91',
',,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196',
'189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128',
',,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,370,369,371,368,172,191,190,,,,,,171,178,169,170,365,366,367,363',
'129,100,99,364,,102,,,,,,,161,162,,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,377,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200',
'173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192',
'194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178',
'169,170,166,167,168,127,129,401,400,128,,402,,,,,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,',
',,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205',
'206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191',
'190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,',
',,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,',
',,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,-625,,165,,,,,-625,-625,-625,,,-625,-625,-625,566,-625,563',
'562,561,571,564,158,,,-625,-625,,,,,574,,,,,-625,-625,,-625,-625,-625',
'-625,-625,,,,,,,,,,569,,566,,563,562,561,571,564,579,578,582,581,,,',
',,574,,,,,,,-625,,,,,,,-625,,,,,274,-625,,569,,,,,575,,,,430,434,582',
'581,431,,,,,,-625,-625,,161,162,,157,139,140,141,148,145,147,,-625,142',
'143,,,-625,163,164,149,150,,,575,,,274,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,437,441,,,436,,,,,,,,,161,162',
'158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,491,434,,,492,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,657,434,,,658,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,659',
'441,,,660,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,689,434,,,690,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,692',
'441,,,693,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,657,434,,,658,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,659',
'441,,,660,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,741,434,,,742,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,743',
'441,,,744,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,566,165,563,562,561,571,564,,,,,,,,,,574,,,,,158',
',,,,,,,,566,,563,562,561,571,564,,569,861,441,,,862,,,574,579,578,582',
'581,,161,162,,157,139,140,141,148,145,147,,,142,143,,,569,163,164,149',
'150,,,,,,274,582,581,,,575,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,491,434,,,492,,575,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,566,165,563,562,561,571',
'564,566,,563,562,561,571,564,,,574,,,,,158,,574,566,,563,562,561,571',
'564,,,,,,,,569,,574,,,,,569,,579,578,582,581,,,,579,578,582,581,,,,566',
'569,563,562,561,571,564,,,,579,578,582,581,,566,574,563,562,561,571',
'564,575,,,,,,,575,,574,,,,,,,569,566,,563,562,561,571,564,575,579,578',
'582,581,,,569,566,574,563,562,561,571,564,,,,582,581,,,,566,574,563',
'562,561,571,564,,569,,,,,,575,,574,,,582,581,,,569,,,,,,575,,,,,582',
'581,,,569,759,,1009,441,,,1008,,579,578,582,581,,,575,161,162,,157,139',
'140,141,148,145,147,,,142,143,575,,,163,164,149,150,,,,,,274,,,575,',
',,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,566,165,563',
'562,561,571,564,566,,563,562,561,571,564,,,574,,,,,158,,574,566,,563',
'562,561,571,564,,,,,,,,569,,574,,,,,569,,579,578,582,581,,,,,,582,581',
',,,566,569,563,562,561,571,564,,,,,,582,581,,,574,,,,,,575,,,,,,,575',
',,,,,,,,569,1037,434,,,1038,,,575,,,582,581,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,575,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,1039,441,,,1040',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,566,165,563,562,561,571,564,566,,563,562,561,571,564,,,574',
',,,,158,,574,,,,,,,,,,,,,,,569,,,,,,,569,,,,582,581,,,,,,582,581,,,',
',,,,,,,,,,,,,,,,,,,,,,575,,,,,,,575' ]
        racc_action_table = arr = ::Array.new(26474, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'98,2,2,2,2,2,2,98,98,98,2,2,98,98,98,2,98,2,2,2,2,2,2,2,98,352,98,98',
'98,2,2,2,2,2,2,2,98,98,2,98,98,98,98,98,2,2,2,2,2,2,2,2,2,2,2,2,689',
'2,2,2,1,2,2,604,2,2,2,98,98,98,98,98,98,98,98,98,98,98,98,98,98,690',
'819,98,98,98,2,98,98,2,353,98,2,2,98,98,2,98,2,98,3,98,2,98,98,98,98',
'98,98,98,2,98,64,98,27,2,2,2,2,2,2,27,356,689,2,2,98,98,98,98,352,98',
'2,98,345,2,2,2,101,13,2,2,346,98,98,101,101,101,690,819,101,101,101',
'692,101,551,334,588,689,334,489,689,101,313,101,101,101,670,600,604',
'596,858,600,911,101,101,689,101,101,101,101,101,933,690,819,972,690',
'819,604,973,741,363,742,604,489,353,392,15,363,64,976,690,819,1015,1037',
'101,101,101,101,101,101,101,101,101,101,101,101,101,101,692,692,101',
'101,101,589,101,101,356,743,101,859,860,101,101,18,101,226,101,990,101',
'990,101,101,101,101,101,101,101,345,101,313,101,395,345,670,692,346',
'588,692,392,551,346,588,16,101,101,101,101,1038,101,436,101,1052,692',
'1039,596,18,436,436,436,22,101,101,436,436,858,436,911,858,19,858,18',
'911,226,743,741,933,742,29,972,744,933,1040,973,972,227,436,436,973',
'436,436,436,436,436,976,395,22,1015,1037,976,454,454,1015,1037,589,699',
'699,762,762,589,25,860,229,743,40,859,860,436,436,436,436,436,436,436',
'436,436,436,436,436,436,436,43,1039,436,436,436,497,436,498,598,364',
'436,227,29,436,41,744,364,459,436,657,436,658,436,436,436,436,436,436',
'436,1040,436,1038,436,793,29,1052,1038,1039,229,497,1052,498,1039,379',
'437,436,436,381,436,48,436,437,437,437,744,72,41,437,437,454,437,598',
'436,436,699,1040,762,87,598,437,1040,41,599,598,459,17,657,598,658,684',
'437,437,17,437,437,437,437,437,44,44,793,17,88,5,684,598,671,42,5,80',
'318,318,510,89,379,379,379,80,381,381,381,437,437,437,437,437,437,437',
'437,437,437,437,437,437,437,599,598,437,437,437,671,437,599,861,90,437',
'124,599,437,42,17,599,207,437,228,437,230,437,437,437,437,437,437,437',
'42,437,437,437,231,599,235,621,267,510,510,510,270,44,44,659,437,437',
'281,437,282,437,659,659,659,318,318,659,659,659,510,659,861,437,437',
'709,599,285,365,861,659,659,659,659,861,365,709,335,861,298,335,659',
'659,300,659,659,659,659,659,724,887,724,724,724,339,724,861,339,621',
'621,624,887,929,386,929,929,929,621,929,709,709,301,659,659,659,659',
'659,659,659,659,659,659,659,659,659,659,302,861,659,659,659,366,659',
'659,887,887,659,322,366,659,659,308,659,709,659,389,659,311,659,659',
'659,659,659,659,659,397,659,659,659,312,704,624,624,704,386,386,386',
'724,887,317,624,659,659,659,659,367,659,49,659,322,929,126,367,660,49',
'319,126,126,659,659,660,660,660,49,322,660,660,660,343,660,343,343,343',
'343,343,368,389,389,389,660,660,660,368,323,343,326,397,397,397,660',
'660,332,660,660,660,660,660,369,225,20,20,336,370,305,369,225,343,343',
'383,370,305,383,49,337,225,343,343,343,343,305,660,660,660,660,660,660',
'660,660,660,660,660,660,660,660,340,371,660,660,660,373,660,660,371',
'350,660,430,373,660,660,351,660,343,660,355,660,357,660,660,660,660',
'660,660,660,225,660,385,660,388,305,383,383,391,552,394,552,552,552',
'552,552,660,660,660,660,416,660,306,660,430,552,763,763,30,306,763,763',
'763,660,660,30,30,30,306,430,30,30,30,294,30,307,349,552,294,330,330',
'349,307,30,30,30,552,552,552,552,959,307,419,959,30,30,421,30,30,30',
'30,30,425,309,755,428,760,324,354,755,309,760,344,344,324,354,868,306',
'431,309,429,868,552,324,354,30,30,30,30,30,30,30,30,30,30,30,30,30,30',
'942,307,30,30,30,942,438,30,446,30,30,467,640,30,30,468,30,469,30,470',
'30,431,30,30,30,30,30,30,30,309,30,30,30,324,354,499,431,849,500,849',
'849,849,517,849,31,30,30,518,30,521,30,31,31,31,640,523,31,31,31,528',
'31,527,30,712,712,531,602,539,527,640,31,31,747,602,540,849,541,527',
'554,747,31,31,602,31,31,31,31,31,747,693,555,862,557,901,730,730,693',
'558,862,559,901,693,568,862,576,693,580,862,583,901,585,31,31,31,31',
'31,31,31,31,31,31,31,31,31,31,590,527,31,31,31,591,602,31,628,31,31',
'631,747,31,31,633,31,637,31,641,31,646,31,31,31,31,31,31,31,693,31,862',
'31,901,756,756,930,652,930,930,930,661,930,663,59,31,31,669,31,676,31',
'59,59,59,1023,1023,59,59,59,678,59,963,31,686,688,691,974,694,963,695',
'59,59,59,974,930,698,700,963,708,723,59,59,974,59,59,59,59,59,899,725',
'899,899,899,732,899,569,737,569,569,569,740,569,983,772,983,983,983',
'777,983,795,796,59,59,59,59,59,59,59,59,59,59,59,59,59,59,798,963,59',
'59,59,799,974,59,569,800,59,802,803,59,59,983,59,569,59,804,59,805,59',
'59,59,59,59,59,59,818,59,822,59,607,825,607,607,607,607,607,9,9,9,9',
'9,59,59,59,59,607,59,432,59,296,296,296,296,296,432,432,432,826,59,432',
'432,432,830,432,831,832,833,607,607,484,837,838,432,432,432,840,607',
'607,607,607,841,843,846,432,432,848,432,432,432,432,432,985,851,985',
'985,985,721,985,721,721,721,484,721,854,864,484,484,484,484,869,870',
'871,607,880,432,432,432,432,432,432,432,432,432,432,432,432,432,432',
'881,985,432,432,432,898,721,432,902,432,432,903,905,432,432,721,432',
'906,432,931,432,935,432,432,432,432,432,432,432,485,432,432,432,936',
'941,847,949,847,847,847,952,847,465,953,441,432,432,954,432,955,432',
'441,441,441,957,967,441,441,441,475,441,485,432,975,978,485,485,485',
'485,441,441,441,441,847,465,475,475,979,465,465,441,441,847,441,441',
'441,441,441,980,981,982,475,984,475,466,475,475,475,475,1008,1009,475',
'1021,475,1021,1021,1021,1011,1021,1022,1027,441,441,441,441,441,441',
'441,441,441,441,441,441,441,441,1028,466,441,441,441,466,466,441,1029',
'1030,441,1031,1032,441,441,1021,441,1033,441,1036,441,1041,441,441,441',
'441,441,441,441,1042,441,441,441,666,1054,666,666,666,666,666,516,516',
'516,516,516,441,441,441,441,666,441,442,441,683,683,683,683,683,442',
'442,442,,441,442,442,442,,442,476,,,666,,,,,442,442,442,442,666,666',
'666,666,476,476,,442,442,,442,442,442,442,442,1007,,1007,1007,1007,476',
'1007,476,,476,476,476,476,666,,476,,476,,,,666,,442,442,442,442,442',
'442,442,442,442,442,442,442,442,442,,,442,442,442,,,442,,,442,,,442',
'442,,442,,442,,442,,442,442,442,442,442,442,442,,442,442,442,,,,,,,',
',,,,,442,442,442,442,,442,,442,,36,36,36,36,36,36,,,442,36,36,,,,36',
',36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,449,36,36,',
'36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,449,449,449,449',
'449,449,449,449,449,449,449,,449,449,,,449,449,,36,,,36,,,36,36,,,36',
',36,449,,449,36,449,449,449,449,449,449,449,36,449,,,,36,36,36,36,36',
'36,,,,36,36,,449,,449,,,36,,,36,36,36,,,36,36,209,209,209,209,209,209',
',,,209,209,,,,209,,209,209,209,209,209,209,209,,,,,,209,209,209,209',
'209,209,209,,,209,,,,,424,209,209,,209,209,209,209,209,209,209,209,209',
',209,209,209,,209,209,,209,209,209,424,424,424,424,424,424,424,424,424',
'424,424,,424,424,,,424,424,,209,,,209,,,209,209,,,209,,209,424,,424',
'209,424,424,424,424,424,424,424,209,424,,,,209,209,209,209,209,209,',
',,209,209,,424,,,,,209,,,209,209,209,,,209,209,234,234,234,234,234,234',
',,,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234',
'234,234,234,,,234,,,,,662,234,234,,234,234,234,234,234,234,234,234,234',
',234,234,234,,234,234,,234,234,234,662,662,662,662,662,662,662,662,662',
'662,662,,662,662,,,662,662,,234,,,234,,,234,234,,,234,,234,662,,662',
'234,662,662,662,662,662,662,662,234,662,,,,234,234,234,234,234,234,',
',,234,234,,662,,,,,234,,,234,234,234,,,234,234,299,299,299,299,299,299',
',,,299,299,,,,299,,299,299,299,299,299,299,299,,,,,,299,299,299,299',
'299,299,299,,,299,,,,,,299,299,,299,299,299,299,299,299,299,299,299',
',299,299,299,,299,299,,299,299,299,24,24,24,24,24,24,24,24,24,24,24',
',24,24,,,24,24,,299,,,299,,,299,299,,,299,,299,24,,24,299,24,24,24,24',
'24,24,24,299,24,,,,299,299,299,299,299,299,,,,299,299,,24,,,,,299,,',
'299,299,299,,,299,299,304,304,304,304,304,304,,,,304,304,,,,304,,304',
'304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,',
'304,304,,304,304,304,304,304,304,304,304,304,,304,304,304,,304,304,',
'304,304,304,279,279,279,279,279,279,279,279,279,279,279,,279,279,,,279',
'279,,304,,,304,,,304,304,,,304,,304,279,,279,304,279,279,279,279,279',
'279,279,304,279,,,,304,304,304,304,304,304,,,,304,304,,279,,,,,304,',
',304,304,304,,,304,304,329,329,329,329,329,329,,,,329,329,,,,329,,329',
'329,329,329,329,329,329,,,,,,329,329,329,329,329,329,329,,,329,,,,,',
'329,329,,329,329,329,329,329,329,329,329,329,,329,329,329,,329,329,',
'329,329,329,444,444,444,444,444,444,444,444,444,444,444,,444,444,,,444',
'444,,329,,,329,,,329,329,,,329,,329,444,,444,329,444,444,444,444,444',
'444,444,329,444,,,,329,329,329,329,329,329,,,,329,329,,444,,,,,329,',
',329,329,329,,,329,329,410,410,410,410,410,410,,,,410,410,,,,410,,410',
'410,410,410,410,410,410,,,,,,410,410,410,410,410,410,410,,,410,,,,,',
'410,410,410,410,410,410,410,410,410,410,410,410,,410,410,410,,410,410',
',410,410,410,488,488,488,488,488,488,488,488,488,488,488,,488,488,,',
'488,488,,410,,,410,,,410,410,,,410,,410,488,,488,410,488,488,488,488',
'488,488,488,410,488,,,,410,410,410,410,410,410,,,,410,410,488,488,,',
',,410,,,410,410,410,,,410,410,584,584,584,584,584,584,,,,584,584,,,',
'584,,584,584,584,584,584,584,584,,,,,,584,584,584,584,584,584,584,,',
'584,,,,,,584,584,,584,584,584,584,584,584,584,584,584,,584,584,584,',
'584,584,,584,584,584,537,537,537,537,537,537,537,537,537,537,537,,537',
'537,,,537,537,,584,,,584,,,584,584,,,584,,584,537,,537,584,537,537,537',
'537,537,537,537,584,537,,,,584,584,584,584,584,584,,,,584,584,,537,',
',,,584,,,584,584,584,,,584,584,587,587,587,587,587,587,,,,587,587,,',
',587,,587,587,587,587,587,587,587,,,,,,587,587,587,587,587,587,587,',
',587,,,,,,587,587,,587,587,587,587,587,587,587,587,587,,587,587,587',
',587,587,,587,587,587,697,697,697,697,697,697,697,697,697,697,697,,697',
'697,,,697,697,,587,,,587,,,587,587,,,587,,587,697,,697,587,697,697,697',
'697,697,697,697,587,697,,,,587,587,587,587,587,587,,,,587,587,,697,',
',,,587,,,587,587,587,,,587,587,706,706,706,706,706,706,,,,706,706,,',
',706,,706,706,706,706,706,706,706,,,,,,706,706,706,706,706,706,706,',
',706,,,,,,706,706,,706,706,706,706,706,706,706,706,706,,706,706,706',
',706,706,,706,706,706,774,774,774,774,774,774,774,774,774,774,774,,774',
'774,,,774,774,,706,,,706,,,706,706,,,706,,706,774,,774,706,774,774,774',
'774,774,774,774,706,774,,,,706,706,706,706,706,706,,,,706,706,,774,',
',,,706,,,706,706,706,,,706,706,707,707,707,707,707,707,,,,707,707,,',
',707,,707,707,707,707,707,707,707,,,,,,707,707,707,707,707,707,707,',
',707,,,,,,707,707,,707,707,707,707,707,707,707,707,707,,707,707,707',
',707,707,,707,707,707,779,779,779,779,779,779,779,779,779,779,779,,779',
'779,,,779,779,,707,,,707,,,707,707,,,707,,707,779,,779,707,779,779,779',
'779,779,779,779,707,779,,,,707,707,707,707,707,707,,,,707,707,,779,',
',,,707,,,707,707,707,,,707,707,757,757,757,757,757,757,,,,757,757,,',
',757,,757,757,757,757,757,757,757,,,,,,757,757,757,757,757,757,757,',
',757,,,,,,757,757,,757,757,757,757,757,757,757,757,757,,757,757,757',
',757,757,,757,757,757,781,781,781,781,781,781,781,781,781,781,781,,781',
'781,,,781,781,,757,,,757,,,757,757,,,757,,757,781,,781,757,781,781,781',
'781,781,781,781,757,781,,,,757,757,757,757,757,757,,,,757,757,,781,',
',,,757,,,757,757,757,,,757,757,758,758,758,758,758,758,,,,758,758,,',
',758,,758,758,758,758,758,758,758,,,,,,758,758,758,758,758,758,758,',
',758,,,,,,758,758,,758,758,758,758,758,758,758,758,758,,758,758,758',
',758,758,,758,758,758,784,784,784,784,784,784,784,784,784,784,784,,784',
'784,,,784,784,,758,,,758,,,758,758,,,758,,758,784,,784,758,784,784,784',
'784,784,784,784,758,784,,,,758,758,758,758,758,758,,,,758,758,,784,',
',,,758,,,758,758,758,,,758,758,764,764,764,764,764,764,,,,764,764,,',
',764,,764,764,764,764,764,764,764,,,,,,764,764,764,764,764,764,764,',
',764,,,,,,764,764,,764,764,764,764,764,764,764,764,764,,764,764,764',
',764,764,,764,764,764,786,786,786,786,786,786,786,786,786,786,786,,786',
'786,,,786,786,,764,,,764,,,764,764,,,764,,764,786,,786,764,786,786,786',
'786,786,786,786,764,786,,,,764,764,764,764,764,764,,,,764,764,,786,',
',,,764,,,764,764,764,,,764,764,809,809,809,809,809,809,,,,809,809,,',
',809,,809,809,809,809,809,809,809,,,,,,809,809,809,809,809,809,809,',
',809,,,,,,809,809,,809,809,809,809,809,809,809,809,809,,809,809,809',
',809,809,,809,809,809,788,788,788,788,788,788,788,788,788,788,788,,788',
'788,,,788,788,,809,,,809,,,809,809,,,809,,809,788,,788,809,788,788,788',
'788,788,788,788,809,788,,,,809,809,809,809,809,809,,,,809,809,,788,',
',,,809,,,809,809,809,,,809,809,813,813,813,813,813,813,,,,813,813,,',
',813,,813,813,813,813,813,813,813,,,,,,813,813,813,813,813,813,813,',
',813,,,,,,813,813,,813,813,813,813,813,813,813,813,813,,813,813,813',
',813,813,,813,813,813,883,883,883,883,883,883,883,883,883,883,883,,883',
'883,,,883,883,,813,,,813,,,813,813,,,813,,813,883,,883,813,883,883,883',
'883,883,883,883,813,883,,,,813,813,813,813,813,813,,,,813,813,,883,',
',,,813,,,813,813,813,,,813,813,814,814,814,814,814,814,,,,814,814,,',
',814,,814,814,814,814,814,814,814,,,,,,814,814,814,814,814,814,814,',
',814,,,,,,814,814,,814,814,814,814,814,814,814,814,814,,814,814,814',
',814,814,,814,814,814,886,886,886,886,886,886,886,886,886,886,886,,886',
'886,,,886,886,,814,,,814,,,814,814,,,814,,814,886,,886,814,886,886,886',
'886,886,886,886,814,886,,,,814,814,814,814,814,814,,,,814,814,,886,',
',,,814,,,814,814,814,,,814,814,824,824,824,824,824,824,,,,824,824,,',
',824,,824,824,824,824,824,824,824,,,,,,824,824,824,824,824,824,824,',
',824,,,,,,824,824,,824,824,824,824,824,824,824,824,824,,824,824,824',
',824,824,,824,824,824,463,463,463,463,463,463,463,463,463,463,463,,463',
'463,,,463,463,,824,,,824,,,824,824,,,824,,824,463,,463,824,463,463,463',
'463,463,463,463,824,463,,,,824,824,824,824,824,824,,,,824,824,,,,,,',
'824,,,824,824,824,,,824,824,855,855,855,855,855,855,,,,855,855,,,,855',
',855,855,855,855,855,855,855,,,,,,855,855,855,855,855,855,855,,,855',
',,,,,855,855,,855,855,855,855,855,855,855,855,855,,855,855,855,,855',
'855,,855,855,855,464,464,464,464,464,464,464,464,464,464,464,,464,464',
',,464,464,,855,,,855,,,855,855,,,855,,855,464,,464,855,464,464,464,464',
'464,464,464,855,464,,,,855,855,855,855,855,855,,,,855,855,,,,,,,855',
',,855,855,855,,,855,855,856,856,856,856,856,856,,,,856,856,,,,856,,856',
'856,856,856,856,856,856,,,,,,856,856,856,856,856,856,856,,,856,,,,,',
'856,856,,856,856,856,856,856,856,856,856,856,,856,856,856,,856,856,',
'856,856,856,474,474,474,474,474,474,474,,,474,474,,,,,,474,474,,856',
',,856,,,856,856,,,856,,856,474,,474,856,474,474,474,474,474,474,474',
'856,474,,,,856,856,856,856,856,856,,,,856,856,,,,,,,856,,,856,856,856',
',,856,856,865,865,865,865,865,865,,,,865,865,,,,865,,865,865,865,865',
'865,865,865,,,,,,865,865,865,865,865,865,865,,,865,,,,,,865,865,,865',
'865,865,865,865,865,865,865,865,,865,865,865,,865,865,,865,865,865,477',
',,,,,,,,,,,,,,,477,477,,865,,,865,,473,865,865,,,865,,865,477,,477,865',
'477,477,477,477,473,473,477,865,477,,,,865,865,865,865,865,865,,,473',
'865,865,,473,473,473,473,,865,,,865,865,865,,,865,865,904,904,904,904',
'904,904,,,,904,904,,,,904,,904,904,904,904,904,904,904,,,,,,904,904',
'904,904,904,904,904,,,904,,,,,,904,904,,904,904,904,904,904,904,904',
'904,904,,904,904,904,,904,904,,904,904,904,478,,,,,,,,,,,,,,,,478,478',
',904,,,904,,,904,904,,,904,,904,478,,478,904,478,478,478,478,,,478,904',
'478,,,,904,904,904,904,904,904,,,,904,904,,,,,,,904,,,904,904,904,,',
'904,904,908,908,908,908,908,908,,,,908,908,,,,908,,908,908,908,908,908',
'908,908,,,,,,908,908,908,908,908,908,908,,,908,,,,,,908,908,,908,908',
'908,908,908,908,908,908,908,,908,908,908,,908,908,,908,908,908,479,479',
'479,479,479,479,479,,,479,479,,,,,,479,479,,908,,,908,,,908,908,,,908',
',908,479,,479,908,479,479,479,479,479,479,479,908,479,,,,908,908,908',
'908,908,908,,,,908,908,,,,,,,908,,,908,908,908,,,908,908,938,938,938',
'938,938,938,,,,938,938,,,,938,,938,938,938,938,938,938,938,,,,,,938',
'938,938,938,938,938,938,,,938,,,,,,938,938,,938,938,938,938,938,938',
'938,938,938,,938,938,938,,938,938,,938,938,938,480,480,480,480,480,480',
'480,,,480,480,,,,,,480,480,,938,,,938,,,938,938,,,938,,938,480,,480',
'938,480,480,480,480,480,480,480,938,480,,,,938,938,938,938,938,938,',
',,938,938,,,,,,,938,,,938,938,938,,,938,938,971,971,971,971,971,971',
',,,971,971,,,,971,,971,971,971,971,971,971,971,,,,,,971,971,971,971',
'971,971,971,,,971,,,,,,971,971,,971,971,971,971,971,971,971,971,971',
',971,971,971,,971,971,,971,971,971,481,481,481,481,481,481,481,,,481',
'481,,,,,,481,481,,971,,,971,,,971,971,,,971,,971,481,,481,971,481,481',
'481,481,481,481,481,971,481,,,,971,971,971,971,971,971,,,,971,971,,',
',,,,971,,,971,971,971,,,971,971,986,986,986,986,986,986,,,,986,986,',
',,986,,986,986,986,986,986,986,986,,,,,,986,986,986,986,986,986,986',
',,986,,,,,,986,986,,986,986,986,986,986,986,986,986,986,,986,986,986',
',986,986,,986,986,986,482,482,482,482,482,482,482,,,482,482,,,,,,482',
'482,,986,,,986,,,986,986,,,986,,986,482,,482,986,482,482,482,482,482',
'482,482,986,482,,,,986,986,986,986,986,986,,,,986,986,,,,,,,986,,,986',
'986,986,,,986,986,991,991,991,991,991,991,,,,991,991,,,,991,,991,991',
'991,991,991,991,991,,,,,,991,991,991,991,991,991,991,,,991,,,,,,991',
'991,,991,991,991,991,991,991,991,991,991,,991,991,991,,991,991,,991',
'991,991,483,483,483,483,483,483,483,,,483,483,,,,,,483,483,,991,,,991',
',,991,991,,,991,,991,483,,483,991,483,483,483,483,483,483,483,991,483',
',,,991,991,991,991,991,991,,,,991,991,,,,,,,991,,,991,991,991,,,991',
'991,994,994,994,994,994,994,,,,994,994,,,,994,,994,994,994,994,994,994',
'994,,,,,,994,994,994,994,994,994,994,,,994,,,,,,994,994,,994,994,994',
'994,994,994,994,994,994,,994,994,994,,994,994,,994,994,994,486,486,486',
'486,486,486,486,,,486,486,,,,,,486,486,,994,,,994,,,994,994,,,994,,994',
'486,,486,994,486,486,486,486,486,486,486,994,486,,,,994,994,994,994',
'994,994,,,,994,994,,,,,,,994,,,994,994,994,,,994,994,995,995,995,995',
'995,995,,,,995,995,,,,995,,995,995,995,995,995,995,995,,,,,,995,995',
'995,995,995,995,995,,,995,,,,,,995,995,,995,995,995,995,995,995,995',
'995,995,,995,995,995,,995,995,,995,995,995,487,487,487,487,487,487,487',
'487,,487,487,,,,,,487,487,,995,,,995,,,995,995,,,995,,995,487,,487,995',
'487,487,487,487,487,487,487,995,487,,,,995,995,995,995,995,995,,,,995',
'995,,,,,,,995,,,995,995,995,,,995,995,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8',
'8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8',
'8,,8,8,8,471,,,,,,,,,,,,,,,,471,471,,8,,,8,,,8,8,,,8,,8,471,,471,8,471',
'471,471,471,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,23,23',
'23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23',
',,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,472',
',,,,,,,,,,,,,,,472,472,,23,,,23,,,23,23,,,23,,,472,,472,23,472,472,472',
'472,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23',
'32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32',
'32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32',
'32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32',
',,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33',
',33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,',
',33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33',
',,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33',
'33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34,34,34,,34,',
',,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,',
',,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,',
',,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34',
'34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,,37,,,,37,37',
',,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37',
',,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,',
'37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37',
',,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38',
'38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38',
'38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38',
',,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,',
',38,38,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45',
'45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45',
'45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,',
'45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46',
'46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46',
',,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,',
',,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46',
'46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,47,47,47,,47,,,,47,47',
',,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47',
',,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,',
',,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,',
'47,47,,,,,,,47,,,47,47,47,,,47,47,61,61,61,,61,,,,61,61,,,,61,,61,61',
'61,61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61',
'61,61,61,61,,61,61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,',
'61,61,,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,61,,,,,',
'61,,,61,61,61,,,61,61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62',
'62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62',
'62,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62',
',62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62',
'62,,,62,62,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63',
'63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63',
',63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,',
',,,,63,,,,,63,63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,,,63,63',
'66,66,66,,66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66',
'66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66',
'66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66',
'66,66,66,66,66,,,,66,66,,,,,,,66,,,66,66,66,,,66,66,67,67,67,,67,,,',
'67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,',
',,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,',
',,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67',
'67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67,70,70,70,,70,,,,70,70,,,,70',
',70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70',
'70,70,70,70,70,70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,',
',70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70',
',,,,70,70,,,70,70,70,,,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71',
'71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71',
'71,71,,71,71,71,,71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71',
',71,,,,,,,,,,,,,,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,',
',71,71,114,114,114,114,114,,,,114,114,,,,114,,114,114,114,114,114,114',
'114,,,,,,114,114,114,114,114,114,114,,,114,,,,,,114,114,114,114,114',
'114,114,114,114,114,114,114,,114,114,114,,114,114,,114,114,114,,,,,',
',,,,,,,,,,,,,,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114',
'114,114,114,114,114,,,,114,114,,,,,,114,114,,,114,114,114,,,114,114',
'119,119,119,,119,,,,119,119,,,,119,,119,119,119,119,119,119,119,,,,',
',119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119',
'119,119,,119,119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,',
'119,,,119,119,,,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119',
',,,119,119,,,,,,,119,,,119,119,119,,,119,119,120,120,120,,120,,,,120',
'120,,,,120,,120,120,120,120,120,120,120,,,,,,120,120,120,120,120,120',
'120,,,120,,,,,,,120,,,120,120,120,120,120,120,120,120,,120,120,120,',
'120,120,,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,',
',,,120,,,,,,,,120,,,,,120,120,120,120,120,120,,,,120,120,,,,,,,120,',
',120,120,120,,,120,120,121,121,121,,121,,,,121,121,,,,121,,121,121,121',
'121,121,121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121',
'121,121,121,121,121,121,121,,121,121,121,,121,121,,121,121,121,,,,,',
',,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,,,121',
'121,121,121,121,121,,,,121,121,,,,,,,121,,,121,121,121,,,121,121,122',
'122,122,,122,,,,122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122',
'122,122,122,122,122,122,,,122,,,,,,,122,,,122,122,122,122,122,122,122',
'122,,122,122,122,,122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122',
',,122,122,,,122,,,,,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122',
'122,,,,,,,122,,,122,122,122,,,122,122,123,123,123,123,123,,,,123,123',
',,,123,,123,123,123,123,123,123,123,,,,,,123,123,123,123,123,123,123',
',,123,,,,,,123,123,,123,123,123,123,123,123,123,123,123,,123,123,123',
',123,123,,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,',
'123,,,,123,,,,,,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123',
',,123,123,123,,,123,123,210,210,210,,210,,,,210,210,,,,210,,210,210',
'210,210,210,210,210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210',
',,210,210,210,210,210,210,210,210,,210,210,210,,210,210,,210,210,210',
',,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210,,,,210,,,,,,,,210',
',,,,210,210,210,210,210,210,,,,210,210,,,,,,,210,,,210,210,210,,,210',
'210,211,211,211,,211,,,,211,211,,,,211,,211,211,211,211,211,211,211',
',,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211,211',
'211,211,211,,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211',
',,211,,,211,211,,,211,,,,,,211,,,,,,,,211,,,,,211,211,211,211,211,211',
',,,211,211,,,,,,,211,,,211,211,211,,,211,211,212,212,212,,212,,,,212',
'212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212,212,212',
'212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,212,212,212,212',
',212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,',
'212,,212,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212,,,,',
',,212,,212,212,212,212,,,212,212,217,217,217,,217,,,,217,217,,,,217',
',217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217',
',,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,,217,217,,217',
'217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,',
',217,,,,,217,217,217,217,217,217,,,,217,217,,,,,,,217,,,217,217,217',
',,217,217,218,218,218,,218,,,,218,218,,,,218,,218,218,218,218,218,218',
'218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218',
'218,218,218,218,,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,',
',,218,,,218,,,218,218,,,218,,218,,,,218,,,,,,,,218,,,,,218,218,218,218',
'218,218,,,,218,218,,,,,,,218,,,218,218,218,,,218,218,219,219,219,,219',
',,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219',
'219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219,219',
'219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219',
',,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219',
',,219,219,219,,,219,219,220,220,220,,220,,,,220,220,,,,220,,220,220',
'220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220',
',,220,220,220,220,220,220,220,220,,220,220,220,,220,220,,220,220,220',
',,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,',
',220,220,220,220,220,220,,,,220,220,,,,,,,220,,,220,220,220,,,220,220',
'221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221,221,221,,,,',
',221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221',
'221,221,,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,',
'221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221',
',,,221,221,,,,,,,221,,,221,221,221,,,221,221,222,222,222,,222,,,,222',
'222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222',
'222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,',
'222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,',
',,,222,,,,,,,,222,,,,,222,222,222,222,222,222,,,,222,222,222,,,,,,222',
',,222,222,222,,,222,222,233,233,233,,233,,,,233,233,,,,233,,233,233',
'233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233',
',,233,233,233,233,233,233,233,233,,233,233,233,,233,233,,233,233,233',
',,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,',
',233,233,233,233,233,233,,,,233,233,,,,,,,233,,,233,233,233,,,233,233',
'236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,',
',236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236',
'236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,',
'236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236',
',,,236,236,,,,,,,236,,,236,236,236,,,236,236,237,237,237,,237,,,,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,',
',,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,,,,,,,237,',
',237,237,237,,,237,237,238,238,238,,238,,,,238,238,,,,238,,238,238,238',
'238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238',
'238,238,238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,',
',,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238',
'238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238,238,,,238,238,239',
'239,239,,239,,,,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239',
'239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239',
'239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239',
',,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239',
'239,,,,,,,239,,,239,239,239,,,239,239,240,240,240,,240,,,,240,240,,',
',240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,',
',240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240',
',240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,',
',,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,,,,,240,,,240,240',
'240,,,240,240,241,241,241,,241,,,,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241',
'241,241,241,241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,',
',,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241',
'241,241,241,,,,241,241,,,,,,,241,,,241,241,241,,,241,241,242,242,242',
',242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242',
'242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242',
'242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242',
',,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,',
',,,242,,,242,242,242,,,242,242,243,243,243,,243,,,,243,243,,,,243,,243',
'243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,',
',243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,,243,243',
'243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243',
',,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,,,243,243,243,,,243',
'243,244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244',
',,,244,244,,,,,,,244,,,244,244,244,,,244,244,245,245,245,,245,,,,245',
'245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245',
'245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,',
'245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,',
',245,245,245,,,245,245,246,246,246,,246,,,,246,246,,,,246,,246,246,246',
'246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246',
'246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,',
',,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246',
'246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246,246,247',
'247,247,,247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247',
'247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247',
'247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247',
',,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247',
'247,,,,,,,247,,,247,247,247,,,247,247,248,248,248,,248,,,,248,248,,',
',248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,',
',248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248',
',248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,',
',,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248',
'248,,,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249',
'249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249',
'249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,',
',,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249',
'249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,250,250,250',
',250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250',
'250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250',
'250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250',
',,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,',
',,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251,251,,,,251,,251',
'251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,',
',251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251',
'251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251',
',,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251',
'251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252',
',,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252',
'252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252',
',,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252',
',,,252,252,,,,,,,252,,,252,252,252,,,252,252,253,253,253,,253,,,,253',
'253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253',
'253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,',
'253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,',
',253,253,253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,',
',,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,255',
'255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255',
'255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255',
'255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255',
',,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255',
'255,,,,,,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256,256,,',
',256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,',
',256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256',
',256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,',
',,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256',
'256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257',
'257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257',
'257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,',
',,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257',
'257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257,257,258,258,258',
',258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258',
'258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258',
'258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258',
',,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,',
',,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259,259,,,,259,,259',
'259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,',
',259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259',
'259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259',
',,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,,259',
'259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260',
',,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260',
'260,260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260',
',,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260',
',,,260,260,,,,,,,260,,,260,260,260,,,260,260,261,261,261,,261,,,,261',
'261,,,,261,,261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261',
'261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,',
'261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,',
',,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,,,,,261,',
',261,261,261,,,261,261,268,268,268,,268,,,,268,268,,,,268,,268,268,268',
'268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268',
'268,268,268,268,268,268,268,268,268,268,268,,268,268,,268,268,268,,',
',,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,268,,268,,268,,,,,,,,268',
',,,,268,268,268,268,268,268,,,,268,268,,,,,,,268,,268,268,268,268,,',
'268,268,274,274,274,,274,,,,274,274,,,,274,,274,274,274,274,274,274',
'274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274,274',
'274,274,274,274,274,274,274,274,,274,274,,274,274,274,,,,,,,,,,,,,,',
',,,,,274,,,274,,,274,274,,,274,,274,,274,,274,,,,,,,,274,,,,,274,274',
'274,274,274,274,,,,274,274,,,,,,,274,,274,274,274,274,,,274,274,277',
'277,277,,277,,,,277,277,,,,277,,277,277,277,277,277,277,277,,,,,,277',
'277,277,277,277,277,277,,,277,,,,,,,277,,,277,277,277,277,277,277,277',
'277,277,277,277,277,,277,277,,277,277,277,,,,,,,,,,,,,,,,,,,,277,,,277',
',,277,277,,,277,,277,,277,,277,,,,,,,,277,,,,,277,277,277,277,277,277',
',,,277,277,277,,,,,,277,,277,277,277,277,,,277,277,284,284,284,,284',
',,,284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284,284,284,284',
'284,284,284,,,284,,,,,,,284,,,284,284,284,284,284,284,284,284,,284,284',
'284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284,,,284,,,284,284,,,284',
',,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284,,,,284,284,,,,,,,284',
',,284,284,284,,,284,284,286,286,286,,286,,,,286,286,,,,286,,286,286',
'286,286,286,286,286,,,,,,286,286,286,286,286,286,286,,,286,,,,,,,286',
',,286,286,286,286,286,286,286,286,,286,286,286,,286,286,,286,286,286',
',,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,,,,,286,,,,,,,,286,,,',
',286,286,286,286,286,286,,,,286,286,,,,,,,286,,,286,286,286,,,286,286',
'288,288,288,,288,,,,288,288,,,,288,,288,288,288,288,288,288,288,,,,',
',288,288,288,288,288,288,288,,,288,,,,,,,288,,,288,288,288,288,288,288',
'288,288,,288,288,288,,288,288,,288,288,288,,,,,,,,,,,,,,,,,,,,288,,',
'288,,,288,288,,,288,,,,,,288,,,,,,,,288,,,,,288,288,288,288,288,288',
',,,288,288,,,,,,,288,,,288,288,288,,,288,288,290,290,290,,290,,,,290',
'290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290,290,290,290',
'290,,,290,,,,,,,290,,,290,290,290,290,290,290,290,290,,290,290,290,',
'290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,,290,,',
',,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,,,,,,,290,',
',290,290,290,,,290,290,291,291,291,,291,,,,291,291,,,,291,,291,291,291',
'291,291,291,291,,,,,,291,291,291,291,291,291,291,,,291,,,,,,,291,,,291',
'291,291,291,291,291,291,291,,291,291,291,,291,291,,291,291,291,,,,,',
',,,,,,,,,,,,,,291,,,291,,,291,291,,,291,,,,,,291,,,,,,,,291,,,,,291',
'291,291,291,291,291,,,,291,291,,,,,,,291,,,291,291,291,,,291,291,297',
'297,297,297,297,,,,297,297,,,,297,,297,297,297,297,297,297,297,,,,,',
'297,297,297,297,297,297,297,,,297,,,,,,297,297,,297,297,297,297,297',
'297,297,297,297,,297,297,297,,297,297,,297,297,297,,,,,,,,,,,,,,,,,',
',,297,,,297,,,297,297,,,297,,297,,,,297,,,,,,,,297,,,,,297,297,297,297',
'297,297,,,,297,297,,,,,,,297,,,297,297,297,,,297,297,303,303,303,,303',
',,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303',
'303,303,303,,,303,,,,,,,303,,,303,303,303,303,303,303,303,303,,303,303',
'303,,303,303,,,,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,,303,,,',
',,,,,,,,,,,,,,,303,303,303,303,303,303,,,,303,303,,,,303,,,303,,,303',
'303,303,,,303,303,320,320,320,,320,,,,320,320,,,,320,,320,320,320,320',
'320,320,320,,,,,,320,320,320,320,320,320,320,,,320,,,,,,,320,,,320,320',
'320,320,320,320,320,320,,320,320,320,,320,320,,,,320,,,,,,,,,,,,,,,',
',,,,320,,,320,,,320,320,,,320,,,,,,,,,,,,,,,,,,,320,320,320,320,320',
'320,,,,320,320,,,,,,,320,,,320,320,320,,,320,320,328,328,328,,328,,',
',328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328,328',
'328,328,,,328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328,328,328',
',328,328,,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,328,,328,328,,,328',
',,,,,328,,,,,,,,328,,,,,328,328,328,328,328,328,,,,328,328,,,,,,,328',
',,328,328,328,,,328,328,347,347,347,,347,,,,347,347,,,,347,,347,347',
'347,347,347,347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,,,347',
',,347,347,347,347,347,347,347,347,,347,347,347,,347,347,,347,347,347',
',,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,,347,,,,,,347,,,,,,,,347,,,',
',347,347,347,347,347,347,,,,347,347,,,,,,,347,,,347,347,347,,,347,347',
'348,348,348,,348,,,,348,348,,,,348,,348,348,348,348,348,348,348,,,,',
',348,348,348,348,348,348,348,,,348,,,,,,,348,,,348,348,348,348,348,348',
'348,348,,348,348,348,,348,348,,348,348,348,,,,,,,,,,,,,,,,,,,,348,,',
'348,,,348,348,,,348,,,,,,348,,,,,,,,348,,,,,348,348,348,348,348,348',
',,,348,348,,,,,,,348,,,348,348,348,,,348,348,360,360,360,,360,,,,360',
'360,,,,360,,360,360,360,360,360,360,360,,,,,,360,360,360,360,360,360',
'360,,,360,,,,,,,360,,,360,360,360,360,360,360,360,360,,360,360,360,',
'360,360,,,,360,,,,,,,,,,,,,,,,,,,,360,,,360,,,360,360,,,360,,,,,,,,',
',,,,,,,,,,360,360,360,360,360,360,,,,360,360,,,,,,,360,,,360,360,360',
',,360,360,362,362,362,,362,,,,362,362,,,,362,,362,362,362,362,362,362',
'362,,,,,,362,362,362,362,362,362,362,,,362,,,,,,,362,,,362,362,362,362',
'362,362,362,362,,362,362,362,,362,362,,,,362,,,,,,,,,,,,,,,,,,,,362',
',,362,,,362,362,,,362,,,,,,,,,,,,,,,,,,,362,362,362,362,362,362,,,,362',
'362,,,,,,,362,,,362,362,362,,,362,362,420,420,420,,420,,,,420,420,,',
',420,,420,420,420,420,420,420,420,,,,,,420,420,420,420,420,420,420,',
',420,,,,,,,420,,,420,420,420,420,420,420,420,420,,420,420,420,,420,420',
',420,420,420,,,,,,,,,,,,,,,,,,,,420,,,420,,,420,420,,,420,,,,,,420,',
',,,,,,420,,,,,420,420,420,420,420,420,,,,420,420,,,,,,,420,,,420,420',
'420,,,420,420,458,458,458,,458,,,,458,458,,,,458,,458,458,458,458,458',
'458,458,,,,,,458,458,458,458,458,458,458,,,458,,,,,,,458,,,458,458,458',
'458,458,458,458,458,458,458,458,458,,458,458,,458,458,458,,,,,,,,,,',
',,,,,,,,,458,,,458,,,458,458,,,458,,458,,458,,458,,,,,,,,458,,,,,458',
'458,458,458,458,458,,,,458,458,,,,,,,458,,458,458,458,458,,,458,458',
'460,460,460,,460,,,,460,460,,,,460,,460,460,460,460,460,460,460,,,,',
',460,460,460,460,460,460,460,,,460,,,,,,,460,,,460,460,460,460,460,460',
'460,460,,460,460,460,,460,460,,460,460,460,,,,,,,,,,,,,,,,,,,,460,,',
'460,,,460,460,,,460,,,,,,460,,,,,,,,460,,,,,460,460,460,460,460,460',
',,,460,460,,,,,,,460,,,460,460,460,,,460,460,461,461,461,,461,,,,461',
'461,,,,461,,461,461,461,461,461,461,461,,,,,,461,461,461,461,461,461',
'461,,,461,,,,,,,461,,,461,461,461,461,461,461,461,461,,461,461,461,',
'461,461,,461,461,461,,,,,,,,,,,,,,,,,,,,461,,,461,,,461,461,,,461,,',
',,,461,,,,,,,,461,,,,,461,461,461,461,461,461,,,,461,461,,,,,,,461,',
',461,461,461,,,461,461,462,462,462,,462,,,,462,462,,,,462,,462,462,462',
'462,462,462,462,,,,,,462,462,462,462,462,462,462,,,462,,,,,,,462,,,462',
'462,462,462,462,462,462,462,,462,462,462,,462,462,,462,462,462,,,,,',
',,,,,,,,,,,,,,462,,,462,,,462,462,,,462,,,,,,462,,,,,,,,462,,,,,462',
'462,462,462,462,462,,,,462,462,,,,,,,462,,,462,462,462,,,462,462,503',
'503,503,,503,,,,503,503,,,,503,,503,503,503,503,503,503,503,,,,,,503',
'503,503,503,503,503,503,,,503,,,,,,,503,,,503,503,503,503,503,503,503',
'503,503,503,503,503,,503,503,,503,503,503,,,,,,,,,,,,,,,,,,,,503,,,503',
',,503,503,,,503,,503,,503,,503,,,,,,,,503,,,,,503,503,503,503,503,503',
',,,503,503,,,,,,,503,,503,503,503,503,,,503,503,506,506,506,,506,,,',
'506,506,,,,506,,506,506,506,506,506,506,506,,,,,,506,506,506,506,506',
'506,506,,,506,,,,,,,506,,,506,506,506,506,506,506,506,506,506,506,506',
'506,,506,506,,506,506,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506',
',,,506,,506,,,,,,,,506,,,,,506,506,506,506,506,506,,,,506,506,,,,,,',
'506,,506,506,506,506,,,506,506,508,508,508,,508,,,,508,508,,,,508,,508',
'508,508,508,508,508,508,,,,,,508,508,508,508,508,508,508,,,508,,,,,',
',508,,,508,508,508,508,508,508,508,508,,508,508,508,,508,508,,508,508',
'508,,,,,,,,,,,,,,,,,,,,508,,,508,,,508,508,,,508,,,,,,508,,,,,,,,508',
',,,,508,508,508,508,508,508,,,,508,508,,,,,,,508,,,508,508,508,,,508',
'508,515,515,515,515,515,,,,515,515,,,,515,,515,515,515,515,515,515,515',
',,,,,515,515,515,515,515,515,515,,,515,,,,,,515,515,,515,515,515,515',
'515,515,515,515,515,,515,515,515,,515,515,,515,515,515,,,,,,,,,,,,,',
',,,,,,515,,,515,,,515,515,,,515,,515,,,,515,,,,,,,,515,,,,,515,515,515',
'515,515,515,,,,515,515,,,,,,515,515,,,515,515,515,,,515,515,522,522',
'522,,522,,,,522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522,522',
'522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522',
',522,522,522,,522,522,,,,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522',
',,522,,,,,,,,,,,,,,,,,,,522,522,522,522,522,522,,,,522,522,,,,,,,522',
',,522,522,522,,,522,522,524,524,524,,524,,,,524,524,,,,524,,524,524',
'524,524,524,524,524,,,,,,524,524,524,524,524,524,524,,,524,,,,,,,524',
',,524,524,524,524,524,524,524,524,524,524,524,524,,524,524,,524,524',
'524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,,524,,524,,524,,,,',
',,,524,,,,,524,524,524,524,524,524,,,,524,524,,,,,,,524,,524,524,524',
'524,,,524,524,530,530,530,,530,,,,530,530,,,,530,,530,530,530,530,530',
'530,530,,,,,,530,530,530,530,530,530,530,,,530,,,,,,,530,,,530,530,530',
'530,530,530,530,530,,530,530,530,,530,530,,,,530,,,,,,,,,,,,,,,,,,,',
'530,,,530,,,530,530,,,530,,,,,,,,,,,,,,,,,,,530,530,530,530,530,530',
',,,530,530,,,,,,,530,,,530,530,530,,,530,530,533,533,533,,533,,,,533',
'533,,,,533,,533,533,533,533,533,533,533,,,,,,533,533,533,533,533,533',
'533,,,533,,,,,,,533,,,533,533,533,533,533,533,533,533,,533,533,533,',
'533,533,,533,533,533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533,533,,,533,,',
',,,533,,,,,,,,533,,,,,533,533,533,533,533,533,,,,533,533,,,,,,,533,',
',533,533,533,,,533,533,534,534,534,,534,,,,534,534,,,,534,,534,534,534',
'534,534,534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,,534,,,534',
'534,534,534,534,534,534,534,,534,534,534,,534,534,,534,534,534,,,,,',
',,,,,,,,,,,,,,534,,,534,,,534,534,,,534,,,,,,534,,,,,,,,534,,,,,534',
'534,534,534,534,534,,,,534,534,,,,,,,534,,,534,534,534,,,534,534,538',
'538,538,,538,,,,538,538,,,,538,,538,538,538,538,538,538,538,,,,,,538',
'538,538,538,538,538,538,,,538,,,,,,,538,,,538,538,538,538,538,538,538',
'538,,538,538,538,,538,538,,538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538',
',,538,538,,,538,,,,,,538,,,,,,,,538,,,,,538,538,538,538,538,538,,,,538',
'538,,,,,,,538,,,538,538,538,,,538,538,544,544,544,,544,,,,544,544,,',
',544,,544,544,544,544,544,544,544,,,,,,544,544,544,544,544,544,544,',
',544,,,,,,,544,,,544,544,544,544,544,544,544,544,544,544,544,544,,544',
'544,,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,,544,,544,',
',,544,,,,,,,,544,,,,,544,544,544,544,544,544,,,,544,544,,,,,,,544,,544',
'544,544,544,,,544,544,547,547,547,,547,,,,547,547,,,,547,,547,547,547',
'547,547,547,547,,,,,,547,547,547,547,547,547,547,,,547,,,,,,,547,,,547',
'547,547,547,547,547,547,547,547,547,547,547,,547,547,,547,547,547,,',
',,,,,,,,,,,,,,,,,547,,,547,,,547,547,,,547,,,,,,547,,,,,,,,547,,,,,547',
'547,547,547,547,547,,,,547,547,,,,,,,547,,547,547,547,547,,,547,547',
'572,572,572,,572,,,,572,572,,,,572,,572,572,572,572,572,572,572,,,,',
',572,572,572,572,572,572,572,,,572,,,,,,,572,,,572,572,572,572,572,572',
'572,572,,572,572,572,,572,572,,572,572,572,,,,,,,,,,,,,,,,,,,,572,,',
'572,,,572,572,,,572,,,,,,572,,,,,,,,572,,,,,572,572,572,572,572,572',
',,,572,572,,,,,,,572,,,572,572,572,,,572,572,593,593,593,,593,,,,593',
'593,,,,593,,593,593,593,593,593,593,593,,,,,,593,593,593,593,593,593',
'593,,,593,,,,,,,593,,,593,593,593,593,593,593,593,593,593,593,593,593',
',593,593,,593,593,593,,,,,,,,,,,,,,,,,,,,593,,,593,,,593,593,,,593,',
'593,,593,,593,,,,,,,,593,,,,,593,593,593,593,593,593,,,,593,593,,,,',
',,593,,593,593,593,593,,,593,593,605,605,605,,605,,,,605,605,,,,605',
',605,605,605,605,605,605,605,,,,,,605,605,605,605,605,605,605,,,605',
',,,,,,605,,,605,605,605,605,605,605,605,605,,605,605,605,,605,605,,605',
'605,605,,,,,,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605,,,,,,605,,,,,,',
',605,,,,,605,605,605,605,605,605,,,,605,605,,,,,,,605,,,605,605,605',
',,605,605,609,609,609,,609,,,,609,609,,,,609,,609,609,609,609,609,609',
'609,,,,,,609,609,609,609,609,609,609,,,609,,,,,,,609,,,609,609,609,609',
'609,609,609,609,,609,609,609,,609,609,,609,609,609,,,,,,,,,,,,,,,,,',
',,609,,,609,,,609,609,,,609,,,,,,609,,,,,,,,609,,,,,609,609,609,609',
'609,609,,,,609,609,,,,,,,609,,,609,609,609,,,609,609,638,638,638,,638',
',,,638,638,,,,638,,638,638,638,638,638,638,638,,,,,,638,638,638,638',
'638,638,638,,,638,,,,,,,638,,,638,638,638,638,638,638,638,638,,638,638',
'638,,638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638,,,638',
',638,,,,638,,,,,,,,638,,,,,638,638,638,638,638,638,,,,638,638,,,,,,',
'638,,,638,638,638,,,638,638,639,639,639,,639,,,,639,639,,,,639,,639',
'639,639,639,639,639,639,,,,,,639,639,639,639,639,639,639,,,639,,,,,',
',639,,,639,639,639,639,639,639,639,639,,639,639,639,,639,639,,639,639',
'639,,,,,,,,,,,,,,,,,,,,639,,,639,,,639,639,,,639,,,,,,639,,,,,,,,639',
',,,,639,639,639,639,639,639,,,,639,639,,,,,,,639,,,639,639,639,,,639',
'639,642,642,642,,642,,,,642,642,,,,642,,642,642,642,642,642,642,642',
',,,,,642,642,642,642,642,642,642,,,642,,,,,,,642,,,642,642,642,642,642',
'642,642,642,642,642,642,642,,642,642,,642,642,642,,,,,,,,,,,,,,,,,,',
',642,,,642,,,642,642,,,642,,642,,642,,642,,,,,,,,642,,,,,642,642,642',
'642,642,642,,,,642,642,,,,,,,642,,642,642,642,642,,,642,642,643,643',
'643,,643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643,643',
'643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643,643,643,643',
'643,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,',
',643,643,,,643,,,,643,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,',
',643,643,,,,,,,643,,643,643,643,643,,,643,643,644,644,644,,644,,,,644',
'644,,,,644,,644,644,644,644,644,644,644,,,,,,644,644,644,644,644,644',
'644,,,644,,,,,,,644,,,644,644,644,644,644,644,644,644,,644,644,644,',
'644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,',
',,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644,644,,,,,,,644,',
',644,644,644,,,644,644,645,645,645,,645,,,,645,645,,,,645,,645,645,645',
'645,645,645,645,,,,,,645,645,645,645,645,645,645,,,645,,,,,,,645,,,645',
'645,645,645,645,645,645,645,,645,645,645,,645,645,,645,645,645,,,,,',
',,,,,,,,,,,,,,645,,,645,,,645,645,,,645,,,,,,645,,,,,,,,645,,,,,645',
'645,645,645,645,645,,,,645,645,,,,,,,645,,,645,645,645,,,645,645,650',
'650,650,,650,,,,650,650,,,,650,,650,650,650,650,650,650,650,,,,,,650',
'650,650,650,650,650,650,,,650,,,,,,,650,,,650,650,650,650,650,650,650',
'650,,650,650,650,,650,650,,650,650,650,,,,,,,,,,,,,,,,,,,,650,,,650',
',,650,650,,,650,,,,,,650,,,,,,,,650,,,,,650,650,650,650,650,650,,,,650',
'650,,,,,,,650,,,650,650,650,,,650,650,651,651,651,,651,,,,651,651,,',
',651,,651,651,651,651,651,651,651,,,,,,651,651,651,651,651,651,651,',
',651,,,,,,,651,,,651,651,651,651,651,651,651,651,,651,651,651,,651,651',
',651,651,651,,,,,,,,,,,,,,,,,,,,651,,,651,,,651,651,,,651,,,,,,651,',
',,,,,,651,,,,,651,651,651,651,651,651,,,,651,651,,,,,,,651,,,651,651',
'651,,,651,651,654,654,654,,654,,,,654,654,,,,654,,654,654,654,654,654',
'654,654,,,,,,654,654,654,654,654,654,654,,,654,,,,,,,654,,,654,654,654',
'654,654,654,654,654,,654,654,654,,654,654,,654,654,654,,,,,,,,,,,,,',
',,,,,,654,,,654,,,654,654,,,654,,,,,,654,,,,,,,,654,,,,,654,654,654',
'654,654,654,,,,654,654,,,,,,,654,,,654,654,654,,,654,654,655,655,655',
',655,,,,655,655,,,,655,,655,655,655,655,655,655,655,,,,,,655,655,655',
'655,655,655,655,,,655,,,,,,,655,,,655,655,655,655,655,655,655,655,,655',
'655,655,,655,655,,655,655,655,,,,,,,,,,,,,,,,,,,,655,,,655,,,655,655',
',,655,,,,,,655,,,,,,,,655,,,,,655,655,655,655,655,655,,,,655,655,,,',
',,,655,,,655,655,655,,,655,655,679,679,679,,679,,,,679,679,,,,679,,679',
'679,679,679,679,679,679,,,,,,679,679,679,679,679,679,679,,,679,,,,,',
',679,,,679,679,679,679,679,679,679,679,,679,679,679,,679,679,,679,679',
'679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679,679,,,679,,,,,,679,,,,,,,,679',
',,,,679,679,679,679,679,679,,,,679,679,,,,,,,679,,,679,679,679,,,679',
'679,682,682,682,,682,,,,682,682,,,,682,,682,682,682,682,682,682,682',
',,,,,682,682,682,682,682,682,682,,,682,,,,,,,682,,,682,682,682,682,682',
'682,682,682,,682,682,682,,682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682',
',,682,,,682,682,,,682,,,,,,682,,,,,,,,682,,,,,682,682,682,682,682,682',
',,,682,682,,,,,,,682,,,682,682,682,,,682,682,685,685,685,,685,,,,685',
'685,,,,685,,685,685,685,685,685,685,685,,,,,,685,685,685,685,685,685',
'685,,,685,,,,,,,685,,,685,685,685,685,685,685,685,685,,685,685,685,',
'685,685,,,,685,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,685,,,685,,,,,,,,',
',,,,,,,,,,685,685,685,685,685,685,,,,685,685,,,,,,,685,,,685,685,685',
',,685,685,696,696,696,,696,,,,696,696,,,,696,,696,696,696,696,696,696',
'696,,,,,,696,696,696,696,696,696,696,,,696,,,,,,,696,,,696,696,696,696',
'696,696,696,696,,696,696,696,,696,696,,,,696,,,,,,,,,,,,,,,,,,,,696',
',,696,,,696,696,,,696,,,,,,,,,,,,,,,,,,,696,696,696,696,696,696,,,,696',
'696,,,,,,,696,,,696,696,696,,,696,696,701,701,701,,701,,,,701,701,,',
',701,,701,701,701,701,701,701,701,,,,,,701,701,701,701,701,701,701,',
',701,,,,,,,701,,,701,701,701,701,701,701,701,701,,701,701,701,,701,701',
',701,701,701,,,,,,,,,,,,,,,,,,,,701,,,701,,,701,701,,,701,,701,,,,701',
',,,,,,,701,,,,,701,701,701,701,701,701,,,,701,701,,,,,,,701,,,701,701',
'701,,,701,701,719,719,719,,719,,,,719,719,,,,719,,719,719,719,719,719',
'719,719,,,,,,719,719,719,719,719,719,719,,,719,,,,,,,719,,,719,719,719',
'719,719,719,719,719,,719,719,719,,719,719,,719,719,719,,,,,,,,,,,,,',
',,,,,,719,,,719,,,719,719,,,719,,,,,,719,,,,,,,,719,,,,,719,719,719',
'719,719,719,,,,719,719,,,,,,,719,,,719,719,719,,,719,719,739,739,739',
',739,,,,739,739,,,,739,,739,739,739,739,739,739,739,,,,,,739,739,739',
'739,739,739,739,,,739,,,,,,,739,,,739,739,739,739,739,739,739,739,,739',
'739,739,,739,739,,739,739,739,,,,,,,,,,,,,,,,,,,,739,,,739,,,739,739',
',,739,,739,,,,739,,,,,,,,739,,,,,739,739,739,739,739,739,,,,739,739',
',,,,,,739,,,739,739,739,,,739,739,745,745,745,,745,,,,745,745,,,,745',
',745,745,745,745,745,745,745,,,,,,745,745,745,745,745,745,745,,,745',
',,,,,,745,,,745,745,745,745,745,745,745,745,,745,745,745,,745,745,,745',
'745,745,,,,,,,,,,,,,,,,,,,,745,,,745,,,745,745,,,745,,,,,,745,,,,,,',
',745,,,,,745,745,745,745,745,745,,,,745,745,,,,,,,745,,,745,745,745',
',,745,745,751,751,751,,751,,,,751,751,,,,751,,751,751,751,751,751,751',
'751,,,,,,751,751,751,751,751,751,751,,,751,,,,,,,751,,,751,751,751,751',
'751,751,751,751,751,751,751,751,,751,751,,751,751,751,,,,,,,,,,,,,,',
',,,,,751,,,751,,,751,751,,,751,,751,,751,,751,,,,,,,,751,,,,,751,751',
'751,751,751,751,,,,751,751,,,,,,,751,,751,751,751,751,,,751,751,773',
'773,773,,773,,,,773,773,,,,773,,773,773,773,773,773,773,773,,,,,,773',
'773,773,773,773,773,773,,,773,,,,,,,773,,,773,773,773,773,773,773,773',
'773,,773,773,773,,773,773,,773,773,773,,,,,,,,,,,,,,,,,,,,773,,,773',
',,773,773,,,773,,,,,,773,,,,,,,,773,,,,,773,773,773,773,773,773,,,,773',
'773,,,,,,,773,,,773,773,773,,,773,773,775,775,775,,775,,,,775,775,,',
',775,,775,775,775,775,775,775,775,,,,,,775,775,775,775,775,775,775,',
',775,,,,,,,775,,,775,775,775,775,775,775,775,775,,775,775,775,,775,775',
',775,775,775,,,,,,,,,,,,,,,,,,,,775,,,775,,,775,775,,,775,,,,,,775,',
',,,,,,775,,,,,775,775,775,775,775,775,,,,775,775,,,,,,,775,,,775,775',
'775,,,775,775,789,789,789,,789,,,,789,789,,,,789,,789,789,789,789,789',
'789,789,,,,,,789,789,789,789,789,789,789,,,789,,,,,,,789,,,789,789,789',
'789,789,789,789,789,,789,789,789,,789,789,,789,789,789,,,,,,,,,,,,,',
',,,,,,789,,,789,,,789,789,,,789,,,,,,789,,,,,,,,789,,,,,789,789,789',
'789,789,789,,,,789,789,,,,,,,789,,,789,789,789,,,789,789,790,790,790',
',790,,,,790,790,,,,790,,790,790,790,790,790,790,790,,,,,,790,790,790',
'790,790,790,790,,,790,,,,,,,790,,,790,790,790,790,790,790,790,790,,790',
'790,790,,790,790,,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790',
',,790,,,,,,790,,,,,,,,790,,,,,790,790,790,790,790,790,,,,790,790,,,',
',,,790,,,790,790,790,,,790,790,791,791,791,,791,,,,791,791,,,,791,,791',
'791,791,791,791,791,791,,,,,,791,791,791,791,791,791,791,,,791,,,,,',
',791,,,791,791,791,791,791,791,791,791,,791,791,791,,791,791,,791,791',
'791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791,,,791,,,,,,791,,,,,,,,791',
',,,,791,791,791,791,791,791,,,,791,791,,,,,,,791,,,791,791,791,,,791',
'791,792,792,792,,792,,,,792,792,,,,792,,792,792,792,792,792,792,792',
',,,,,792,792,792,792,792,792,792,,,792,,,,,,,792,,,792,792,792,792,792',
'792,792,792,,792,792,792,,792,792,,792,792,792,,,,,,,,,,,,,,,,,,,,792',
',,792,,,792,792,,,792,,,,,,792,,,,,,,,792,,,,,792,792,792,792,792,792',
',,,792,792,,,,,,,792,,,792,792,792,,,792,792,794,794,794,,794,,,,794',
'794,,,,794,,794,794,794,794,794,794,794,,,,,,794,794,794,794,794,794',
'794,,,794,,,,,,,794,,,794,794,794,794,794,794,794,794,,794,794,794,',
'794,794,,794,794,794,,,,,,,,,,,,,,,,,,,,794,,,794,,,794,794,,,794,,',
',,,794,,,,,,,,794,,,,,794,794,794,794,794,794,,,,794,794,,,,,,,794,',
',794,794,794,,,794,794,806,806,806,,806,,,,806,806,,,,806,,806,806,806',
'806,806,806,806,,,,,,806,806,806,806,806,806,806,,,806,,,,,,,806,,,806',
'806,806,806,806,806,806,806,,806,806,806,,806,806,,,,806,,,,,,,,,,,',
',,,,,,,,806,,,806,,,806,806,,,806,,,,,,,,,,,,,,,,,,,806,806,806,806',
'806,806,,,,806,806,,,,,,,806,,,806,806,806,,,806,806,853,853,853,,853',
',,,853,853,,,,853,,853,853,853,853,853,853,853,,,,,,853,853,853,853',
'853,853,853,,,853,,,,,,,853,,,853,853,853,853,853,853,853,853,,853,853',
'853,,853,853,,853,853,853,,,,,,,,,,,,,,,,,,,,853,,,853,,,853,853,,,853',
',,,,,853,,,,,,,,853,,,,,853,853,853,853,853,853,,,,853,853,,,,,,,853',
',,853,853,853,,,853,853,866,866,866,,866,,,,866,866,,,,866,,866,866',
'866,866,866,866,866,,,,,,866,866,866,866,866,866,866,,,866,,,,,,,866',
',,866,866,866,866,866,866,866,866,,866,866,866,,866,866,,866,866,866',
',,,,,,,,,,,,,,,,,,,866,,,866,,,866,866,,,866,,,,,,866,,,,,,,,866,,,',
',866,866,866,866,866,866,,,,866,866,,,,,,,866,,,866,866,866,,,866,866',
'884,884,884,,884,,,,884,884,,,,884,,884,884,884,884,884,884,884,,,,',
',884,884,884,884,884,884,884,,,884,,,,,,,884,,,884,884,884,884,884,884',
'884,884,884,884,884,884,,884,884,,884,884,884,,,,,,,,,,,,,,,,,,,,884',
',,884,,,884,884,,,884,,,,884,,884,,,,,,,,884,,,,,884,884,884,884,884',
'884,,,,884,884,,,,,,,884,,884,884,884,884,,,884,884,885,885,885,,885',
',,,885,885,,,,885,,885,885,885,885,885,885,885,,,,,,885,885,885,885',
'885,885,885,,,885,,,,,,,885,,,885,885,885,885,885,885,885,885,,885,885',
'885,,885,885,,885,885,885,,,,,,,,,,,,,,,,,,,,885,,,885,,,885,885,,,885',
',,,,,885,,,,,,,,885,,,,,885,885,885,885,885,885,,,,885,885,,,,,,,885',
',,885,885,885,,,885,885,900,900,900,,900,,,,900,900,,,,900,,900,900',
'900,900,900,900,900,,,,,,900,900,900,900,900,900,900,,,900,,,,,,,900',
',,900,900,900,900,900,900,900,900,,900,900,900,,900,900,,,,900,,,,,',
',,,,,,,,,,,,,,900,,,900,,,900,900,,,900,,,,,,,,,,,,,,,,,,,900,900,900',
'900,900,900,,,,900,900,,,,,,,900,,,900,900,900,,,900,900,912,912,912',
',912,,,,912,912,,,,912,,912,912,912,912,912,912,912,,,,,,912,912,912',
'912,912,912,912,,,912,,,,,,,912,,,912,912,912,912,912,912,912,912,,912',
'912,912,,912,912,,,,912,,,,,,,,,,,,,,,,,,,,912,,,912,,,912,912,,,912',
',,,,,,,,,,,,,,,,,,912,912,912,912,912,912,,,,912,912,,,,,,,912,,,912',
'912,912,,,912,912,937,937,937,,937,,,,937,937,,,,937,,937,937,937,937',
'937,937,937,,,,,,937,937,937,937,937,937,937,,,937,,,,,,,937,,,937,937',
'937,937,937,937,937,937,,937,937,937,,937,937,,937,937,937,,,,,,,,,',
',,,,,,,,,,937,,,937,,,937,937,,,937,,937,,,,937,,,,,,,,937,,,,,937,937',
'937,937,937,937,,,,937,937,,,,,,,937,,,937,937,937,,,937,937,1012,1012',
'1012,,1012,,,,1012,1012,,,,1012,,1012,1012,1012,1012,1012,1012,1012',
',,,,,1012,1012,1012,1012,1012,1012,1012,,,1012,,,,,,,1012,,,1012,1012',
'1012,1012,1012,1012,1012,1012,1012,1012,1012,1012,,1012,1012,,1012,1012',
'1012,,,,,,,,,,,,,,,,,,,,1012,,,1012,,,1012,1012,,,1012,,1012,,1012,',
'1012,,,,,,,,1012,,,,,1012,1012,1012,1012,1012,1012,,,,1012,1012,,,,',
',,1012,,1012,1012,1012,1012,,,1012,1012,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11',
'11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11',
'11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11',
'11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12',
'12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12',
'12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12',
'12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74',
'74,74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,',
',,,,74,74,,74,74,74,74,74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,',
',,74,74,,74,74,74,74,74,74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,,,,91,91,91,91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91,91,91,91',
'91,91,91,,91,,,,,,,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91',
',,,,,,,,,,,,,91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,',
',,,,,,,,,91,411,411,411,411,411,411,411,411,411,411,411,411,411,411',
'411,411,411,411,411,411,411,411,411,411,,,,411,411,411,411,411,411,411',
'411,411,411,,,,,,411,411,411,411,411,411,411,411,411,,,411,,,,,,,,,411',
'411,,411,411,411,411,411,411,411,,,411,411,,,,411,411,411,411,,,,,,',
',,,,,,,411,411,,411,411,411,411,411,411,411,411,411,411,411,,,411,411',
',,,,,,,,,411,,,,,,,,,411,635,635,635,635,635,635,635,635,635,635,635',
'635,635,635,635,635,635,635,635,635,635,635,635,635,,,,635,635,635,635',
'635,635,635,635,635,635,,,,,,635,635,635,635,635,635,635,635,635,,,635',
',,,,,,,,635,635,,635,635,635,635,635,635,635,,,635,635,,,,635,635,635',
'635,,,,,,,,,,,,,,635,635,,635,635,635,635,635,635,635,635,635,635,635',
',,635,635,,,,,,,,,,635,,,,,,,,,635,761,761,761,761,761,761,761,761,761',
'761,761,761,761,761,761,761,761,761,761,761,761,761,761,761,,,,761,761',
'761,761,761,761,761,761,761,761,,,,,,761,761,761,761,761,761,761,761',
'761,,,761,,,,,,,,,761,761,,761,761,761,761,761,761,761,,,761,761,,,',
'761,761,761,761,,,,,,,,,,,,,,761,761,,761,761,761,761,761,761,761,761',
'761,761,761,490,,761,,,,,490,490,490,,,490,490,490,713,490,713,713,713',
'713,713,761,,,490,490,,,,,713,,,,,490,490,,490,490,490,490,490,,,,,',
',,,,713,,717,,717,717,717,717,717,713,713,713,713,,,,,,717,,,,,,,490',
',,,,,,490,,,,,490,490,,717,,,,,713,,,,213,213,717,717,213,,,,,,490,490',
',213,213,,213,213,213,213,213,213,213,,490,213,213,,,490,213,213,213',
'213,,,717,,,213,,,,,,,,213,213,,213,213,213,213,213,213,213,213,213',
'213,213,,,213,,,,,214,214,,,214,,,,,,,,,214,214,213,214,214,214,214',
'214,214,214,,,214,214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214',
'214,214,214,214,214,214,214,214,214,214,,,214,,,,,264,264,,,264,,,,',
',,,,264,264,214,264,264,264,264,264,264,264,,,264,264,,,,264,264,264',
'264,,,,,,,,,,,,,,264,264,,264,264,264,264,264,264,264,264,264,264,264',
',,264,,,,,456,456,,,456,,,,,,,,,456,456,264,456,456,456,456,456,456',
'456,,,456,456,,,,456,456,456,456,,,,,,456,,,,,,,,456,456,,456,456,456',
'456,456,456,456,456,456,456,456,,,456,,,,,457,457,,,457,,,,,,,,,457',
'457,456,457,457,457,457,457,457,457,,,457,457,,,,457,457,457,457,,,',
',,457,,,,,,,,457,457,,457,457,457,457,457,457,457,457,457,457,457,,',
'457,,,,,525,525,,,525,,,,,,,,,525,525,457,525,525,525,525,525,525,525',
',,525,525,,,,525,525,525,525,,,,,,525,,,,,,,,525,525,,525,525,525,525',
'525,525,525,525,525,525,525,,,525,,,,,526,526,,,526,,,,,,,,,526,526',
'525,526,526,526,526,526,526,526,,,526,526,,,,526,526,526,526,,,,,,526',
',,,,,,,526,526,,526,526,526,526,526,526,526,526,526,526,526,,,526,,',
',,535,535,,,535,,,,,,,,,535,535,526,535,535,535,535,535,535,535,,,535',
'535,,,,535,535,535,535,,,,,,535,,,,,,,,535,535,,535,535,535,535,535',
'535,535,535,535,535,535,,,535,,,,,536,536,,,536,,,,,,,,,536,536,535',
'536,536,536,536,536,536,536,,,536,536,,,,536,536,536,536,,,,,,536,,',
',,,,,536,536,,536,536,536,536,536,536,536,536,536,536,536,,,536,,,,',
'594,594,,,594,,,,,,,,,594,594,536,594,594,594,594,594,594,594,,,594',
'594,,,,594,594,594,594,,,,,,594,,,,,,,,594,594,,594,594,594,594,594',
'594,594,594,594,594,594,,,594,,,,,595,595,,,595,,,,,,,,,595,595,594',
'595,595,595,595,595,595,595,,,595,595,,,,595,595,595,595,,,,,,595,,',
',,,,,595,595,,595,595,595,595,595,595,595,595,595,595,595,,715,595,715',
'715,715,715,715,,,,,,,,,,715,,,,,595,,,,,,,,,895,,895,895,895,895,895',
',715,749,749,,,749,,,895,715,715,715,715,,749,749,,749,749,749,749,749',
'749,749,,,749,749,,,895,749,749,749,749,,,,,,749,895,895,,,715,,,749',
'749,,749,749,749,749,749,749,749,749,749,749,749,,,749,,,,,750,750,',
',750,,895,,,,,,,750,750,749,750,750,750,750,750,750,750,,,750,750,,',
',750,750,750,750,,,,,,750,,,,,,,,750,750,,750,750,750,750,750,750,750',
'750,750,750,750,,759,750,759,759,759,759,759,890,,890,890,890,890,890',
',,759,,,,,750,,890,893,,893,893,893,893,893,,,,,,,,759,,893,,,,,890',
',759,759,759,759,,,,890,890,890,890,,,,918,893,918,918,918,918,918,',
',,893,893,893,893,,920,918,920,920,920,920,920,759,,,,,,,890,,920,,',
',,,,918,922,,922,922,922,922,922,893,918,918,918,918,,,920,924,922,924',
'924,924,924,924,,,,920,920,,,,947,924,947,947,947,947,947,,922,,,,,',
'918,,947,,,922,922,,,924,,,,,,920,,,,,924,924,,,947,947,,964,964,,,964',
',947,947,947,947,,,922,964,964,,964,964,964,964,964,964,964,,,964,964',
'924,,,964,964,964,964,,,,,,964,,,947,,,,,964,964,,964,964,964,964,964',
'964,964,964,964,964,964,,997,964,997,997,997,997,997,999,,999,999,999',
'999,999,,,997,,,,,964,,999,1001,,1001,1001,1001,1001,1001,,,,,,,,997',
',1001,,,,,999,,997,997,997,997,,,,,,999,999,,,,1003,1001,1003,1003,1003',
'1003,1003,,,,,,1001,1001,,,1003,,,,,,997,,,,,,,999,,,,,,,,,1003,1013',
'1013,,,1013,,,1001,,,1003,1003,,1013,1013,,1013,1013,1013,1013,1013',
'1013,1013,,,1013,1013,,,,1013,1013,1013,1013,,,,,,1013,,,,,1003,,,1013',
'1013,,1013,1013,1013,1013,1013,1013,1013,1013,1013,1013,1013,,,1013',
',,,,1014,1014,,,1014,,,,,,,,,1014,1014,1013,1014,1014,1014,1014,1014',
'1014,1014,,,1014,1014,,,,1014,1014,1014,1014,,,,,,1014,,,,,,,,1014,1014',
',1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,,1016,1014,1016',
'1016,1016,1016,1016,1047,,1047,1047,1047,1047,1047,,,1016,,,,,1014,',
'1047,,,,,,,,,,,,,,,1016,,,,,,,1047,,,,1016,1016,,,,,,1047,1047,,,,,',
',,,,,,,,,,,,,,,,,,,,1016,,,,,,,1047' ]
        racc_action_check = arr = ::Array.new(26474, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    60,     0,   100,   nil,   318,   nil,   nil,  5657,  1128,
   nil, 23997, 24130,    27,   nil,    53,   176,   348,   147,   145,
   668,   nil,   190,  5797,  1992,   303,   nil,    36,   nil,   273,
   796,   921,  5937,  6077,  6217,   nil,  1569,  6357,  6497,   nil,
   205,   278,   361,   296,   378,  6637,  6777,  6917,   274,   574,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1046,
   nil,  7057,  7197,  7337,    87,   nil,  7477,  7617,   nil,   nil,
  7757,  7897,   323,   nil, 24263,   nil,   nil,   nil,   nil,   nil,
   334,   nil,   nil,   nil,   nil,   nil,   nil,   288,   313,   324,
   355, 24396,   nil,   nil,   nil,   nil,   nil,   nil,     0,   nil,
   nil,   138,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  8037,   nil,   nil,   nil,   nil,  8177,
  8317,  8457,  8597,  8737,   375,   nil,   603,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   364,   nil,  1710,
  8877,  9017,  9157, 24958, 25026,   nil,   nil,  9297,  9437,  9577,
  9717,  9857,  9997,   nil,   nil,   625,   149,   218,   440,   245,
   353,   422,   nil, 10137,  1851,   421, 10277, 10417, 10557, 10697,
 10837, 10977, 11117, 11257, 11397, 11537, 11677, 11817, 11957, 12097,
 12237, 12377, 12517, 12657, 12797, 12937, 13077, 13217, 13357, 13497,
 13637, 13777,   nil,   nil, 25094,   nil,   nil,   416, 13917,   nil,
   427,   nil,   nil,   nil, 14057,   nil,   nil, 14197,   nil,  2133,
   nil,   394,   396,   nil, 14337,   454, 14477,   nil, 14617,   nil,
 14757, 14897,   nil,   nil,   685,   nil,  1141, 15037,   410,  1992,
   432,   495,   472, 15177,  2133,   630,   712,   735,   561,   763,
   nil,   532,   508,   138,   nil,   nil,   nil,   554,   390,   531,
 15317,   nil,   525,   621,   767,   nil,   623,   nil, 15457,  2274,
   781,   nil,   605,   nil,    30,   426,   611,   605,   nil,   443,
   651,   nil,   nil,   622,   814,   122,   130, 15597, 15737,   688,
   732,   623,     1,    66,   768,   703,    98,   736,   nil,   nil,
 15877,   nil, 16017,   113,   282,   465,   528,   572,   602,   624,
   629,   662,   nil,   666,   nil,   nil,   nil,   nil,   nil,   334,
   nil,   338,   nil,   653,   nil,   647,   518,   nil,   649,   560,
   nil,   653,   136,   nil,   655,   192,   nil,   570,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  2415, 24529,   nil,   nil,   nil,   nil,   675,   nil,   nil,   701,
 16157,   705,   nil,   nil,  1710,   714,   nil,   nil,   714,   729,
   663,   769,  1178,   nil,   nil,   nil,   270,   395,   793,   nil,
   nil,  1303,  1435,   nil,  2274,   nil,   741,   nil,   nil,  1569,
   nil,   nil,   nil,   nil,   284,   nil, 25162, 25230, 16297,   281,
 16437, 16577, 16717,  3966,  4107,  1234,  1286,   821,   825,   827,
   829,  5657,  5797,  4413,  4248,  1251,  1385,  4389,  4530,  4671,
  4812,  4953,  5094,  5235,  1133,  1221,  5376,  5517,  2415,    85,
 24907,   nil,   nil,   nil,   nil,   nil,   nil,   281,   283,   786,
   789,   nil,   nil, 16857,   nil,   nil, 16997,   nil, 17137,   nil,
   393,   nil,   nil,   nil,   nil, 17277,  1385,   793,   795,   nil,
   nil,   797, 17417,   806, 17557, 25298, 25366,   860,   846,   nil,
 17697,   813,   nil, 17837, 17977, 25434, 25502,  2556, 18117,   937,
   942,   827,   nil,   nil, 18257,   nil,   nil, 18397,   nil,   nil,
   nil,   127,   726,   nil,   826,   838,   nil,   840,   845,   847,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   835,  1046,
   nil,   nil, 18537,   nil,   nil,   nil,   930,   nil,   nil,   nil,
   932,   nil,   nil,   934,  2556,   975,   nil,  2697,   131,   198,
   986,   998,   nil, 18677, 25570, 25638,   146,   nil,   334,   398,
   117,   nil,   865,   nil,    62, 18817,   nil,  1109,   nil, 18957,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   452,   nil,   nil,   515,   nil,   nil,   nil,   880,   nil,
   nil,   883,   nil,   904,   nil, 24662,   nil,   890, 19097, 19237,
   802,   926, 19377, 19517, 19657, 19797,   926,   nil,   nil,   nil,
 19937, 20077,   942,   nil, 20217, 20357,   nil,   283,   285,   520,
   658,   917,  1851,   917,   nil,   nil,  1366,   nil,   nil,  1022,
   142,   372,   nil,   nil,   nil,   nil,   922,   nil,   973, 20497,
   nil,   nil, 20637,  1398,   301, 20777,   936,   nil,   940,    32,
    57,   977,   129,   888,   979,   942, 20917,  2697,  1010,   289,
  1064, 21057,   nil,   nil,   509,   nil,  2838,  2979,   954,   484,
   nil,   nil,   840, 24871,   nil, 25700,   nil, 24911,   nil, 21197,
   nil,  1176,   nil,   952,   513,   965,   nil,   nil,   nil,   nil,
   958,   nil,  1081,   nil,   nil,   nil,   nil,  1089,   nil, 21337,
   976,   166,   168,   204,   276, 21477,   nil,   871,   nil, 25739,
 25807, 21617,   nil,   nil,   nil,   716,  1000,  3120,  3261, 25869,
   718, 24795,   291,   741,  3402,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   976, 21757,  2838, 21897,   nil,   980,   nil,  2979,
   nil,  3120,   nil,   nil,  3261,   nil,  3402,   nil,  3543, 22037,
 22177, 22317, 22457,   297, 22597,   982,   983,   nil,   998,  1003,
  1007,   nil,  1029,  1013,  1015,  1004, 22737,   nil,   nil,  3543,
   nil,   nil,   nil,  3684,  3825,   nil,   nil,   nil,  1027,    58,
   nil,   nil,  1150,   nil,  3966,  1032,  1100,   nil,   nil,   nil,
  1080,  1186,  1070,  1068,   nil,   nil,   nil,  1072,  1073,   nil,
  1077,  1082,   nil,  1083,   nil,   nil,  1087,  1243,  1087,   863,
   nil,  1214,   nil, 22877,  1225,  4107,  4248,   nil,   159,   206,
   205,   459,   890,   nil,  1109,  4389, 23017,   nil,   728,  1231,
  1232,  1116,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1131,  1130,   nil,  3684, 23157, 23297,  3825,   509,   nil,   nil,
 25876,   nil,   nil, 25893,   nil, 25730,   nil,   nil,  1155,  1039,
 23437,   892,  1212,  1261,  4530,  1158,  1267,   nil,  4671,   nil,
   nil,   161, 23577,   nil,   nil,   nil,   nil,   nil, 25930,   nil,
 25945,   nil, 25969,   nil, 25984,   nil,   nil,   nil,   nil,   526,
   987,  1149,   nil,   170,   nil,  1271,  1283, 23717,  4812,   nil,
   nil,  1284,   751,   nil,   nil,   nil,   nil, 25999,   nil,  1166,
   nil,   nil,  1170,  1173,  1177,  1179,   nil,  1184,   nil,   702,
   nil,   nil,   nil,   985, 26040,   nil,   nil,  1201,   nil,   nil,
   nil,  4953,   173,   177,   990,  1267,   188,   nil,  1194,  1207,
  1218,  1219,  1220,  1053,  1222,  1171,  5094,   nil,   nil,   nil,
   224,  5235,   nil,   nil,  5376,  5517,   nil, 26102,   nil, 26109,
   nil, 26126,   nil, 26163,   nil,   nil,   nil,  1428,  1268,  1269,
   nil,  1359, 23857, 26202, 26270,   191, 26332,   nil,   nil,   nil,
   nil,  1310,  1239,  1043,   nil,   nil,   nil,  1360,  1375,  1383,
  1264,  1266,  1267,  1272,   nil,   nil,  1277,   192,   256,   262,
   290,  1276,  1284,   nil,   nil,   nil,   nil, 26339,   nil,   nil,
   nil,   nil,   260,   nil,  1289,   nil ]

racc_action_default = [
    -1,  -626,  -625,  -626,    -2,  -612,    -4,    -5,  -626,    -8,
    -9,  -626,  -626,  -626,   -29,  -626,  -626,  -626,  -280,  -626,
   -40,   -43,  -614,  -626,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -292,  -331,  -332,   -69,  -625,   -73,   -81,   -83,
  -626,  -514,  -515,  -626,  -626,  -626,  -626,  -626,  -614,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -600,
  -282,  -614,  -625,  -625,  -300,  -403,  -626,  -626,  -305,  -308,
  -612,  -626,  -316,  -323,  -626,  -333,  -334,  -445,  -446,  -447,
  -448,  -449,  -450,  -625,  -453,  -625,  -625,  -625,  -625,  -625,
  -625,  -625,  -490,  -496,  -498,  -499,  -500,  -501,  -598,  -503,
  -504,  -599,  -506,  -507,  -508,  -509,  -510,  -511,  -512,  -513,
  -518,  -519,  1056,    -3,  -613,  -621,  -622,  -623,    -7,  -626,
  -626,  -626,  -626,  -626,  -626,   -17,  -626,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -625,
  -626,  -626,  -625,  -626,  -626,  -610,  -611,  -626,  -626,  -626,
  -626,  -626,  -614,  -615,   -47,  -626,  -514,  -515,  -626,  -280,
  -626,  -626,  -230,  -626,  -625,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -409,  -412,  -626,  -608,  -609,   -58,  -626,  -299,
  -626,  -426,  -429,   -64,  -625,  -423,   -65,  -614,   -66,  -239,
  -252,  -625,  -625,  -256,  -626,  -262,  -626,  -625,  -490,  -591,
  -626,  -626,   -67,   -68,  -612,   -13,   -14,  -626,   -71,  -625,
  -614,  -626,   -74,   -77,  -625,   -89,   -90,  -626,  -626,   -97,
  -292,  -295,  -614,  -416,  -331,  -332,  -335,  -424,  -626,   -79,
  -626,   -85,  -289,  -497,  -626,  -215,  -216,  -231,  -626,  -625,
  -285,  -284,  -626,  -240,  -618,  -618,  -626,  -626,  -589,  -618,
  -626,  -301,  -302,  -546,   -49,  -626,  -626,  -626,  -626,  -612,
  -626,  -613,  -514,  -515,  -626,  -626,  -280,  -626,  -356,  -357,
  -626,  -319,  -626,  -112,  -113,  -154,  -155,  -156,  -172,  -177,
  -184,  -187,  -326,  -626,  -514,  -515,  -586,  -587,  -451,  -626,
  -474,  -626,  -476,  -626,  -478,  -626,  -626,  -458,  -626,  -626,
  -464,  -626,  -626,  -470,  -626,  -626,  -472,  -626,  -489,  -491,
  -492,  -493,  -494,    -6,  -624,   -23,   -24,   -25,   -26,   -27,
  -625,  -626,   -19,   -20,   -21,  -122,  -626,   -30,   -39,  -267,
  -626,  -626,  -266,   -31,  -197,  -614,  -247,  -248,  -625,  -625,
  -601,  -602,  -257,  -421,  -603,  -604,  -602,  -601,  -257,  -420,
  -422,  -603,  -604,   -37,  -205,   -38,  -626,   -41,   -42,  -195,
  -262,   -44,   -45,   -46,  -614,  -298,  -626,  -626,  -625,  -289,
  -626,  -626,  -626,  -206,  -207,  -208,  -209,  -210,  -211,  -212,
  -213,  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,
  -226,  -227,  -228,  -229,  -232,  -233,  -234,  -235,  -614,  -625,
  -257,  -601,  -602,   -54,   -59,  -258,  -417,  -625,  -625,  -614,
  -614,  -294,  -253,  -626,  -261,  -254,  -626,  -259,  -626,  -263,
  -626,  -596,  -594,  -597,   -12,  -613,   -16,  -614,   -70,  -287,
   -86,   -75,  -626,  -614,  -625,  -626,  -626,   -96,  -626,  -497,
  -626,   -82,   -87,  -626,  -626,  -626,  -626,  -236,  -626,  -437,
  -626,  -614,  -616,  -241,  -620,  -619,  -243,  -620,  -290,  -291,
  -590,  -626,  -546,  -406,  -585,  -585,  -529,  -531,  -531,  -531,
  -545,  -547,  -548,  -549,  -550,  -551,  -552,  -553,  -554,  -626,
  -556,  -558,  -560,  -565,  -567,  -568,  -570,  -575,  -577,  -578,
  -580,  -581,  -582,  -626,  -625,  -347,  -348,  -625,  -626,  -626,
  -626,  -626,  -432,  -625,  -626,  -626,  -289,  -313,  -107,  -108,
  -626,  -110,  -626,  -280,  -626,  -626,  -324,  -546,  -328,  -626,
  -452,  -475,  -480,  -481,  -483,  -454,  -477,  -455,  -479,  -456,
  -457,  -626,  -460,  -462,  -626,  -463,  -466,  -467,  -626,  -468,
  -469,  -626,  -495,  -626,   -18,  -626,   -28,  -270,  -626,  -626,
  -425,  -626,  -249,  -251,  -626,  -626,   -60,  -245,  -246,  -418,
  -626,  -626,   -62,  -419,  -626,  -626,  -297,  -601,  -602,  -601,
  -602,  -614,  -195,  -626,  -392,  -393,  -614,  -395,  -410,   -53,
  -413,  -625,  -427,  -430,  -244,  -293,  -625,  -260,  -264,  -626,
  -592,  -593,  -626,   -15,   -72,  -626,   -78,   -84,  -614,  -601,
  -602,  -625,  -605,   -95,  -626,   -80,  -626,  -204,  -214,  -614,
  -625,  -625,  -283,  -286,  -618,  -404,  -625,  -625,  -614,  -626,
  -527,  -528,  -626,  -626,  -538,  -626,  -541,  -626,  -543,  -626,
  -358,  -626,  -360,  -362,  -369,  -614,  -559,  -569,  -579,  -583,
  -625,  -349,  -625,  -306,  -350,  -351,  -309,  -626,  -312,  -626,
  -614,  -601,  -602,  -605,  -288,  -626,  -107,  -108,  -109,  -626,
  -626,  -625,  -317,  -520,  -521,  -626,  -320,  -625,  -625,  -546,
  -626,  -626,  -614,  -626,  -625,  -459,  -461,  -465,  -471,  -473,
   -10,  -123,  -268,  -626,  -198,  -626,  -617,  -625,   -33,  -200,
   -34,  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,  -626,
  -626,  -626,  -626,  -425,  -626,  -585,  -585,  -374,  -625,  -625,
  -625,  -391,  -626,  -614,  -397,  -554,  -562,  -563,  -573,  -625,
  -415,  -414,   -55,  -625,  -625,  -255,  -265,  -595,   -76,  -425,
   -88,  -296,  -625,  -354,  -625,  -438,  -625,  -439,  -440,  -242,
  -626,  -626,  -614,  -585,  -566,  -584,  -530,  -531,  -531,  -557,
  -531,  -531,  -576,  -531,  -554,  -571,  -614,  -626,  -367,  -626,
  -555,  -626,  -352,  -626,  -626,  -625,  -625,  -311,  -626,  -425,
  -626,  -107,  -108,  -111,  -614,  -625,  -626,  -523,  -626,  -626,
  -626,  -614,  -525,  -329,  -588,  -482,  -485,  -486,  -487,  -488,
  -626,  -269,   -32,  -199,  -250,  -626,  -237,  -626,  -372,  -373,
  -382,  -376,  -384,  -626,  -387,  -626,  -389,  -394,  -626,  -626,
  -626,  -561,  -626,  -626,  -625,  -626,  -626,   -11,  -625,  -444,
  -355,  -626,  -626,  -442,  -407,  -408,  -405,  -526,  -626,  -534,
  -626,  -536,  -626,  -539,  -626,  -542,  -544,  -359,  -361,  -365,
  -626,  -370,  -303,  -626,  -304,  -626,  -626,  -626,  -625,  -314,
  -425,  -626,  -626,  -321,  -325,  -327,  -524,  -546,  -484,  -585,
  -564,  -375,  -625,  -625,  -625,  -625,  -574,  -625,  -396,  -614,
  -399,  -401,  -402,  -572,  -626,  -289,  -411,  -626,  -428,  -431,
  -443,  -625,  -514,  -515,  -626,  -626,  -280,  -441,  -531,  -531,
  -531,  -531,  -363,  -626,  -368,  -626,  -625,  -307,  -310,  -264,
  -625,  -625,  -318,  -522,  -625,  -625,  -371,  -626,  -379,  -626,
  -381,  -626,  -385,  -626,  -388,  -390,  -398,  -626,  -288,  -605,
   -56,  -437,  -625,  -626,  -626,  -289,  -626,  -532,  -535,  -537,
  -540,  -626,  -366,  -625,  -433,  -434,  -435,  -626,  -626,  -626,
  -625,  -625,  -625,  -625,  -400,  -436,  -614,  -601,  -602,  -605,
  -288,  -531,  -364,  -353,  -315,  -322,  -330,  -626,  -377,  -380,
  -383,  -386,  -425,  -533,  -625,  -378 ]

clist = [
'6,221,425,448,213,280,280,280,372,263,341,16,591,130,130,275,302,16',
'584,587,224,505,422,264,560,399,117,328,543,546,445,494,700,550,316',
'316,540,758,851,432,438,298,345,346,4,16,349,553,677,125,208,677,568',
'133,133,114,748,135,135,640,333,338,323,319,499,733,736,301,316,9,822',
'300,931,379,113,9,130,799,725,710,711,380,928,382,384,387,390,393,396',
'382,490,117,680,130,839,405,406,407,408,267,273,276,854,960,842,962',
'1,282,282,282,2,714,716,718,802,330,118,531,124,956,344,344,907,16,344',
'381,278,292,293,720,207,397,16,680,604,359,606,335,339,350,281,281,281',
'621,418,411,624,616,671,618,904,668,622,984,800,622,832,635,336,672',
'673,670,376,616,337,342,357,752,505,373,334,329,541,344,344,344,344',
'347,855,348,856,9,745,991,360,280,865,677,677,605,409,868,994,362,757',
'607,761,947,433,801,803,838,959,840,551,863,1022,417,423,705,426,1034',
'456,962,443,447,442,343,16,489,928,809,403,956,497,813,498,814,17,680',
'846,1024,739,560,17,826,911,378,383,386,416,280,389,16,1042,392,395',
'280,661,225,280,898,737,875,763,496,708,764,225,225,225,568,17,307,307',
'301,398,866,837,834,950,839,426,451,452,453,454,510,609,504,504,720',
'432,438,848,380,,225,560,,,528,225,225,525,793,225,354,,532,316,952',
'275,,298,839,16,842,16,298,,535,,16,688,117,568,316,421,686,888,889',
'819,588,589,,421,695,521,,301,1043,331,812,517,301,529,939,16,523,17',
'594,,282,515,225,225,225,225,17,,691,282,,,,,316,917,316,1025,691,495',
'514,516,,,,,608,117,500,,,859,805,281,995,953,,,954,,740,839,281,,766',
',,766,919,921,,923,925,,926,829,,,344,344,,641,,978,720,6,720,782,,',
'130,,815,787,648,590,16,691,,568,653,568,,504,504,,677,647,280,,,,17',
'225,225,225,448,560,433,,225,225,225,225,225,225,634,,,633,133,,,426',
'135,,442,17,,,871,869,870,,663,568,,680,,,,996,648,,9,,,,,818,,,1030',
',664,647,982,720,,,455,225,664,664,280,940,,225,532,646,225,1035,,,',
'652,532,433,,,827,,796,815,,,316,433,,426,17,16,17,,316,442,307,17,938',
'1017,1018,1019,1020,,,442,,,864,,720,,720,307,,501,,,,,,,17,,,833,,669',
',,,,,280,,,,,518,941,225,225,,691,,676,433,,720,683,,971,,602,,602,',
',426,699,16,,1053,16,442,,805,,,805,,,,986,,,734,734,,,,,730,811,,732',
'704,,,,,,753,,568,560,,,,,,,,17,130,,,641,778,780,,,804,,783,785,,,447',
'1026,810,,,568,,,756,,,,762,532,,,641,,664,1052,,,771,504,820,648,133',
',653,,135,316,,225,,,804,,647,,,,316,,873,,,823,828,,1028,1029,,,,805',
',,,,,,,,16,16,777,,641,,860,,,280,656,,,823,,823,,,,,433,949,830,831',
'796,,17,796,,796,,,,307,426,225,442,806,,,,307,,,,,,,130,225,,16,16',
',,674,675,882,16,,504,867,,,,,872,804,,,,,,684,,,,,,687,880,891,891',
'891,344,,,1036,316,,,,,,421,17,,703,17,,,,,16,225,909,,16,16,913,,,',
',933,,225,797,16,,225,,,,691,903,,942,641,905,906,796,858,796,,796,',
'796,,,910,,,,,,,,,16,16,,,,,225,225,,,16,835,225,225,835,,225,734,,',
',,935,936,,943,,798,,,,,796,316,,,,,,,,,,344,,316,,307,,16,,,,16,,,344',
',307,,,,,,,,,,17,17,,967,,,1006,970,841,,843,,,,,16,,,891,891,891,891',
',891,,,,,,1013,,993,,,442,,,990,821,225,,806,,,806,225,,806,16,806,340',
'17,17,280,,,823,,17,,,,,16,850,,433,,16,225,1011,16,16,,,,,,426,,,,',
'641,442,1023,,,,823,1027,,,,,,891,891,891,891,901,874,,17,29,,,17,17',
',29,,,,,,,,17,,891,835,,,797,29,,797,,797,,,,,29,29,29,,29,18,,,,,,18',
',225,,17,17,806,,806,,806,,806,19,17,225,,,29,19,,,,29,29,,916,29,18',
'309,309,892,894,896,,,,,,,927,955,,957,,,,19,,963,,,419,17,,,806,17',
',,450,974,,356,,946,979,,980,,981,29,,,,,29,29,29,29,29,,358,,,,797',
'17,797,,797,,797,,,,,,,,,,,,,,18,,,,,,,,,18,,,,,17,,,,,19,507,,509,',
'511,,512,513,19,17,797,,,,17,,,17,17,1031,41,1032,,1033,,,41,,,,,,,',
',225,,,1041,,29,29,29,29,,,,,29,29,29,29,29,29,41,305,305,,,998,1000',
'1002,1004,,1005,29,,,,1054,,,,,,18,,,,,,,,,,,,,,352,,,374,,19,,,,,29',
'18,,,446,,29,,,29,,,,,,,,,,,19,,,,,,,,,29,,29,,41,,,29,637,1048,1049',
'1050,1051,41,,,,,,,,,,,,,,,,,,,29,1055,,18,,18,,,,309,18,,,,,,,,29,29',
',,19,,19,,309,,,19,,,,,,18,,,,42,,,,,,42,,,,,,,,,19,,,,,678,,,340,,681',
',603,41,603,,,,,42,306,306,,,,,,29,,,,,,,,,,,41,,,,,,,,678,,,340,,,',
',353,,,375,,,,,18,,,,,,,,,,,,726,29,,,,,,19,,,,,,,,,,,,,,,,42,,,,41',
',41,,,42,305,41,,,,,,,,,,,,,,,,305,,,,,,,,29,41,,,,,,,772,29,,,678,340',
',,,,,,,,,29,,,,,,,,,374,,374,18,,,,,,,309,,,,,,,816,309,,817,,19,,,',
',,42,,,,,,,,,29,,825,29,,,,,,29,,,,41,,,42,,,,845,29,,,,29,,,,,,,,,',
'18,,,18,,450,,,,,,,,,,,,,,19,,,19,,,29,29,,,,,29,29,,,29,,,,881,,,,',
'42,,42,,,,306,42,,,,,,,,,,,,,,,,306,,,,,,,,,42,,,,,,,41,,,,29,29,446',
'305,,,,,,,,305,,,309,,,,,,375,,375,,,309,,,,,,,,,,18,18,,,29,,,,,,29',
',,,,,29,29,,19,19,,,29,,,,,340,,41,,,41,29,42,,,,,,,,,,,,,,,,18,18,',
',,,879,18,,,,,,,,,,29,,19,19,29,29,,,,19,,,,989,,29,,,,,,,,,,,,,,,,',
'603,,,18,,,,18,18,,,,29,,29,29,,,18,,,,19,,29,29,19,19,,,,305,,,,,,19',
',,42,,305,,,,,306,,18,18,,41,41,,306,,,,18,,,,29,,,,29,19,19,,,,,,,',
',19,,,,,,,,,,,,,,,,603,,,29,18,,,,18,41,41,,976,,,42,41,,42,,,,,19,',
',,19,,,,977,,,,,29,,18,,,,,,,,,,,,,29,,,,,29,19,374,29,29,41,,,,41,41',
',,,,18,,,,,41,29,,,,,,,,,18,,,,19,18,,,18,18,,,,,,,,,,19,,41,41,,19',
',,19,19,,306,41,,,,,,,,,,306,,,,,,,,,,42,42,,,,,,,,,,,,,,374,,,,41,',
',,41,,,,972,,,,,,,,,,,,,,,,,,,,,,,,42,42,41,,,,,42,,,,,,,,,,,,,,,,,',
',,,,,,,,,,41,,,,,,,,,,,,,,375,41,,42,232,,41,42,42,41,41,,,279,279,279',
',,42,,,,,,,,325,326,327,,,,,,,,,,,,,,,279,279,,,,,42,42,,,,,,,,,42,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,375,,,,42,,,,42,,,,973,,,,,,,,,,,,',
',,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,42',
',,,,42,,,42,42,,279,424,279,,,,,444,449,,,,,,,,,,,,,,,232,,,463,464',
'465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481',
'482,483,484,485,486,487,488,,,,,,,279,,,,,,279,,,279,,,,,,,279,,279',
',279,,279,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,537,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,444,662,424,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,,279,,279,,,,,,,,,,,,,,',
',279,,,,,,,,,697,698,,,,,,,,,,279,,,279,,,,,,,,,,,,,,,,,,,,,,,,,279',
',,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'279,774,,,279,279,779,781,,,,,784,786,,,662,788,,,,,,,,,,,,,,,,,,,,',
',,,279,,,279,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,',
',,,,,,,279,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,279,,883,,,,,,,,,,,,',
',779,781,786,784,,886,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,883,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279' ]
        racc_goto_table = arr = ::Array.new(3200, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,34,25,20,27,36,36,36,60,153,89,23,95,61,61,74,53,23,92,92,22,76,30',
'39,183,60,98,34,72,72,30,42,13,72,68,68,10,99,93,40,40,49,19,19,2,23',
'19,152,77,17,17,77,187,64,64,8,58,65,65,26,6,6,67,54,25,94,94,12,68',
'9,14,50,133,169,5,9,61,142,132,137,137,6,130,6,6,6,6,6,6,6,40,98,198',
'61,188,19,19,19,19,41,41,41,14,147,193,148,1,73,73,73,3,185,185,185',
'145,32,7,55,11,194,32,32,15,23,32,170,48,48,48,131,18,170,23,198,59',
'21,59,73,73,5,71,71,71,173,31,33,173,174,45,174,46,43,174,133,143,174',
'145,66,70,43,43,75,87,174,88,91,96,97,76,100,71,101,102,32,32,32,32',
'103,104,105,106,9,107,108,109,36,110,77,77,111,9,112,113,114,115,116',
'117,118,74,134,140,143,146,143,149,58,133,22,22,150,6,147,27,148,22',
'22,61,151,23,154,130,155,7,194,158,159,160,161,24,198,132,162,163,183',
'24,164,165,168,171,172,12,36,175,23,133,176,177,36,25,24,36,145,95,178',
'179,74,152,180,24,24,24,187,24,24,24,12,181,182,186,190,191,188,6,32',
'32,32,32,169,197,6,6,131,40,40,131,6,,24,183,,,34,24,24,27,26,24,24',
',53,68,142,74,,49,188,23,193,23,49,,27,,23,25,98,187,68,71,55,137,137',
'26,19,19,,71,55,54,,12,93,51,43,50,12,67,94,23,50,24,27,,73,8,24,24',
'24,24,24,,40,73,,,,,68,137,68,14,40,48,5,9,,,,,39,98,48,,,26,187,71',
'99,143,,,143,,25,188,71,,174,,,174,185,185,,185,185,,185,72,,,32,32',
',34,,143,131,6,131,42,,,61,,76,42,74,5,23,40,,187,74,187,,6,6,,77,6',
'36,,,,24,24,24,24,20,183,74,,24,24,24,24,24,24,17,,,2,64,,,6,65,,61',
'24,,,152,10,10,,34,187,,198,,,,137,74,,9,,,,,55,,,143,,6,6,131,131,',
',51,24,6,6,36,26,,24,53,41,24,13,,,,41,53,74,,,30,,136,76,,,68,74,,6',
'24,23,24,,68,61,24,24,92,185,185,185,185,,,61,,,25,,131,,131,24,,51',
',,,,,,24,,,136,,41,,,,,,36,,,,,51,10,24,24,,40,,73,74,,131,9,,92,,24',
',24,,,6,32,23,,185,23,61,,187,,,187,,,,92,,,98,98,,,,,12,89,,12,73,',
',,,,98,,187,183,,,,,,,,24,61,,,34,22,22,,,34,,22,22,,,22,95,153,,,187',
',,32,,,,32,53,,,34,,6,26,,,17,6,53,74,64,,74,,65,68,,24,,,34,,6,,,,68',
',60,,,6,6,,10,10,,,,187,,,,,,,,,23,23,73,,34,,19,,,36,51,,,6,,6,,,,',
'74,136,12,12,136,,24,136,,136,,,,24,6,24,61,189,,,,24,,,,,,,61,24,,23',
'23,,,51,51,22,23,,6,98,,,,,98,34,,,,,,51,,,,,,51,12,6,6,6,32,,,25,68',
',,,,,71,24,,51,24,,,,,23,24,6,,23,23,6,,,,,19,,24,138,23,,24,,,,40,12',
',19,34,12,12,136,71,136,,136,,136,,,12,,,,,,,,,23,23,,,,,24,24,,,23',
'138,24,24,138,,24,98,,,,,12,12,,98,,141,,,,,136,68,,,,,,,,,,32,,68,',
'24,,23,,,,23,,,32,,24,,,,,,,,,,24,24,,12,,,34,12,141,,141,,,,,23,,,6',
'6,6,6,,6,,,,,,27,,98,,,61,,,12,51,24,,189,,,189,24,,189,23,189,69,24',
'24,36,,,6,,24,,,,,23,51,,74,,23,24,12,23,23,,,,,,6,,,,,34,61,12,,,,6',
'12,,,,,,6,6,6,6,24,51,,24,44,,,24,24,,44,,,,,,,,24,,6,138,,,138,44,',
'138,,138,,,,,44,44,44,,44,28,,,,,,28,,24,,24,24,189,,189,,189,,189,29',
'24,24,,,44,29,,,,44,44,,51,44,28,28,28,139,139,139,,,,,,,51,141,,141',
',,,29,,24,,,69,24,,,189,24,,,69,24,,28,,51,141,,141,,141,44,,,,,44,44',
'44,44,44,,29,,,,138,24,138,,138,,138,,,,,,,,,,,,,,28,,,,,,,,,28,,,,',
'24,,,,,29,69,,69,,69,,69,69,29,24,138,,,,24,,,24,24,141,56,141,,141',
',,56,,,,,,,,,24,,,141,,44,44,44,44,,,,,44,44,44,44,44,44,56,56,56,,',
'139,139,139,139,,139,44,,,,141,,,,,,28,,,,,,,,,,,,,,56,,,56,,29,,,,',
'44,28,,,29,,44,,,44,,,,,,,,,,,29,,,,,,,,,44,,44,,56,,,44,69,139,139',
'139,139,56,,,,,,,,,,,,,,,,,,,44,139,,28,,28,,,,28,28,,,,,,,,44,44,,',
'29,,29,,28,,,29,,,,,,28,,,,57,,,,,,57,,,,,,,,,29,,,,,69,,,69,,69,,28',
'56,28,,,,,57,57,57,,,,,,44,,,,,,,,,,,56,,,,,,,,69,,,69,,,,,57,,,57,',
',,,28,,,,,,,,,,,,69,44,,,,,,29,,,,,,,,,,,,,,,,57,,,,56,,56,,,57,56,56',
',,,,,,,,,,,,,,,56,,,,,,,,44,56,,,,,,,69,44,,,69,69,,,,,,,,,,44,,,,,',
',,,56,,56,28,,,,,,,28,,,,,,,69,28,,69,,29,,,,,,57,,,,,,,,,44,,69,44',
',,,,,44,,,,56,,,57,,,,69,44,,,,44,,,,,,,,,,28,,,28,,69,,,,,,,,,,,,,',
'29,,,29,,,44,44,,,,,44,44,,,44,,,,69,,,,,57,,57,,,,57,57,,,,,,,,,,,',
',,,,57,,,,,,,,,57,,,,,,,56,,,,44,44,29,56,,,,,,,,56,,,28,,,,,,57,,57',
',,28,,,,,,,,,,28,28,,,44,,,,,,44,,,,,,44,44,,29,29,,,44,,,,,69,,56,',
',56,44,57,,,,,,,,,,,,,,,,28,28,,,,,28,28,,,,,,,,,,44,,29,29,44,44,,',
',29,,,,69,,44,,,,,,,,,,,,,,,,,28,,,28,,,,28,28,,,,44,,44,44,,,28,,,',
'29,,44,44,29,29,,,,56,,,,,,29,,,57,,56,,,,,57,,28,28,,56,56,,57,,,,28',
',,,44,,,,44,29,29,,,,,,,,,29,,,,,,,,,,,,,,,,28,,,44,28,,,,28,56,56,',
'28,,,57,56,,57,,,,,29,,,,29,,,,29,,,,,44,,28,,,,,,,,,,,,,44,,,,,44,29',
'56,44,44,56,,,,56,56,,,,,28,,,,,56,44,,,,,,,,,28,,,,29,28,,,28,28,,',
',,,,,,,29,,56,56,,29,,,29,29,,57,56,,,,,,,,,,57,,,,,,,,,,57,57,,,,,',
',,,,,,,,56,,,,56,,,,56,,,,56,,,,,,,,,,,,,,,,,,,,,,,,57,57,56,,,,,57',
',,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,,,,,,,,,,,,57,56,,57,35,,56,57,57,56',
'56,,,35,35,35,,,57,,,,,,,,35,35,35,,,,,,,,,,,,,,,35,35,,,,,57,57,,,',
',,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,57,,,,57,,,,57,,,,,',
',,,,,,,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,,,,,,,',
',,,,57,,,,,57,,,57,57,,35,35,35,,,,,35,35,,,,,,,,,,,,,,,35,,,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
',,,,,,35,,,,,,35,,,35,,,,,,,35,,35,,35,,35,35,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35',
',,35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35,35,,,,,,,,,,35,,,35,,,,,,,,,,',
',,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,35,35,,,35,35,35,35,,,,,35,35,,,35,35,,,,,,,,,,,,,,',
',,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,,,,,,,,,,',
',,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,35',
'35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3200, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   106,    42,   110,   nil,    69,    -2,   108,    50,    67,
  -293,   108,    31,  -507,  -630,  -700,   nil,    38,   118,   -24,
  -215,    64,    -3,     9,   226,  -210,  -366,   -13,  1069,  1088,
  -188,   -66,    54,    20,   -21,  2187,   -27,   nil,   nil,    -4,
  -174,    70,  -236,  -338,  1034,  -345,  -662,   nil,    94,     5,
    35,   271,   nil,   -21,    25,  -203,  1221,  1400,  -544,  -226,
   -66,     2,   nil,   nil,    42,    46,  -258,    18,    -3,   919,
    96,   108,  -306,    75,   -15,  -329,  -261,  -455,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    88,   101,   -54,
   nil,   100,  -327,  -692,  -523,  -338,    95,  -437,    21,  -570,
    95,   111,  -158,   109,  -555,   110,  -556,  -415,  -756,   112,
  -566,  -172,  -565,  -751,   120,  -412,  -177,  -412,  -676,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -765,  -440,  -491,  -777,  -467,   nil,  -151,  -475,   166,   310,
  -466,   225,  -589,  -512,   nil,  -552,  -697,  -796,  -794,  -139,
  -342,   152,  -296,   -16,   -43,  -447,   nil,   nil,   -47,  -447,
   -46,  -446,  -759,  -360,  -466,  -590,   nil,   nil,   157,   -10,
    40,   152,   152,  -243,  -234,   154,   156,   156,  -510,  -359,
  -357,   175,  -487,  -319,   nil,  -446,  -445,  -291,  -619,    86,
  -440,  -617,   nil,  -611,  -774,   nil,   nil,   -99,  -414 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   295,     7,   351,   296,
   nil,   nil,   539,   nil,   852,   nil,   294,   nil,   nil,   nil,
    14,    15,    21,   231,   324,   nil,   nil,   750,   229,   230,
   nil,   nil,    20,   nil,   332,    24,    25,    26,    27,   nil,
   694,   nil,   nil,   nil,   313,   nil,   nil,    28,   427,    35,
   nil,   nil,    37,    40,    39,   nil,   226,   227,   601,   nil,
   132,   435,   131,   134,    78,    79,   nil,    93,    49,   285,
   nil,   428,   nil,   429,   440,   649,   502,   283,   268,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   269,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   585,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   722,   567,   nil,   723,   951,   795,   555,   nil,   556,   nil,
   nil,   557,   nil,   559,   665,   nil,   nil,   nil,   565,   nil,
   nil,   nil,   760,   nil,   nil,   nil,   439,   270,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,
   nil,   nil,   nil,   nil,   611,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   836,   554,   nil,   558,   844,   570,   572,
   573,   807,   576,   577,   808,   580,   583,   nil,   289 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_8,
  0, 157, :_reduce_9,
  5, 153, :_reduce_10,
  4, 156, :_reduce_11,
  2, 158, :_reduce_12,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  0, 179, :_reduce_17,
  4, 155, :_reduce_18,
  3, 155, :_reduce_19,
  3, 155, :_reduce_20,
  3, 155, :_reduce_21,
  2, 155, :_reduce_22,
  3, 155, :_reduce_23,
  3, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  4, 155, :_reduce_28,
  1, 155, :_reduce_none,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  6, 155, :_reduce_32,
  5, 155, :_reduce_33,
  5, 155, :_reduce_34,
  5, 155, :_reduce_35,
  5, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  3, 155, :_reduce_39,
  1, 155, :_reduce_none,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  1, 178, :_reduce_none,
  3, 178, :_reduce_44,
  3, 178, :_reduce_45,
  3, 178, :_reduce_46,
  2, 178, :_reduce_47,
  1, 178, :_reduce_none,
  1, 165, :_reduce_49,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 183, :_reduce_none,
  4, 183, :_reduce_53,
  0, 191, :_reduce_54,
  0, 192, :_reduce_55,
  6, 188, :_reduce_56,
  1, 190, :_reduce_57,
  2, 182, :_reduce_58,
  3, 182, :_reduce_59,
  4, 182, :_reduce_60,
  5, 182, :_reduce_61,
  4, 182, :_reduce_62,
  5, 182, :_reduce_63,
  2, 182, :_reduce_64,
  2, 182, :_reduce_65,
  2, 182, :_reduce_66,
  2, 182, :_reduce_67,
  2, 182, :_reduce_68,
  1, 167, :_reduce_none,
  3, 167, :_reduce_70,
  1, 196, :_reduce_none,
  3, 196, :_reduce_72,
  1, 195, :_reduce_73,
  2, 195, :_reduce_74,
  3, 195, :_reduce_75,
  5, 195, :_reduce_76,
  2, 195, :_reduce_77,
  4, 195, :_reduce_78,
  2, 195, :_reduce_79,
  4, 195, :_reduce_80,
  1, 195, :_reduce_81,
  3, 195, :_reduce_82,
  1, 199, :_reduce_none,
  3, 199, :_reduce_84,
  2, 198, :_reduce_85,
  3, 198, :_reduce_86,
  1, 201, :_reduce_87,
  3, 201, :_reduce_88,
  1, 200, :_reduce_89,
  1, 200, :_reduce_90,
  4, 200, :_reduce_91,
  3, 200, :_reduce_92,
  3, 200, :_reduce_93,
  3, 200, :_reduce_94,
  3, 200, :_reduce_95,
  2, 200, :_reduce_96,
  1, 200, :_reduce_97,
  1, 175, :_reduce_98,
  1, 175, :_reduce_99,
  4, 175, :_reduce_100,
  3, 175, :_reduce_101,
  3, 175, :_reduce_102,
  3, 175, :_reduce_103,
  3, 175, :_reduce_104,
  2, 175, :_reduce_105,
  1, 175, :_reduce_106,
  1, 204, :_reduce_107,
  1, 204, :_reduce_none,
  2, 205, :_reduce_109,
  1, 205, :_reduce_110,
  3, 205, :_reduce_111,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_115,
  1, 206, :_reduce_116,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 163, :_reduce_119,
  1, 163, :_reduce_none,
  1, 164, :_reduce_121,
  0, 212, :_reduce_122,
  4, 164, :_reduce_123,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 181, :_reduce_195,
  5, 181, :_reduce_196,
  3, 181, :_reduce_197,
  5, 181, :_reduce_198,
  6, 181, :_reduce_199,
  5, 181, :_reduce_200,
  5, 181, :_reduce_201,
  5, 181, :_reduce_202,
  5, 181, :_reduce_203,
  4, 181, :_reduce_204,
  3, 181, :_reduce_205,
  3, 181, :_reduce_206,
  3, 181, :_reduce_207,
  3, 181, :_reduce_208,
  3, 181, :_reduce_209,
  3, 181, :_reduce_210,
  3, 181, :_reduce_211,
  3, 181, :_reduce_212,
  3, 181, :_reduce_213,
  4, 181, :_reduce_214,
  2, 181, :_reduce_215,
  2, 181, :_reduce_216,
  3, 181, :_reduce_217,
  3, 181, :_reduce_218,
  3, 181, :_reduce_219,
  3, 181, :_reduce_220,
  3, 181, :_reduce_221,
  3, 181, :_reduce_222,
  3, 181, :_reduce_223,
  3, 181, :_reduce_224,
  3, 181, :_reduce_225,
  3, 181, :_reduce_226,
  3, 181, :_reduce_227,
  3, 181, :_reduce_228,
  3, 181, :_reduce_229,
  2, 181, :_reduce_230,
  2, 181, :_reduce_231,
  3, 181, :_reduce_232,
  3, 181, :_reduce_233,
  3, 181, :_reduce_234,
  3, 181, :_reduce_235,
  3, 181, :_reduce_236,
  6, 181, :_reduce_237,
  1, 181, :_reduce_none,
  1, 215, :_reduce_239,
  1, 216, :_reduce_none,
  2, 216, :_reduce_241,
  4, 216, :_reduce_242,
  2, 216, :_reduce_243,
  3, 220, :_reduce_244,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 171, :_reduce_247,
  1, 171, :_reduce_248,
  2, 171, :_reduce_249,
  4, 171, :_reduce_250,
  2, 171, :_reduce_251,
  1, 194, :_reduce_252,
  2, 194, :_reduce_253,
  2, 194, :_reduce_254,
  4, 194, :_reduce_255,
  1, 194, :_reduce_256,
  0, 224, :_reduce_257,
  2, 187, :_reduce_258,
  2, 223, :_reduce_259,
  2, 222, :_reduce_260,
  1, 222, :_reduce_none,
  1, 217, :_reduce_262,
  2, 217, :_reduce_263,
  3, 217, :_reduce_264,
  4, 217, :_reduce_265,
  1, 177, :_reduce_266,
  1, 177, :_reduce_267,
  3, 176, :_reduce_268,
  4, 176, :_reduce_269,
  2, 176, :_reduce_270,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_281,
  0, 247, :_reduce_282,
  4, 214, :_reduce_283,
  2, 214, :_reduce_284,
  0, 248, :_reduce_285,
  4, 214, :_reduce_286,
  3, 214, :_reduce_287,
  3, 214, :_reduce_288,
  2, 214, :_reduce_289,
  3, 214, :_reduce_290,
  3, 214, :_reduce_291,
  1, 214, :_reduce_292,
  4, 214, :_reduce_293,
  3, 214, :_reduce_294,
  1, 214, :_reduce_295,
  5, 214, :_reduce_296,
  4, 214, :_reduce_297,
  3, 214, :_reduce_298,
  2, 214, :_reduce_299,
  1, 214, :_reduce_none,
  2, 214, :_reduce_301,
  2, 214, :_reduce_302,
  6, 214, :_reduce_303,
  6, 214, :_reduce_304,
  0, 249, :_reduce_305,
  0, 250, :_reduce_306,
  7, 214, :_reduce_307,
  0, 251, :_reduce_308,
  0, 252, :_reduce_309,
  7, 214, :_reduce_310,
  5, 214, :_reduce_311,
  4, 214, :_reduce_312,
  0, 253, :_reduce_313,
  0, 254, :_reduce_314,
  9, 214, :_reduce_315,
  0, 255, :_reduce_316,
  0, 256, :_reduce_317,
  7, 214, :_reduce_318,
  0, 257, :_reduce_319,
  0, 258, :_reduce_320,
  0, 259, :_reduce_321,
  9, 214, :_reduce_322,
  0, 260, :_reduce_323,
  0, 261, :_reduce_324,
  6, 214, :_reduce_325,
  0, 262, :_reduce_326,
  6, 214, :_reduce_327,
  0, 263, :_reduce_328,
  0, 264, :_reduce_329,
  9, 214, :_reduce_330,
  1, 214, :_reduce_331,
  1, 214, :_reduce_332,
  1, 214, :_reduce_333,
  1, 214, :_reduce_334,
  1, 170, :_reduce_335,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  2, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 239, :_reduce_none,
  5, 239, :_reduce_353,
  1, 160, :_reduce_none,
  2, 160, :_reduce_355,
  1, 242, :_reduce_none,
  1, 242, :_reduce_357,
  1, 276, :_reduce_none,
  3, 276, :_reduce_359,
  1, 279, :_reduce_360,
  3, 279, :_reduce_361,
  1, 278, :_reduce_362,
  4, 278, :_reduce_363,
  6, 278, :_reduce_364,
  3, 278, :_reduce_365,
  5, 278, :_reduce_366,
  2, 278, :_reduce_367,
  4, 278, :_reduce_368,
  1, 278, :_reduce_369,
  3, 278, :_reduce_370,
  4, 280, :_reduce_371,
  2, 280, :_reduce_372,
  2, 280, :_reduce_373,
  1, 280, :_reduce_374,
  2, 285, :_reduce_375,
  1, 285, :_reduce_none,
  6, 286, :_reduce_377,
  8, 286, :_reduce_378,
  4, 286, :_reduce_379,
  6, 286, :_reduce_380,
  4, 286, :_reduce_381,
  2, 286, :_reduce_382,
  6, 286, :_reduce_383,
  2, 286, :_reduce_384,
  4, 286, :_reduce_385,
  6, 286, :_reduce_386,
  2, 286, :_reduce_387,
  4, 286, :_reduce_388,
  2, 286, :_reduce_389,
  4, 286, :_reduce_390,
  1, 286, :_reduce_391,
  1, 189, :_reduce_392,
  1, 189, :_reduce_none,
  3, 290, :_reduce_394,
  1, 290, :_reduce_395,
  4, 290, :_reduce_396,
  1, 291, :_reduce_none,
  4, 291, :_reduce_398,
  1, 292, :_reduce_399,
  3, 292, :_reduce_400,
  1, 293, :_reduce_401,
  1, 293, :_reduce_none,
  0, 297, :_reduce_403,
  3, 237, :_reduce_404,
  4, 295, :_reduce_405,
  1, 295, :_reduce_406,
  3, 296, :_reduce_407,
  3, 296, :_reduce_408,
  0, 300, :_reduce_409,
  0, 301, :_reduce_410,
  6, 299, :_reduce_411,
  2, 184, :_reduce_412,
  4, 184, :_reduce_413,
  5, 184, :_reduce_414,
  5, 184, :_reduce_415,
  0, 303, :_reduce_416,
  3, 236, :_reduce_417,
  4, 236, :_reduce_418,
  4, 236, :_reduce_419,
  3, 236, :_reduce_420,
  3, 236, :_reduce_421,
  3, 236, :_reduce_422,
  2, 236, :_reduce_423,
  1, 236, :_reduce_424,
  4, 236, :_reduce_425,
  0, 304, :_reduce_426,
  0, 305, :_reduce_427,
  6, 235, :_reduce_428,
  0, 306, :_reduce_429,
  0, 307, :_reduce_430,
  6, 235, :_reduce_431,
  0, 309, :_reduce_432,
  6, 241, :_reduce_433,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  6, 159, :_reduce_436,
  0, 159, :_reduce_437,
  1, 310, :_reduce_438,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  2, 311, :_reduce_441,
  1, 311, :_reduce_none,
  2, 161, :_reduce_443,
  1, 161, :_reduce_none,
  1, 225, :_reduce_445,
  1, 225, :_reduce_446,
  1, 225, :_reduce_none,
  1, 226, :_reduce_448,
  1, 313, :_reduce_449,
  1, 313, :_reduce_none,
  2, 313, :_reduce_451,
  3, 314, :_reduce_452,
  1, 314, :_reduce_453,
  3, 227, :_reduce_454,
  3, 228, :_reduce_455,
  3, 229, :_reduce_456,
  3, 229, :_reduce_457,
  1, 318, :_reduce_458,
  3, 318, :_reduce_459,
  1, 319, :_reduce_none,
  2, 319, :_reduce_461,
  3, 231, :_reduce_462,
  3, 231, :_reduce_463,
  1, 321, :_reduce_464,
  3, 321, :_reduce_465,
  3, 230, :_reduce_466,
  3, 230, :_reduce_467,
  3, 232, :_reduce_468,
  3, 232, :_reduce_469,
  1, 322, :_reduce_470,
  3, 322, :_reduce_471,
  1, 323, :_reduce_472,
  3, 323, :_reduce_473,
  1, 315, :_reduce_474,
  2, 315, :_reduce_475,
  1, 316, :_reduce_476,
  2, 316, :_reduce_477,
  1, 317, :_reduce_478,
  2, 317, :_reduce_479,
  1, 320, :_reduce_480,
  0, 325, :_reduce_481,
  3, 320, :_reduce_482,
  0, 326, :_reduce_483,
  4, 320, :_reduce_484,
  1, 324, :_reduce_485,
  1, 324, :_reduce_486,
  1, 324, :_reduce_487,
  1, 324, :_reduce_none,
  2, 210, :_reduce_489,
  1, 210, :_reduce_490,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  3, 211, :_reduce_495,
  1, 312, :_reduce_none,
  2, 312, :_reduce_497,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 203, :_reduce_507,
  1, 203, :_reduce_508,
  1, 203, :_reduce_509,
  1, 203, :_reduce_510,
  1, 203, :_reduce_511,
  1, 203, :_reduce_512,
  1, 203, :_reduce_513,
  1, 233, :_reduce_514,
  1, 233, :_reduce_515,
  1, 169, :_reduce_516,
  1, 169, :_reduce_517,
  1, 174, :_reduce_518,
  1, 174, :_reduce_519,
  1, 243, :_reduce_520,
  0, 328, :_reduce_521,
  4, 243, :_reduce_522,
  2, 243, :_reduce_523,
  3, 245, :_reduce_524,
  2, 245, :_reduce_525,
  4, 329, :_reduce_526,
  2, 329, :_reduce_527,
  2, 329, :_reduce_528,
  1, 329, :_reduce_none,
  2, 331, :_reduce_530,
  0, 331, :_reduce_531,
  6, 298, :_reduce_532,
  8, 298, :_reduce_533,
  4, 298, :_reduce_534,
  6, 298, :_reduce_535,
  4, 298, :_reduce_536,
  6, 298, :_reduce_537,
  2, 298, :_reduce_538,
  4, 298, :_reduce_539,
  6, 298, :_reduce_540,
  2, 298, :_reduce_541,
  4, 298, :_reduce_542,
  2, 298, :_reduce_543,
  4, 298, :_reduce_544,
  1, 298, :_reduce_545,
  0, 298, :_reduce_546,
  1, 294, :_reduce_547,
  1, 294, :_reduce_548,
  1, 294, :_reduce_549,
  1, 294, :_reduce_550,
  1, 277, :_reduce_none,
  1, 277, :_reduce_552,
  1, 333, :_reduce_none,
  1, 334, :_reduce_none,
  3, 334, :_reduce_555,
  1, 287, :_reduce_556,
  3, 287, :_reduce_557,
  1, 335, :_reduce_none,
  2, 336, :_reduce_559,
  1, 336, :_reduce_560,
  2, 337, :_reduce_561,
  1, 337, :_reduce_562,
  1, 281, :_reduce_none,
  3, 281, :_reduce_564,
  1, 330, :_reduce_none,
  3, 330, :_reduce_566,
  1, 338, :_reduce_none,
  1, 338, :_reduce_none,
  2, 282, :_reduce_569,
  1, 282, :_reduce_570,
  3, 339, :_reduce_571,
  3, 340, :_reduce_572,
  1, 288, :_reduce_573,
  3, 288, :_reduce_574,
  1, 332, :_reduce_575,
  3, 332, :_reduce_576,
  1, 341, :_reduce_none,
  1, 341, :_reduce_none,
  2, 289, :_reduce_579,
  1, 289, :_reduce_580,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  2, 284, :_reduce_583,
  2, 283, :_reduce_584,
  0, 283, :_reduce_585,
  1, 246, :_reduce_none,
  0, 343, :_reduce_587,
  4, 246, :_reduce_588,
  1, 234, :_reduce_589,
  2, 234, :_reduce_590,
  1, 219, :_reduce_none,
  3, 219, :_reduce_592,
  3, 344, :_reduce_593,
  2, 344, :_reduce_594,
  4, 344, :_reduce_595,
  2, 344, :_reduce_596,
  2, 344, :_reduce_597,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  2, 197, :_reduce_none,
  2, 172, :_reduce_none,
  0, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 244, :_reduce_621,
  1, 244, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_624,
  0, 152, :_reduce_625 ]

racc_reduce_n = 626

racc_shift_n = 1056

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_298(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 300 omitted

def _reduce_301(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_362(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_367(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_369(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_370(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
 result = 0 
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 402 omitted

def _reduce_403(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_404(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_411(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_414(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_426(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_427(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_428(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_437(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_438(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_449(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_475(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_481(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_482(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_484(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_485(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_486(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

def _reduce_507(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_508(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_509(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_511(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_513(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_514(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_518(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_519(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_520(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_521(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_523(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_525(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_526(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_556(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_557(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_560(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

# reduce 567 omitted

# reduce 568 omitted

def _reduce_569(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_570(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_571(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_572(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_573(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_580(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 581 omitted

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_584(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_585(val, _values, result)
                      result = nil
                    
    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_588(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_589(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 591 omitted

def _reduce_592(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_595(val, _values, result)
                      _, sym, _, value = val
                      sym[0] = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_596(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

def _reduce_621(val, _values, result)
 yyerrok 
    result
end

# reduce 622 omitted

# reduce 623 omitted

def _reduce_624(val, _values, result)
 yyerrok 
    result
end

def _reduce_625(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby24Parser
